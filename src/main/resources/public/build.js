!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=31)}([function(e,t,n){"use strict";e.exports=n(34)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(25)),o=i(n(7));function i(e){return e&&e.__esModule?e:{default:e}}var a={getArtistSearch:function(e){var t=r.default.ARTIST_SEARCH_URL+"?query="+e;return fetch(t).then((function(e){if(200!==e.status)throw"Artist search did not complete successfully";return e.json()}))},getArtistInfo:function(e){var t=r.default.ARTIST_INFO_URL+"?query="+e;return fetch(t).then((function(e){if(200!==e.status)throw"Artist info request did not complete successfully";return e.json()}))},getSimilarArtists:function(e){var t=r.default.SIMILAR_ARTISTS_URL+"?query="+e;return fetch(t).then((function(e){if(200!==e.status)throw"Similar artists request did not complete successfully";return e.json()}))},getArtistAlbums:function(e){var t=r.default.ARTIST_ALBUMS_URL+"?query="+e;return fetch(t).then((function(e){if(200!==e.status)throw"Similar artists request did not complete successfully";return e.json()}))},createArtistCollection:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,i){var l=r.default.CREATE_ARTIST_COLLECTION_URL+"?query="+e;fetch(l,{method:"GET",headers:{Authorization:"Bearer "+t.jwt}}).then((function(t){if(200===t.status){var r=JSON.parse(t.headers.get("Authorization"));return o.default.saveAuthorization({username:r.username,jwt:r.token}),n(t)}if(401!==t.status)return i(t);o.default.getGuestToken().then((function(t){return a.createArtistCollection(e)}))}))}))}))},getArtistCollections:function(){return o.default.getCurrentUser().then((function(e){return new Promise((function(t,n){fetch(r.default.GET_ARTIST_COLLECTIONS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then((function(e){if(200===e.status){var r=JSON.parse(e.headers.get("Authorization"));return o.default.saveAuthorization({username:r.username,jwt:r.token}),t(e)}if(401!==e.status)return n(e);o.default.getGuestToken().then((function(e){return a.getArtistCollections()}))})).catch((function(){return n()}))}))}))},getArtistCollection:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.GET_ARTIST_COLLECTION_URL+"?collectionName="+e,{method:"GET",headers:{Authorization:"Bearer "+t.jwt}}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))},addArtistToCollection:function(e,t){return o.default.getCurrentUser().then((function(n){return new Promise((function(o,i){var a=r.default.ADD_ARTIST_TO_COLLECTION_URL+"?collectionName="+t;fetch(a,{method:"POST",headers:{Authorization:"Bearer "+n.jwt},body:JSON.stringify(e)}).then((function(e){return o(e)})).catch((function(){return i()}))}))}))},removeArtistFromCollection:function(e,t){return o.default.getCurrentUser().then((function(n){return new Promise((function(o,i){var a=r.default.REMOVE_ARTIST_FROM_COLLECTION_URL+"?collectionName="+e+"&artistName="+t;fetch(a,{method:"POST",headers:{Authorization:"Bearer "+n.jwt}}).then((function(e){e.json().then((function(e){return o(e)}))})).catch((function(e){return i(e)}))}))}))},getUserSearch:function(e){return new Promise((function(t,n){fetch(r.default.USER_SEARCH_URL+"?query="+e).then((function(e){if(200!==e.status)return n(e);e.json().then((function(e){return t(e)}))})).catch((function(){return n()}))}))},addUserToFriends:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.ADD_USER_TO_FRIENDS_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:e}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))},getFriends:function(){return o.default.getCurrentUser().then((function(e){return new Promise((function(t,n){fetch(r.default.GET_FRIENDS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then((function(e){if(200!==e.status)return n(e);e.json().then((function(e){return t(e)}))})).catch((function(){return n()}))}))}))},getRecommendations:function(){return o.default.getCurrentUser().then((function(e){return new Promise((function(t,n){fetch(r.default.GET_RECOMMENDATIONS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then((function(e){if(200!==e.status)return n(e);e.json().then((function(e){return t(e)}))})).catch((function(){return n()}))}))}))},recommendArtist:function(e,t){return o.default.getCurrentUser().then((function(n){return new Promise((function(o,i){fetch(r.default.RECOMMEND_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+n.jwt},body:JSON.stringify({recommendToUser:t,artist:e})}).then((function(e){return 200!==e.status?i(e):e.json().then((function(e){return o(e)}))})).catch((function(){return i()}))}))}))},getFriendsArtistWasRecommendedTo:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.GET_FRIENDS_ARTIST_WAS_RECOMMENDED_TO_URL+"?artistMbid="+e.mbid+"&artistName="+e.artistName,{method:"GET",headers:{Authorization:"Bearer "+t.jwt}}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))},getLikedArtists:function(){return o.default.getCurrentUser().then((function(e){return new Promise((function(t,n){fetch(r.default.GET_LIKED_ARTISTS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then((function(e){if(200!==e.status)return n(e);e.json().then((function(e){return t(e)}))})).catch((function(){return n()}))}))}))},getLikedArtistMbidList:function(){return o.default.getCurrentUser().then((function(e){return new Promise((function(t,n){fetch(r.default.GET_LIKED_ARTIST_MBID_LIST_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then((function(e){if(200!==e.status)return n(e);e.json().then((function(e){return t(e)}))})).catch((function(){return n()}))}))}))},addLikedArtist:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.ADD_LIKED_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:JSON.stringify(e)}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))},removeLikedArtist:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.REMOVE_LIKED_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:JSON.stringify(e)}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))},deleteArtistCollection:function(e){return o.default.getCurrentUser().then((function(t){return new Promise((function(n,o){fetch(r.default.DELETE_ARTIST_COLLECTION_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:e}).then((function(e){if(200!==e.status)return o(e);e.json().then((function(e){return n(e)}))})).catch((function(){return o()}))}))}))}};t.default=a},function(e,t,n){"use strict";e.exports=n(40)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=v(n(39)),o=v(n(47)),i=v(n(16)),a=v(n(48)),l=v(n(49)),u=v(n(51)),s=v(n(52)),c=v(n(18)),f=v(n(10)),d=v(n(53)),p=v(n(54)),h=v(n(55)),m=v(n(56)),y=v(n(57));function v(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=l.default,t.Prompt=u.default,t.Redirect=s.default,t.Route=c.default,t.Router=f.default,t.StaticRouter=d.default,t.Switch=p.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=y.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,l],c=0;(u=new Error(t.replace(/%s/g,(function(){return s[c++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;"function"==typeof Symbol&&Symbol.iterator;var r=l(n(42)),o=l(n(43)),i=l(n(44)),a=(l(n(45)),l(n(46)));function l(e){return e&&e.__esModule?e:{default:e}}function u(e){return"/"===e.charAt(0)?e:"/"+e}function s(e){return"/"===e.charAt(0)?e.substr(1):e}function c(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function d(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}function p(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function h(e,t,n,i){var a;"string"==typeof e?(a=d(e)).state=t:(void 0===(a=(0,r.default)({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),i?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=(0,o.default)(a.pathname,i.pathname)):a.pathname=i.pathname:a.pathname||(a.pathname="/"),a}function m(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var y=!("undefined"==typeof window||!window.document||!window.document.createElement);function v(e,t){t(window.confirm(e))}function g(){try{return window.history.state||{}}catch(e){return{}}}var b={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+s(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s,decodePath:u},slash:{encodePath:u,decodePath:u}};function w(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function x(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function _(e){window.location.replace(w(window.location.href)+"#"+e)}function S(e,t,n){return Math.min(Math.max(e,t),n)}t.createBrowserHistory=function(e){void 0===e&&(e={}),y||(0,a.default)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),l=e,s=l.forceRefresh,d=void 0!==s&&s,b=l.getUserConfirmation,w=void 0===b?v:b,x=l.keyLength,_=void 0===x?6:x,S=e.basename?f(u(e.basename)):"";function k(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return S&&(i=c(i,S)),h(i,r,n)}function E(){return Math.random().toString(36).substr(2,_)}var C=m();function O(e){(0,r.default)(B,e),B.length=n.length,C.notifyListeners(B.location,B.action)}function T(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(k(e.state))}function P(){A(k(g()))}var j=!1;function A(e){if(j)j=!1,O();else{C.confirmTransitionTo(e,"POP",w,(function(t){t?O({action:"POP",location:e}):function(e){var t=B.location,n=N.indexOf(t.key);-1===n&&(n=0);var r=N.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,M(o))}(e)}))}}var R=k(g()),N=[R.key];function F(e){return S+p(e)}function M(e){n.go(e)}var L=0;function D(e){1===(L+=e)&&1===e?(window.addEventListener("popstate",T),i&&window.addEventListener("hashchange",P)):0===L&&(window.removeEventListener("popstate",T),i&&window.removeEventListener("hashchange",P))}var I=!1,B={length:n.length,action:"POP",location:R,createHref:F,push:function(e,t){var r=h(e,t,E(),B.location);C.confirmTransitionTo(r,"PUSH",w,(function(e){if(e){var t=F(r),i=r.key,a=r.state;if(o)if(n.pushState({key:i,state:a},null,t),d)window.location.href=t;else{var l=N.indexOf(B.location.key),u=N.slice(0,l+1);u.push(r.key),N=u,O({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=h(e,t,E(),B.location);C.confirmTransitionTo(r,"REPLACE",w,(function(e){if(e){var t=F(r),i=r.key,a=r.state;if(o)if(n.replaceState({key:i,state:a},null,t),d)window.location.replace(t);else{var l=N.indexOf(B.location.key);-1!==l&&(N[l]=r.key),O({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return I||(D(1),I=!0),function(){return I&&(I=!1,D(-1)),t()}},listen:function(e){var t=C.appendListener(e);return D(1),function(){D(-1),t()}}};return B},t.createHashHistory=function(e){void 0===e&&(e={}),y||(0,a.default)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,i=void 0===o?v:o,l=n.hashType,s=void 0===l?"slash":l,d=e.basename?f(u(e.basename)):"",g=b[s],S=g.encodePath,k=g.decodePath;function E(){var e=k(x());return d&&(e=c(e,d)),h(e)}var C=m();function O(e){(0,r.default)(B,e),B.length=t.length,C.notifyListeners(B.location,B.action)}var T=!1,P=null;function j(){var e,t,n=x(),r=S(n);if(n!==r)_(r);else{var o=E(),a=B.location;if(!T&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(P===p(o))return;P=null,function(e){if(T)T=!1,O();else{C.confirmTransitionTo(e,"POP",i,(function(t){t?O({action:"POP",location:e}):function(e){var t=B.location,n=F.lastIndexOf(p(t));-1===n&&(n=0);var r=F.lastIndexOf(p(e));-1===r&&(r=0);var o=n-r;o&&(T=!0,M(o))}(e)}))}}(o)}}var A=x(),R=S(A);A!==R&&_(R);var N=E(),F=[p(N)];function M(e){t.go(e)}var L=0;function D(e){1===(L+=e)&&1===e?window.addEventListener("hashchange",j):0===L&&window.removeEventListener("hashchange",j)}var I=!1,B={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=w(window.location.href)),n+"#"+S(d+p(e))},push:function(e,t){var n=h(e,void 0,void 0,B.location);C.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=p(n),r=S(d+t);if(x()!==r){P=t,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(p(B.location)),i=F.slice(0,o+1);i.push(t),F=i,O({action:"PUSH",location:n})}else O()}}))},replace:function(e,t){var n=h(e,void 0,void 0,B.location);C.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=p(n),r=S(d+t);x()!==r&&(P=t,_(r));var o=F.indexOf(p(B.location));-1!==o&&(F[o]=t),O({action:"REPLACE",location:n})}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return I||(D(1),I=!0),function(){return I&&(I=!1,D(-1)),t()}},listen:function(e){var t=C.appendListener(e);return D(1),function(){D(-1),t()}}};return B},t.createMemoryHistory=function(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,l=void 0===a?0:a,u=t.keyLength,s=void 0===u?6:u,c=m();function f(e){(0,r.default)(w,e),w.length=w.entries.length,c.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,s)}var y=S(l,0,i.length-1),v=i.map((function(e){return h(e,void 0,"string"==typeof e?d():e.key||d())})),g=p;function b(e){var t=S(w.index+e,0,w.entries.length-1),r=w.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:v.length,action:"POP",location:v[y],index:y,entries:v,createHref:g,push:function(e,t){var r=h(e,t,d(),w.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=h(e,t,d(),w.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return w},t.createLocation=h,t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)},t.parsePath=d,t.createPath=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(25),i=(r=o)&&r.__esModule?r:{default:r};var a={login:function(e,t){return new Promise((function(n,r){var o=i.default.LOGIN_API_URL+"?username="+e+"&password="+t;fetch(o,{method:"POST"}).then((function(e){if(200===e.status)return e.json();r(e)})).then((function(e){localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.token),n()}))}))},register:function(e,t,n){return new Promise((function(r,o){var a=i.default.REGISTRATION_API_URL+"?username="+e+"&email="+t+"&password="+n;fetch(a,{method:"POST"}).then((function(e){if(200===e.status)return e.json();o(e)})).then((function(e){localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.token),r()}))}))},saveAuthorization:function(e){null!==e.username&&null!==e.jwt&&("guest"===e.username?(localStorage.removeItem("username"),localStorage.removeItem("jwt"),sessionStorage.setItem("username","guest"),sessionStorage.setItem("jwt",e.jwt)):(sessionStorage.removeItem("username"),sessionStorage.removeItem("jwt"),localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.jwt)))},logout:function(){localStorage.removeItem("username"),localStorage.removeItem("jwt")},clearGuestSession:function(){sessionStorage.removeItem("username"),sessionStorage.removeItem("jwt")},renewToken:function(e){return new Promise((function(t,n){fetch(i.default.RENEW_TOKEN_URL,{method:"GET",headers:{Authorization:"Bearer "+e}}).then((function(e){return 200!==e.status?n(e):e.json().then((function(e){return t({username:e.username,jwt:e.token})}))})).catch((function(e){n(e)}))}))},getGuestToken:function(){return new Promise((function(e,t){fetch(i.default.GET_GUEST_TOKEN_URL).then((function(e){return 200!==e.status?t(repsonse):e.json()})).then((function(t){return e({username:"guest",jwt:t.token})})).catch((function(e){return t(e)}))}))},getCurrentUser:function(){return new Promise((function(e,t){return null!==localStorage.getItem("jwt")?e({username:localStorage.getItem("username"),jwt:localStorage.getItem("jwt")}):null!==sessionStorage.getItem("jwt")?e({username:sessionStorage.getItem("username"),jwt:sessionStorage.getItem("jwt")}):void a.getGuestToken().then((function(t){return a.saveAuthorization(t),e(t)})).catch((function(e){return t({username:null,jwt:null})}))}))},getCurrentUserAndRenew:function(){return new Promise((function(e,t){null!==localStorage.getItem("jwt")?a.renewToken(localStorage.getItem("jwt")).then((function(t){return a.saveAuthorization(t),e(t)})).catch((function(e){return a.logout(),a.getCurrentUserAndRenew()})):null!==sessionStorage.getItem("jwt")?a.renewToken(sessionStorage.getItem("jwt")).then((function(t){return a.saveAuthorization(t),e(t)})).catch((function(e){return a.clearGuestSession(),a.getCurrentUserAndRenew()})):a.getGuestToken().then((function(t){return a.saveAuthorization(t),e(t)})).catch((function(e){return t({username:null,jwt:null})}))}))}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=u(n(4)),i=u(n(5)),a=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;c(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:s({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;(0,i.default)(null==n||1===a.default.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen((function(){e.setState({match:e.computeMatch(r.location.pathname)})}))},t.prototype.componentWillReceiveProps=function(e){(0,o.default)(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.default.Children.only(e):null},t}(a.default.Component);d.propTypes={history:l.default.object.isRequired,children:l.default.node},d.contextTypes={router:l.default.object},d.childContextTypes={router:l.default.object.isRequired},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(19),i=(r=o)&&r.__esModule?r:{default:r};var a={},l=0,u=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=a[n]||(a[n]={});if(r[e])return r[e];var o=[],u={re:(0,i.default)(e,o,t),keys:o};return l<1e4&&(r[e]=u,l++),u};t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,i=r.exact,a=void 0!==i&&i,l=r.strict,s=void 0!==l&&l,c=r.sensitive,f=void 0!==c&&c;if(null==o)return n;var d=u(o,{end:a,strict:s,sensitive:f}),p=d.re,h=d.keys,m=p.exec(e);if(!m)return null;var y=m[0],v=m.slice(1),g=e===y;return a&&!g?null:{path:o,url:"/"===o&&""===y?"/":y,isExact:g,params:h.reduce((function(e,t,n){return e[t.name]=v[n],e}),{})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(8),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(4)),i=s(n(5)),a=s(n(0)),l=s(n(2)),u=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var p=function(e){return 0===a.default.Children.count(e)},h=function(e){function t(){var n,r;f(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:c({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,l=e.exact,s=e.sensitive;if(n)return n;(0,i.default)(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,f=(r||c.location).pathname;return(0,u.default)(f,{path:o,strict:a,exact:l,sensitive:s},c.match)},t.prototype.componentWillMount=function(){(0,o.default)(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),(0,o.default)(!(this.props.component&&this.props.children&&!p(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),(0,o.default)(!(this.props.render&&this.props.children&&!p(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){(0,o.default)(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),(0,o.default)(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,l=i.history,u=i.route,s=i.staticContext,c={match:e,location:this.props.location||u.location,history:l,staticContext:s};return r?e?a.default.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!p(n)?a.default.Children.only(n):null},t}(a.default.Component);h.propTypes={computedMatch:l.default.object,path:l.default.string,exact:l.default.bool,strict:l.default.bool,sensitive:l.default.bool,component:l.default.func,render:l.default.func,children:l.default.oneOfType([l.default.func,l.default.node]),location:l.default.object},h.contextTypes={router:l.default.shape({history:l.default.object.isRequired,route:l.default.object.isRequired,staticContext:l.default.object})},h.childContextTypes={router:l.default.object.isRequired},t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(19),i=(r=o)&&r.__esModule?r:{default:r};var a={},l=0,u=function(e){var t=e,n=a[t]||(a[t]={});if(n[e])return n[e];var r=i.default.compile(e);return l<1e4&&(n[e]=r,l++),r};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("/"===e)return e;var n=u(e);return n(t,{pretty:!0})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.MemoryRouter=void 0;var r=p(n(17)),o=p(n(20)),i=p(n(21)),a=p(n(11)),l=p(n(8)),u=p(n(22)),s=p(n(23)),c=p(n(12)),f=p(n(9)),d=p(n(24));function p(e){return e&&e.__esModule?e:{default:e}}t.MemoryRouter=r.default,t.Prompt=o.default,t.Redirect=i.default,t.Route=a.default,t.Router=l.default,t.StaticRouter=u.default,t.Switch=s.default,t.generatePath=c.default,t.matchPath=f.default,t.withRouter=d.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=(c(n(27)),c(n(68))),s=c(n(69));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isDialogOpen:!1},n.handleButtonFocus=n.handleButtonFocus.bind(n),n.handleButtonSubmit=n.handleButtonSubmit.bind(n),n.openDialog=n.openDialog.bind(n),n.closeDialog=n.closeDialog.bind(n),n.closeDialogOnOutsideClick=n.closeDialogOnOutsideClick.bind(n),n.componentRef=l.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"handleButtonFocus",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".tool-label");return"mouseover"===e.type||"focus"===e.type?(t.classList.remove("hidden"),t.classList.add("visible")):"mouseout"!==e.type&&"blur"!==e.type||(t.classList.remove("visible"),t.classList.add("hidden")),!1}},{key:"handleButtonSubmit",value:function(e){return e.preventDefault(),e.stopPropagation(),!1===this.state.isDialogOpen?this.openDialog(e):this.closeDialog(e),!1}},{key:"openDialog",value:function(e){this.componentRef.current.querySelector(".tool-dialog");this.setState({isDialogOpen:!0}),document.body.addEventListener("click",this.closeDialogOnOutsideClick)}},{key:"closeDialogOnOutsideClick",value:function(e){this.componentRef.current.querySelector(".tool-dialog").contains(e.target)||this.closeDialog()}},{key:"closeDialog",value:function(e){this.componentRef.current.querySelector(".tool-dialog");this.setState({isDialogOpen:!1}),document.body.removeEventListener("click",this.closeDialogOnOutsideClick)}},{key:"render",value:function(){var e=this.props.toolLabel,t=this.props.toolIconClassName,n=this.props.toolDialogComponent;this.props.artist,this.props.artistCollections;return l.default.createElement("div",{ref:this.componentRef,className:"tool-widget"},i(u.default,{toolIconClassName:t,onSubmit:this.handleButtonSubmit,onMouseOver:this.handleButtonFocus,onMouseOut:this.handleButtonFocus,onFocus:this.handleButtonFocus,onBlur:this.handleButtonFocus}),i("div",{className:"tool-label hidden"},void 0,e),i("div",{},void 0,this.state.isDialogOpen?l.default.createElement(s.default,o({},this.props,{toolDialogComponent:n,openDialog:this.openDialog,closeDialog:this.closeDialog})):""))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=u(n(0)),i=u(n(2)),a=u(n(5)),l=n(6);function u(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},p=function(e){function t(){var n,r;c(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!d(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,u="string"==typeof t?(0,l.createLocation)(t,null,null,i.location):t,c=i.createHref(u);return o.default.createElement("a",s({},r,{onClick:this.handleClick,href:c,ref:n}))},t}(o.default.Component);p.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},p.defaultProps={replace:!1},p.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(4)),i=s(n(0)),a=s(n(2)),l=n(6),u=s(n(8));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;c(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.history=(0,l.createMemoryHistory)(r.props),f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(u.default,{history:this.history,children:this.props.children})},t}(i.default.Component);d.propTypes={initialEntries:a.default.array,initialIndex:a.default.number,getUserConfirmation:a.default.func,keyLength:a.default.number,children:a.default.node},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(11),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(50);e.exports=h,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],o=0,a=0,l="",u=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=m&&null!=h&&h!==m,_="+"===b||"*"===b,S="?"===b||"*"===b,k=n[2]||u,E=v||g;r.push({name:y||o++,prefix:m||"",delimiter:k,optional:S,repeat:_,partial:x,asterisk:!!w,pattern:E?c(E):w?".*":"[^"+s(k)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function l(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"===r(e[i])&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",d(t)));return function(t,r){for(var i="",a=t||{},u=(r||{}).pretty?l:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=a[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(o(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function p(e,t,n){o(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)a+=s(u);else{var c=s(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+c+p+")*"),a+=p=u.optional?u.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return r||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":r&&m?"":"(?="+h+"|$)",f(new RegExp("^"+a,d(n)),t)}function h(e,t,n){return o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):o(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",d(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=l(n(0)),i=l(n(2)),a=l(n(5));function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var c=function(e){function t(){return u(this,t),s(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){(0,a.default)(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(o.default.Component);c.propTypes={when:i.default.bool,message:i.default.oneOfType([i.default.func,i.default.string]).isRequired},c.defaultProps={when:!0},c.contextTypes={router:i.default.shape({history:i.default.shape({block:i.default.func.isRequired}).isRequired}).isRequired},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=c(n(0)),i=c(n(2)),a=c(n(4)),l=c(n(5)),u=n(6),s=c(n(12));function c(e){return e&&e.__esModule?e:{default:e}}var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var h=function(e){function t(){return d(this,t),p(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){(0,l.default)(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=(0,u.createLocation)(e.to),n=(0,u.createLocation)(this.props.to);(0,u.locationsAreEqual)(t,n)?(0,a.default)(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?(0,s.default)(n,t.params):f({},n,{pathname:(0,s.default)(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(o.default.Component);h.propTypes={computedMatch:i.default.object,push:i.default.bool,from:i.default.string,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired},h.defaultProps={push:!1},h.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired}).isRequired,staticContext:i.default.object}).isRequired},t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=c(n(4)),i=c(n(5)),a=c(n(0)),l=c(n(2)),u=n(6),s=c(n(8));function c(e){return e&&e.__esModule?e:{default:e}}var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var h=function(e){return"/"===e.charAt(0)?e:"/"+e},m=function(e,t){return e?f({},t,{pathname:h(e)+t.pathname}):t},y=function(e,t){if(!e)return t;var n=h(e);return 0!==t.pathname.indexOf(n)?t:f({},t,{pathname:t.pathname.substr(n.length)})},v=function(e){return"string"==typeof e?e:(0,u.createPath)(e)},g=function(e){return function(){(0,i.default)(!1,"You cannot %s with <StaticRouter>",e)}},b=function(){},w=function(e){function t(){var n,r;d(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return h(r.props.basename+v(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=m(n,(0,u.createLocation)(e)),o.url=v(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=m(n,(0,u.createLocation)(e)),o.url=v(o.location)},r.handleListen=function(){return b},r.handleBlock=function(){return b},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:y(t,(0,u.createLocation)(n)),push:this.handlePush,replace:this.handleReplace,go:g("go"),goBack:g("goBack"),goForward:g("goForward"),listen:this.handleListen,block:this.handleBlock};return a.default.createElement(s.default,f({},r,{history:o}))},t}(a.default.Component);w.propTypes={basename:l.default.string,context:l.default.object.isRequired,location:l.default.oneOfType([l.default.string,l.default.object])},w.defaultProps={basename:"",location:"/"},w.childContextTypes={router:l.default.object.isRequired},t.default=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(0)),i=s(n(2)),a=s(n(4)),l=s(n(5)),u=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){function t(){return c(this,t),f(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,l.default)(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){(0,a.default)(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),(0,a.default)(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.default.Children.forEach(t,(function(t){if(null==r&&o.default.isValidElement(t)){var a=t.props,l=a.path,s=a.exact,c=a.strict,f=a.sensitive,d=a.from,p=l||d;i=t,r=(0,u.default)(n.pathname,{path:p,exact:s,strict:c,sensitive:f},e.match)}})),r?o.default.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.default.Component);d.contextTypes={router:i.default.shape({route:i.default.object.isRequired}).isRequired},d.propTypes={children:i.default.node,location:i.default.object},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),o=l(n(2)),i=l(n(58)),a=l(n(11));function l(e){return e&&e.__esModule?e:{default:e}}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e){var t=function(t){var n=t.wrappedComponentRef,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return r.default.createElement(a.default,{children:function(t){return r.default.createElement(e,u({},o,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:o.default.func},(0,i.default)(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={REGISTRATION_API_URL:"api/public/auth/register",LOGIN_API_URL:"api/public/auth/login",CURRENT_USER_API_URL:"api/secured/currentUser",ARTIST_SEARCH_URL:"api/getArtistSearch",ALBUM_SEARCH_URL:"api/getAlbumSearch",TRACK_SEARCH_URL:"api/getTrackSearch",ARTIST_INFO_URL:"api/getArtistInfo",ALBUM_INFO_URL:"api/getAlbumInfo",TRACK_INFO_URL:"api/getTrackInfo",SIMILAR_ARTISTS_URL:"api/getSimilarArtists",ARTIST_ALBUMS_URL:"api/getArtistAlbums",RENEW_TOKEN_URL:"api/secured/renewToken",CREATE_ARTIST_COLLECTION_URL:"api/secured/createArtistCollection",GET_ARTIST_COLLECTIONS_URL:"api/secured/getArtistCollections",GET_GUEST_TOKEN_URL:"api/public/auth/getGuestToken",ADD_ARTIST_TO_COLLECTION_URL:"api/secured/addArtistToCollection",GET_ARTIST_COLLECTION_URL:"api/secured/getArtistCollection",USER_SEARCH_URL:"api/getUserSearch",ADD_USER_TO_FRIENDS_URL:"api/secured/addUserToFriends",GET_FRIENDS_URL:"api/secured/getFriends",GET_RECOMMENDATIONS_URL:"api/secured/getRecommendations",RECOMMEND_ARTIST_URL:"api/secured/recommendArtist",GET_FRIENDS_ARTIST_WAS_RECOMMENDED_TO_URL:"api/secured/getFriendsArtistWasRecommendedTo",GET_LIKED_ARTISTS_URL:"api/secured/getLikedArtists",ADD_LIKED_ARTIST_URL:"api/secured/addLikedArtist",GET_LIKED_ARTIST_MBID_LIST_URL:"api/secured/getLikedArtistMbidList",REMOVE_LIKED_ARTIST_URL:"api/secured/removeLikedArtist",DELETE_ARTIST_COLLECTION_URL:"api/secured/deleteArtistCollection",REMOVE_ARTIST_FROM_COLLECTION_URL:"api/secured/removeArtistFromCollection"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=d(n(0)),u=d(n(14)),s=d(n(27)),c=d(n(28)),f=d(n(29));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){return console.log("Liked artists in nav: "+this.props.likedArtists),i("nav",{className:"item-tools-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,l.default.createElement(u.default,o({},this.props,{toolLabel:"Add to a collection",toolIconClassName:"fas fa-plus",toolDialogComponent:s.default}))),i("li",{},void 0,l.default.createElement(f.default,o({},this.props,{bob:this.props.likedArtists}))),i("li",{},void 0,l.default.createElement(u.default,o({},this.props,{toolLabel:"Recommend to a friend",toolIconClassName:"fas fa-user",toolDialogComponent:c.default})))))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-plus"})),c=o("option",{value:"",selected:!0,disabled:!0,hidden:!0},void 0," select existing "),f=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-plus"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={newCollectionName:"",existingCollectionName:"",serverMessage:""},n.handleExistingCollectionChange=n.handleExistingCollectionChange.bind(n),n.handleExistingCollectionSubmit=n.handleExistingCollectionSubmit.bind(n),n.handleNewCollectionChange=n.handleNewCollectionChange.bind(n),n.handleNewCollectionSubmit=n.handleNewCollectionSubmit.bind(n),n.setNewCollectionSuccess=n.setNewCollectionSuccess.bind(n),n.setExistingCollectionSuccess=n.setExistingCollectionSuccess.bind(n),n.createCollection=n.createCollection.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleNewCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector("form[name='new-collection-form']");this.setState({newCollectionName:t.elements["new-collection-name"].value})}},{key:"handleNewCollectionSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),this.createCollection(this.state.newCollectionName).then((function(){l.default.addArtistToCollection(t.props.artist,t.state.newCollectionName).then((function(){t.setNewCollectionSuccess()}))}))}},{key:"createCollection",value:function(e){var t=this;return new Promise((function(n,r){l.default.createArtistCollection(e).then((function(e){t.setState({serverMessage:""}),e.json().then((function(e){return t.props.setArtistCollections(e),n(e)}))})).catch((function(e){return 409===e.status?(t.setState({serverMessage:"Collection with this name already exists"}),r(e)):(t.setState({serverMessage:""}),r(e))}))}))}},{key:"handleExistingCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector("form[name='existing-collection-form']");this.setState({existingCollectionName:t.elements["existing-collection-name"].value})}},{key:"handleExistingCollectionSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),l.default.addArtistToCollection(this.props.artist,this.state.existingCollectionName).then((function(){t.setExistingCollectionSuccess()})).catch((function(e){409===e.status?t.setState({serverMessage:"Artist is already in collection"}):e.text().then((function(e){t.setState({serverMessage:e})}))}))}},{key:"setNewCollectionSuccess",value:function(){var e=this.componentRef.current.querySelector("form[name='new-collection-form'").querySelector(".submit"),t=e.querySelector("i");t.classList.replace("fa-plus","fa-check"),t.classList.add("white"),e.classList.add("green-background"),e.setAttribute("disabled","true"),this.setState({serverMessage:""})}},{key:"setExistingCollectionSuccess",value:function(){var e=this.componentRef.current.querySelector("form[name='existing-collection-form'").querySelector(".submit"),t=e.querySelector("i");t.classList.replace("fa-plus","fa-check"),t.classList.add("white"),e.classList.add("green-background"),e.setAttribute("disabled","true"),this.setState({serverMessage:""})}},{key:"componentDidMount",value:function(){this.props.getArtistCollections()}},{key:"render",value:function(){this.state.artist;var e=this.props.artistCollections;return a.default.createElement("div",{ref:this.componentRef,className:"add-artist-to-collection-dialog"},o("form",{name:"new-collection-form",className:"new-collection-form",onSubmit:this.handleNewCollectionSubmit},void 0,o("fieldset",{},void 0,o("input",{type:"text",name:"new-collection-name",className:"new-collection-name",placeholder:"create new",onChange:this.handleNewCollectionChange}),s)),o("form",{name:"existing-collection-form",className:"existing-collection-form",onSubmit:this.handleExistingCollectionSubmit},void 0,o("fieldset",{},void 0,o("select",{name:"existing-collection-name",onChange:this.handleExistingCollectionChange},void 0,c,e.map((function(e){return o("option",{value:e.collectionName},void 0,e.collectionName)}))),f)),o("div",{className:"server-response-message"},void 0,this.state.serverMessage))}}]),t}(a.default.Component);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("option",{value:"",selected:!0,disabled:!0,hidden:!0},void 0," select friend "),c=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-paper-plane"})),f=o("button",{type:"submit",className:"submit white green-background",disabled:!0},void 0,o("i",{className:"fas fa-check"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverResponse:"",selectedFriend:"",friendsArtistWasRecommendedTo:[]},n.handleChange=n.handleChange.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.getFriendsArtistWasRecommendedTo=n.getFriendsArtistWasRecommendedTo.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".recommend-artist-to-friend-form");this.setState({selectedFriend:t.elements["friend-username-select"].value})}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=this.props.artist,r=this.state.selectedFriend;l.default.recommendArtist(n,r).then((function(e){t.setState({friendsArtistWasRecommendedTo:e,serverResponse:""})})).catch((function(e){e.text().then((function(e){t.setState({serverResponse:e})}))}))}},{key:"getFriendsArtistWasRecommendedTo",value:function(e){var t=this;l.default.getFriendsArtistWasRecommendedTo(e).then((function(e){t.setState({friendsArtistWasRecommendedTo:e})})).catch((function(e){}))}},{key:"componentDidMount",value:function(){this.props.getFriends(),this.getFriendsArtistWasRecommendedTo(this.props.artist)}},{key:"render",value:function(){var e=this,t=(this.props.artist,this.props.friends);this.state.friendsArtistWasRecommendedTo;return a.default.createElement("div",{ref:this.componentRef,className:"recommend-artist-to-friend-dialog"},o("form",{name:"recommend-artist-to-friend-form",className:"recommend-artist-to-friend-form",onSubmit:this.handleSubmit},void 0,o("fieldset",{},void 0,o("select",{name:"friend-username-select",onChange:this.handleChange},void 0,s,t.map((function(t){return!1===e.state.friendsArtistWasRecommendedTo.includes(t.username)?o("option",{value:t.username},void 0,t.username):o("option",{value:"",disabled:!0},void 0,"✔ ",t.username)}))),this.state.friendsArtistWasRecommendedTo.includes(this.state.selectedFriend)?f:c)),o("div",{className:"server-response-message"},void 0,this.state.serverMessage))}}]),t}(a.default.Component);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("i",{className:"fas fa-heart red"}),c=o("i",{className:"fas fa-heart"}),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.isButtonActive=n.isButtonActive.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.handleButtonFocus=n.handleButtonFocus.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),!1===this.isButtonActive()?l.default.addLikedArtist(this.props.artist).then((function(e){t.props.setLikedArtists(e)})).catch((function(e){})):l.default.removeLikedArtist(this.props.artist).then((function(e){t.props.setLikedArtists(e)})).catch((function(e){}))}},{key:"handleButtonFocus",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".tool-label");return"mouseover"===e.type||"focus"===e.type?(t.classList.remove("hidden"),t.classList.add("visible")):"mouseout"!==e.type&&"blur"!==e.type||(t.classList.remove("visible"),t.classList.add("hidden")),!1}},{key:"isButtonActive",value:function(){var e=this.props.artist,t=this.props.likedArtists.map((function(e){return e.artistMbid})),n=this.props.likedArtists.map((function(e){return e.artistName}));if(null!==e.mbid&&void 0!==e.mbid&&""!==e.mbid){if(!0===t.includes(e.mbid))return!0}else if(!0===n.includes(e.artistName))return!0;return!1}},{key:"render",value:function(){var e=this.isButtonActive();return a.default.createElement("div",{className:"tool-widget like-button",ref:this.componentRef},o("form",{name:"like-button-form",className:"tool-button-form like-button-form",onSubmit:this.handleSubmit},void 0,o("button",{type:"submit",className:"submit",onMouseOver:this.handleButtonFocus,onMouseOut:this.handleButtonFocus,onFocus:this.handleButtonFocus,onBlur:this.handleButtonFocus},void 0,!0===e?s:c)),o("div",{className:"tool-label hidden"},void 0,!0===e?"Unlike":"Like"))}}]),t}(a.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-user-plus"})),c=o("button",{type:"submit",disabled:"true",className:"submit white green-background"},void 0,o("i",{className:"fas fa-user-check"})),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.user=n.props.user,n.state={serverResponse:""},n.handleAddUserToFriendsFormSubmit=n.handleAddUserToFriendsFormSubmit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleAddUserToFriendsFormSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),l.default.addUserToFriends(this.user.username).then((function(e){t.props.setFriends(e),t.setState({serverResponse:""})})).catch((function(e){e.text().then((function(e){t.setState({serverResponse:e})}))}))}},{key:"render",value:function(){return o("div",{className:"user-tile"},void 0,o("div",{className:"user-info"},void 0,o("div",{className:"username"},void 0,this.user.username),o("form",{name:"add-user-to-friends-form",className:"add-user-to-friends-form",onSubmit:this.handleAddUserToFriendsFormSubmit},void 0,!1===this.props.isFriend?s:c)),o("div",{className:"server-response-message"},void 0,this.state.serverResponse))}}]),t}(a.default.Component);t.default=f},function(e,t,n){"use strict";var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=l(n(32)),a=l(n(37));l(n(97));function l(e){return e&&e.__esModule?e:{default:e}}i.default.render(o(a.default,{}),document.getElementById("root"))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(33)},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(0),i=n(15),a=n(35);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(l(227));function u(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var s=!1,c=null,f=!1,d=null,p={onError:function(e){s=!0,c=e}};function h(e,t,n,r,o,i,a,l,f){s=!1,c=null,u.apply(p,arguments)}var m=null,y=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,a,u,p){if(h.apply(this,arguments),s){if(!s)throw Error(l(198));var m=c;s=!1,c=null,f||(f=!0,d=m)}}(r,t,void 0,e),e.currentTarget=null}var b=null,w={};function x(){if(b)for(var e in w){var t=w[e],n=b.indexOf(e);if(!(-1<n))throw Error(l(96,e));if(!S[n]){if(!t.extractEvents)throw Error(l(97,e));for(var r in S[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;if(k.hasOwnProperty(u))throw Error(l(99,u));k[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&_(s[o],a,u);o=!0}else i.registrationName?(_(i.registrationName,a,u),o=!0):o=!1;if(!o)throw Error(l(98,r,e))}}}}function _(e,t,n){if(E[e])throw Error(l(100,e));E[e]=t,C[e]=t.eventTypes[n].dependencies}var S=[],k={},E={},C={};function O(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!w.hasOwnProperty(t)||w[t]!==r){if(w[t])throw Error(l(102,t));w[t]=r,n=!0}}n&&x()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,j=null,A=null;function R(e){if(e=y(e)){if("function"!=typeof P)throw Error(l(280));var t=e.stateNode;t&&(t=m(t),P(e.stateNode,e.type,t))}}function N(e){j?A?A.push(e):A=[e]:j=e}function F(){if(j){var e=j,t=A;if(A=j=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function M(e,t){return e(t)}function L(e,t,n,r,o){return e(t,n,r,o)}function D(){}var I=M,B=!1,U=!1;function z(){null===j&&null===A||(D(),F())}function $(e,t,n){if(U)return e(t,n);U=!0;try{return I(e,t,n)}finally{U=!1,z()}}var q=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,H=Object.prototype.hasOwnProperty,V={},W={};function G(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(void 0===t?"undefined":r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new Q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new Q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new Q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new Q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new Q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new Q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new Q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new Q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new Q(e,5,!1,e.toLowerCase(),null,!1)}));var Y=/[\-:]([a-z])/g;function X(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Y,X);K[t]=new Q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Y,X);K[t]=new Q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Y,X);K[t]=new Q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new Q(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new Q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new Q(e,1,!1,e.toLowerCase(),null,!0)}));var J=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Z(e,t,n,r){var o=K.hasOwnProperty(t)?K[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(G(t,n,o,r)&&(n=null),r||null===o?function(e){return!!H.call(W,e)||!H.call(V,e)&&(q.test(e)?W[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}J.hasOwnProperty("ReactCurrentDispatcher")||(J.ReactCurrentDispatcher={current:null}),J.hasOwnProperty("ReactCurrentBatchConfig")||(J.ReactCurrentBatchConfig={suspense:null});var ee=/^(.*)[\\\/]/,te="function"==typeof Symbol&&Symbol.for,ne=te?Symbol.for("react.element"):60103,re=te?Symbol.for("react.portal"):60106,oe=te?Symbol.for("react.fragment"):60107,ie=te?Symbol.for("react.strict_mode"):60108,ae=te?Symbol.for("react.profiler"):60114,le=te?Symbol.for("react.provider"):60109,ue=te?Symbol.for("react.context"):60110,se=te?Symbol.for("react.concurrent_mode"):60111,ce=te?Symbol.for("react.forward_ref"):60112,fe=te?Symbol.for("react.suspense"):60113,de=te?Symbol.for("react.suspense_list"):60120,pe=te?Symbol.for("react.memo"):60115,he=te?Symbol.for("react.lazy"):60116,me=te?Symbol.for("react.block"):60121,ye="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!==(void 0===e?"undefined":r(e))?null:"function"==typeof(e=ye&&e[ye]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case oe:return"Fragment";case re:return"Portal";case ae:return"Profiler";case ie:return"StrictMode";case fe:return"Suspense";case de:return"SuspenseList"}if("object"===(void 0===e?"undefined":r(e)))switch(e.$$typeof){case ue:return"Context.Consumer";case le:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case pe:return ge(e.type);case me:return ge(e.render);case he:if(e=1===e._status?e._result:null)return ge(e)}return null}function be(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ge(e.type);n=null,r&&(n=ge(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(ee,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function we(e){switch(void 0===e?"undefined":r(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function xe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=xe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Se(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=xe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=we(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&Z(e,"checked",t,!1)}function Oe(e,t){Ce(e,t);var n=we(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function je(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+we(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:we(n)}}function Fe(e,t){var n=we(t.value),r=we(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Le="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ue,ze=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((Ue=Ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function $e(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function qe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:qe("Animation","AnimationEnd"),animationiteration:qe("Animation","AnimationIteration"),animationstart:qe("Animation","AnimationStart"),transitionend:qe("Transition","TransitionEnd")},Ve={},We={};function Ge(e){if(Ve[e])return Ve[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in We)return Ve[e]=n[t];return e}T&&(We=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Qe=Ge("animationend"),Ke=Ge("animationiteration"),Ye=Ge("animationstart"),Xe=Ge("transitionend"),Je="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ze=new("function"==typeof WeakMap?WeakMap:Map);function et(e){var t=Ze.get(e);return void 0===t&&(t=new Map,Ze.set(e,t)),t}function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(l(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return rt(o),e;if(i===r)return rt(o),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}if(!a)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function it(e,t){if(null==t)throw Error(l(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var lt=null;function ut(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(lt=it(lt,e)),e=lt,lt=null,e){if(at(e,ut),lt)throw Error(l(95));if(f)throw e=d,f=!1,d=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ft(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function pt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ht(e,t,n,r){if(dt.length){var o=dt.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function mt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ct(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<S.length;u++){var s=S[u];s&&(s=s.extractEvents(r,t,i,o,a))&&(l=it(l,s))}st(l)}}function yt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Yt(t,"scroll",!0);break;case"focus":case"blur":Yt(t,"focus",!0),Yt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ft(e)&&Yt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Je.indexOf(e)&&Kt(e,t)}n.set(e,null)}}var vt,gt,bt,wt=!1,xt=[],_t=null,St=null,kt=null,Et=new Map,Ct=new Map,Ot=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function jt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function At(e,t){switch(e){case"focus":case"blur":_t=null;break;case"dragenter":case"dragleave":St=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ct.delete(t.pointerId)}}function Rt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=jt(t,n,r,o,i),null!==t&&(null!==(t=jn(t))&&gt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Pn(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){bt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;var t=en(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=jn(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){Ft(e)&&n.delete(t)}function Lt(){for(wt=!1;0<xt.length;){var e=xt[0];if(null!==e.blockedOn){null!==(e=jn(e.blockedOn))&&vt(e);break}var t=en(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:xt.shift()}null!==_t&&Ft(_t)&&(_t=null),null!==St&&Ft(St)&&(St=null),null!==kt&&Ft(kt)&&(kt=null),Et.forEach(Mt),Ct.forEach(Mt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,wt||(wt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Lt)))}function It(e){function t(t){return Dt(t,e)}if(0<xt.length){Dt(xt[0],e);for(var n=1;n<xt.length;n++){var r=xt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Dt(_t,e),null!==St&&Dt(St,e),null!==kt&&Dt(kt,e),Et.forEach(t),Ct.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ot.shift()}var Bt={},Ut=new Map,zt=new Map,$t=["abort","abort",Qe,"animationEnd",Ke,"animationIteration",Ye,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Xe,"transitionEnd","waiting","waiting"];function qt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},zt.set(r,t),Ut.set(r,i),Bt[o]=i}}qt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),qt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),qt($t,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Ht.length;Vt++)zt.set(Ht[Vt],0);var Wt=a.unstable_UserBlockingPriority,Gt=a.unstable_runWithPriority,Qt=!0;function Kt(e,t){Yt(t,e,!1)}function Yt(e,t,n){var r=zt.get(t);switch(void 0===r?2:r){case 0:r=Xt.bind(null,t,1,e);break;case 1:r=Jt.bind(null,t,1,e);break;default:r=Zt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Xt(e,t,n,r){B||D();var o=Zt,i=B;B=!0;try{L(o,e,t,n,r)}finally{(B=i)||z()}}function Jt(e,t,n,r){Gt(Wt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){if(Qt)if(0<xt.length&&-1<Tt.indexOf(e))e=jt(null,e,t,n,r),xt.push(e);else{var o=en(e,t,n,r);if(null===o)At(e,r);else if(-1<Tt.indexOf(e))e=jt(o,e,t,n,r),xt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return _t=Rt(_t,e,t,n,r,o),!0;case"dragenter":return St=Rt(St,e,t,n,r,o),!0;case"mouseover":return kt=Rt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Et.set(i,Rt(Et.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Ct.set(i,Rt(Ct.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){At(e,r),e=ht(e,r,null,t);try{$(mt,e)}finally{pt(e)}}}}function en(e,t,n,r){if(null!==(n=Pn(n=ct(r)))){var o=tt(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=nt(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ht(e,r,n,t);try{$(mt,e)}finally{pt(e)}return null}var tn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},nn=["Webkit","ms","Moz","O"];function rn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||tn.hasOwnProperty(e)&&tn[e]?(""+t).trim():t+"px"}function on(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=rn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(tn).forEach((function(e){nn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),tn[t]=tn[e]}))}));var an=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ln(e,t){if(t){if(an[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!==r(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!==r(t.style))throw Error(l(62,""))}}function un(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=Le;function cn(e,t){var n=et(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)yt(t[r],e,n)}function fn(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function pn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hn(e,t){var n,r=pn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pn(r)}}function mn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn=null,gn=null;function bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function wn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var xn="function"==typeof setTimeout?setTimeout:void 0,_n="function"==typeof clearTimeout?clearTimeout:void 0;function Sn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Cn="__reactInternalInstance$"+En,On="__reactEventHandlers$"+En,Tn="__reactContainere$"+En;function Pn(e){var t=e[Cn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[Cn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Cn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function jn(e){return!(e=e[Cn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function An(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function Rn(e){return e[On]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Fn(e,t){var n=e.stateNode;if(!n)return null;var o=m(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,void 0===n?"undefined":r(n)));return n}function Mn(e,t,n){(t=Fn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=it(n._dispatchListeners,t),n._dispatchInstances=it(n._dispatchInstances,e))}function Ln(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)Mn(n[t],"captured",e);for(t=0;t<n.length;t++)Mn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Fn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=it(n._dispatchListeners,t),n._dispatchInstances=it(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Bn(e){at(e,Ln)}var Un=null,zn=null,$n=null;function qn(){if($n)return $n;var e,t,n=zn,r=n.length,o="value"in Un?Un.value:Un.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return $n=o.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Vn(){return!1}function Wn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Vn,this.isPropagationStopped=Vn,this}function Gn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(l(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Kn(e){e.eventPool=[],e.getPooled=Gn,e.release=Qn}i(Wn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Wn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Wn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Kn(n),n},Kn(Wn);var Yn=Wn.extend({data:null}),Xn=Wn.extend({data:null}),Jn=[9,13,27,32],Zn=T&&"CompositionEvent"in window,er=null;T&&"documentMode"in document&&(er=document.documentMode);var tr=T&&"TextEvent"in window&&!er,nr=T&&(!Zn||er&&8<er&&11>=er),rr=String.fromCharCode(32),or={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},ir=!1;function ar(e,t){switch(e){case"keyup":return-1!==Jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function lr(e){return"object"===(void 0===(e=e.detail)?"undefined":r(e))&&"data"in e?e.data:null}var ur=!1;var sr={eventTypes:or,extractEvents:function(e,t,n,r){var o;if(Zn)e:{switch(e){case"compositionstart":var i=or.compositionStart;break e;case"compositionend":i=or.compositionEnd;break e;case"compositionupdate":i=or.compositionUpdate;break e}i=void 0}else ur?ar(e,n)&&(i=or.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=or.compositionStart);return i?(nr&&"ko"!==n.locale&&(ur||i!==or.compositionStart?i===or.compositionEnd&&ur&&(o=qn()):(zn="value"in(Un=r)?Un.value:Un.textContent,ur=!0)),i=Yn.getPooled(i,t,n,r),o?i.data=o:null!==(o=lr(n))&&(i.data=o),Bn(i),o=i):o=null,(e=tr?function(e,t){switch(e){case"compositionend":return lr(t);case"keypress":return 32!==t.which?null:(ir=!0,rr);case"textInput":return(e=t.data)===rr&&ir?null:e;default:return null}}(e,n):function(e,t){if(ur)return"compositionend"===e||!Zn&&ar(e,t)?(e=qn(),$n=zn=Un=null,ur=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return nr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Xn.getPooled(or.beforeInput,t,n,r)).data=e,Bn(t)):t=null,null===o?t:null===t?o:[o,t]}},cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cr[e.type]:"textarea"===t}var dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function pr(e,t,n){return(e=Wn.getPooled(dr.change,e,t,n)).type="change",N(n),Bn(e),e}var hr=null,mr=null;function yr(e){st(e)}function vr(e){if(Se(An(e)))return e}function gr(e,t){if("change"===e)return t}var br=!1;function wr(){hr&&(hr.detachEvent("onpropertychange",xr),mr=hr=null)}function xr(e){if("value"===e.propertyName&&vr(mr))if(e=pr(mr,e,ct(e)),B)st(e);else{B=!0;try{M(yr,e)}finally{B=!1,z()}}}function _r(e,t,n){"focus"===e?(wr(),mr=n,(hr=t).attachEvent("onpropertychange",xr)):"blur"===e&&wr()}function Sr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(mr)}function kr(e,t){if("click"===e)return vr(t)}function Er(e,t){if("input"===e||"change"===e)return vr(t)}T&&(br=ft("input")&&(!document.documentMode||9<document.documentMode));var Cr={eventTypes:dr,_isInputEventSupported:br,extractEvents:function(e,t,n,r){var o=t?An(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=gr;else if(fr(o))if(br)a=Er;else{a=Sr;var l=_r}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return pr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Or=Wn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function jr(){return Pr}var Ar=0,Rr=0,Nr=!1,Fr=!1,Mr=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:jr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ar;return Ar=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Rr;return Rr=e.screenY,Fr?"mousemove"===e.type?e.screenY-t:0:(Fr=!0,0)}}),Lr=Mr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Dr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==tt(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Mr,u=Dr.mouseLeave,s=Dr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Lr,u=Dr.pointerLeave,s=Dr.pointerEnter,c="pointer");if(e=null==a?i:An(a),i=null==t?i:An(t),(u=l.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=l=r;e;e=Nn(e))a++;for(e=0,t=s;t;t=Nn(t))e++;for(;0<a-e;)l=Nn(l),a--;for(;0<e-a;)s=Nn(s),e--;for(;a--;){if(l===s||l===s.alternate)break e;l=Nn(l),s=Nn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)l.push(r),r=Nn(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=Nn(c);for(c=0;c<l.length;c++)Dn(l[c],"bubbled",u);for(c=r.length;0<c--;)Dn(r[c],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Br="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ur=Object.prototype.hasOwnProperty;function zr(e,t){if(Br(e,t))return!0;if("object"!==(void 0===e?"undefined":r(e))||null===e||"object"!==(void 0===t?"undefined":r(t))||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!Ur.call(t,n[o])||!Br(e[n[o]],t[n[o]]))return!1;return!0}var $r=T&&"documentMode"in document&&11>=document.documentMode,qr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Vr=null,Wr=null,Gr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Gr||null==Hr||Hr!==dn(n)?null:("selectionStart"in(n=Hr)&&yn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wr&&zr(Wr,n)?null:(Wr=n,(e=Wn.getPooled(qr.select,Vr,e,t)).type="select",e.target=Hr,Bn(e),e))}var Kr={eventTypes:qr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=et(o),i=C.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?An(t):window,e){case"focus":(fr(o)||"true"===o.contentEditable)&&(Hr=o,Vr=t,Wr=null);break;case"blur":Wr=Vr=Hr=null;break;case"mousedown":Gr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Gr=!1,Qr(n,r);case"selectionchange":if($r)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Yr=Wn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=Wn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jr=Or.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var eo={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},to={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},no=Or.extend({key:function(e){if(e.key){var t=eo[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?to[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:jr,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ro=Mr.extend({dataTransfer:null}),oo=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:jr}),io=Wn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ao=Mr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),lo={eventTypes:Bt,extractEvents:function(e,t,n,r){var o=Ut.get(e);if(!o)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=no;break;case"blur":case"focus":e=Jr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Mr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ro;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=oo;break;case Qe:case Ke:case Ye:e=Yr;break;case Xe:e=io;break;case"scroll":e=Or;break;case"wheel":e=ao;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Lr;break;default:e=Wn}return Bn(t=e.getPooled(o,t,n,r)),t}};if(b)throw Error(l(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),m=Rn,y=jn,v=An,O({SimpleEventPlugin:lo,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Cr,SelectEventPlugin:Kr,BeforeInputEventPlugin:sr});var uo=[],so=-1;function co(e){0>so||(e.current=uo[so],uo[so]=null,so--)}function fo(e,t){so++,uo[so]=e.current,e.current=t}var po={},ho={current:po},mo={current:!1},yo=po;function vo(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return null!=(e=e.childContextTypes)}function bo(){co(mo),co(ho)}function wo(e,t,n){if(ho.current!==po)throw Error(l(168));fo(ho,t),fo(mo,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(l(108,ge(t)||"Unknown",o));return i({},n,{},r)}function _o(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,yo=ho.current,fo(ho,e),fo(mo,mo.current),!0}function So(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=xo(e,t,yo),r.__reactInternalMemoizedMergedChildContext=e,co(mo),co(ho),fo(ho,e)):co(mo),fo(mo,n)}var ko=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,Co=a.unstable_cancelCallback,Oo=a.unstable_requestPaint,To=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,jo=a.unstable_ImmediatePriority,Ao=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,No=a.unstable_LowPriority,Fo=a.unstable_IdlePriority,Mo={},Lo=a.unstable_shouldYield,Do=void 0!==Oo?Oo:function(){},Io=null,Bo=null,Uo=!1,zo=To(),$o=1e4>zo?To:function(){return To()-zo};function qo(){switch(Po()){case jo:return 99;case Ao:return 98;case Ro:return 97;case No:return 96;case Fo:return 95;default:throw Error(l(332))}}function Ho(e){switch(e){case 99:return jo;case 98:return Ao;case 97:return Ro;case 96:return No;case 95:return Fo;default:throw Error(l(332))}}function Vo(e,t){return e=Ho(e),ko(e,t)}function Wo(e,t,n){return e=Ho(e),Eo(e,t,n)}function Go(e){return null===Io?(Io=[e],Bo=Eo(jo,Ko)):Io.push(e),Mo}function Qo(){if(null!==Bo){var e=Bo;Bo=null,Co(e)}Ko()}function Ko(){if(!Uo&&null!==Io){Uo=!0;var e=0;try{var t=Io;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),Eo(jo,Qo),t}finally{Uo=!1}}}function Yo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Xo(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Jo={current:null},Zo=null,ei=null,ti=null;function ni(){ti=ei=Zo=null}function ri(e){var t=Jo.current;co(Jo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ii(e,t){Zo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ra=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Zo)throw Error(l(308));ei=t,Zo.dependencies={expirationTime:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var li=!1;function ui(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function si(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ci(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.alternate;null!==n&&si(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function pi(e,t,n,r){var o=e.updateQueue;li=!1;var a=o.baseQueue,l=o.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,o.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var s=o.baseState,c=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=s):p=p.next=m,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),lu(l,h.suspenseConfig);e:{var y=e,v=h;switch(l=t,m=n,v.tag){case 1:if("function"==typeof(y=v.payload)){s=y.call(m,s,l);break e}s=y;break e;case 3:y.effectTag=-4097&y.effectTag|64;case 0:if(null==(l="function"==typeof(y=v.payload)?y.call(m,s,l):y))break e;s=i({},s,l);break e;case 2:li=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=o.effects)?o.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=o.shared.pending))break;h=a.next=l.next,l.next=u,o.baseQueue=a=l,o.shared.pending=null}}null===p?f=s:p.next=d,o.baseState=f,o.baseQueue=p,uu(c),e.expirationTime=c,e.memoizedState=s}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(l(191,r));r.call(o)}}}var mi=J.ReactCurrentBatchConfig,yi=(new o.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),o=mi.suspense;(o=ci(r=Kl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),fi(e,o),Yl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ql(),o=mi.suspense;(o=ci(r=Kl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),fi(e,o),Yl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ql(),r=mi.suspense;(r=ci(n=Kl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),fi(e,r),Yl(e,n)}};function bi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!zr(n,r)||!zr(o,i))}function wi(e,t,n){var o=!1,i=po,a=t.contextType;return"object"===(void 0===a?"undefined":r(a))&&null!==a?a=ai(a):(i=go(t)?yo:ho.current,a=(o=null!=(o=t.contextTypes))?vo(e,i):po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternalFiber=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function xi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function _i(e,t,n,o){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=yi,ui(e);var a=t.contextType;"object"===(void 0===a?"undefined":r(a))&&null!==a?i.context=ai(a):(a=go(t)?yo:ho.current,i.context=vo(e,a)),pi(e,n,i,o),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(vi(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&gi.enqueueReplaceState(i,i.state,null),pi(e,n,i,o),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Si=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==(void 0===e?"undefined":r(e))){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var o=n.stateNode}if(!o)throw Error(l(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs;t===yi&&(t=o.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(l(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ci(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Au(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ru(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=ju(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Au(""+t,e.mode,n)).return=e,t;if("object"===(void 0===t?"undefined":r(t))&&null!==t){switch(t.$$typeof){case ne:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case re:return(t=Ru(t,e.mode,n)).return=e,t}if(Si(t)||ve(t))return(t=ju(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,o);if("object"===(void 0===n?"undefined":r(n))&&null!==n){switch(n.$$typeof){case ne:return n.key===i?n.type===oe?d(e,t,n.props.children,o,i):c(e,t,n,o):null;case re:return n.key===i?f(e,t,n,o):null}if(Si(n)||ve(n))return null!==i?null:d(e,t,n,o,null);Ei(e,n)}return null}function m(e,t,n,o,i){if("string"==typeof o||"number"==typeof o)return s(t,e=e.get(n)||null,""+o,i);if("object"===(void 0===o?"undefined":r(o))&&null!==o){switch(o.$$typeof){case ne:return e=e.get(null===o.key?n:o.key)||null,o.type===oe?d(t,e,o.props.children,i,o.key):c(t,e,o,i);case re:return f(t,e=e.get(null===o.key?n:o.key)||null,o,i)}if(Si(o)||ve(o))return d(t,e=e.get(n)||null,o,i,null);Ei(t,o)}return null}function y(r,i,l,u){for(var s=null,c=null,f=i,d=i=0,y=null;null!==f&&d<l.length;d++){f.index>d?(y=f,f=null):y=f.sibling;var v=h(r,f,l[d],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(r,f),i=a(v,i,d),null===c?s=v:c.sibling=v,c=v,f=y}if(d===l.length)return n(r,f),s;if(null===f){for(;d<l.length;d++)null!==(f=p(r,l[d],u))&&(i=a(f,i,d),null===c?s=f:c.sibling=f,c=f);return s}for(f=o(r,f);d<l.length;d++)null!==(y=m(f,r,d,l[d],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?d:y.key),i=a(y,i,d),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(r,e)})),s}function v(r,i,u,s){var c=ve(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,d=i,y=i=0,v=null,g=u.next();null!==d&&!g.done;y++,g=u.next()){d.index>y?(v=d,d=null):v=d.sibling;var b=h(r,d,g.value,s);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(r,d),i=a(b,i,y),null===f?c=b:f.sibling=b,f=b,d=v}if(g.done)return n(r,d),c;if(null===d){for(;!g.done;y++,g=u.next())null!==(g=p(r,g.value,s))&&(i=a(g,i,y),null===f?c=g:f.sibling=g,f=g);return c}for(d=o(r,d);!g.done;y++,g=u.next())null!==(g=m(d,r,y,g.value,s))&&(e&&null!==g.alternate&&d.delete(null===g.key?y:g.key),i=a(g,i,y),null===f?c=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return t(r,e)})),c}return function(e,o,a,s){var c="object"===(void 0===a?"undefined":r(a))&&null!==a&&a.type===oe&&null===a.key;c&&(a=a.props.children);var f="object"===(void 0===a?"undefined":r(a))&&null!==a;if(f)switch(a.$$typeof){case ne:e:{for(f=a.key,c=o;null!==c;){if(c.key===f){switch(c.tag){case 7:if(a.type===oe){n(e,c.sibling),(o=i(c,a.props.children)).return=e,e=o;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(o=i(c,a.props)).ref=ki(e,c,a),o.return=e,e=o;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===oe?((o=ju(a.props.children,e.mode,s,a.key)).return=e,e=o):((s=Pu(a.type,a.key,a.props,null,e.mode,s)).ref=ki(e,o,a),s.return=e,e=s)}return u(e);case re:e:{for(c=a.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),(o=i(o,a.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Ru(a,e.mode,s)).return=e,e=o}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),(o=i(o,a)).return=e,e=o):(n(e,o),(o=Au(a,e.mode,s)).return=e,e=o),u(e);if(Si(a))return y(e,o,a,s);if(ve(a))return v(e,o,a,s);if(f&&Ei(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(l(152,e.displayName||e.name||"Component"))}return n(e,o)}}var Oi=Ci(!0),Ti=Ci(!1),Pi={},ji={current:Pi},Ai={current:Pi},Ri={current:Pi};function Ni(e){if(e===Pi)throw Error(l(174));return e}function Fi(e,t){switch(fo(Ri,t),fo(Ai,e),fo(ji,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(ji),fo(ji,t)}function Mi(){co(ji),co(Ai),co(Ri)}function Li(e){Ni(Ri.current);var t=Ni(ji.current),n=Be(t,e.type);t!==n&&(fo(Ai,e),fo(ji,n))}function Di(e){Ai.current===e&&(co(ji),co(Ai))}var Ii={current:0};function Bi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ui(e,t){return{responder:e,props:t}}var zi=J.ReactCurrentDispatcher,$i=J.ReactCurrentBatchConfig,qi=0,Hi=null,Vi=null,Wi=null,Gi=!1;function Qi(){throw Error(l(321))}function Ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Br(e[n],t[n]))return!1;return!0}function Yi(e,t,n,r,o,i){if(qi=i,Hi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,zi.current=null===e||null===e.memoizedState?ba:wa,e=n(r,o),t.expirationTime===qi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(l(301));i+=1,Wi=Vi=null,t.updateQueue=null,zi.current=xa,e=n(r,o)}while(t.expirationTime===qi)}if(zi.current=ga,t=null!==Vi&&null!==Vi.next,qi=0,Wi=Vi=Hi=null,Gi=!1,t)throw Error(l(300));return e}function Xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Wi?Hi.memoizedState=Wi=e:Wi=Wi.next=e,Wi}function Ji(){if(null===Vi){var e=Hi.alternate;e=null!==e?e.memoizedState:null}else e=Vi.next;var t=null===Wi?Hi.memoizedState:Wi.next;if(null!==t)Wi=t,Vi=e;else{if(null===e)throw Error(l(310));e={memoizedState:(Vi=e).memoizedState,baseState:Vi.baseState,baseQueue:Vi.baseQueue,queue:Vi.queue,next:null},null===Wi?Hi.memoizedState=Wi=e:Wi=Wi.next=e}return Wi}function Zi(e,t){return"function"==typeof t?t(e):t}function ea(e){var t=Ji(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=Vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=a=i=null,s=o;do{var c=s.expirationTime;if(c<qi){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(a=u=f,i=r):u=u.next=f,c>Hi.expirationTime&&(Hi.expirationTime=c,uu(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),lu(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=a,Br(r,t.memoizedState)||(Ra=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ta(e){var t=Ji(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var a=o=o.next;do{i=e(i,a.action),a=a.next}while(a!==o);Br(i,t.memoizedState)||(Ra=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function na(e){var t=Xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zi,lastRenderedState:e}).dispatch=va.bind(null,Hi,e),[t.memoizedState,e]}function ra(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Hi.updateQueue)?(t={lastEffect:null},Hi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function oa(){return Ji().memoizedState}function ia(e,t,n,r){var o=Xi();Hi.effectTag|=e,o.memoizedState=ra(1|t,n,void 0,void 0===r?null:r)}function aa(e,t,n,r){var o=Ji();r=void 0===r?null:r;var i=void 0;if(null!==Vi){var a=Vi.memoizedState;if(i=a.destroy,null!==r&&Ki(r,a.deps))return void ra(t,n,i,r)}Hi.effectTag|=e,o.memoizedState=ra(1|t,n,i,r)}function la(e,t){return ia(516,4,e,t)}function ua(e,t){return aa(516,4,e,t)}function sa(e,t){return aa(4,2,e,t)}function ca(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function fa(e,t,n){return n=null!=n?n.concat([e]):null,aa(4,2,ca.bind(null,t,e),n)}function da(){}function pa(e,t){return Xi().memoizedState=[e,void 0===t?null:t],e}function ha(e,t){var n=Ji();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ma(e,t){var n=Ji();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ya(e,t,n){var r=qo();Vo(98>r?98:r,(function(){e(!0)})),Vo(97<r?97:r,(function(){var r=$i.suspense;$i.suspense=void 0===t?null:t;try{e(!1),n()}finally{$i.suspense=r}}))}function va(e,t,n){var r=Ql(),o=mi.suspense;o={expirationTime:r=Kl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Hi||null!==i&&i===Hi)Gi=!0,o.expirationTime=qi,Hi.expirationTime=qi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Br(l,a))return}catch(e){}Yl(e,r)}}var ga={readContext:ai,useCallback:Qi,useContext:Qi,useEffect:Qi,useImperativeHandle:Qi,useLayoutEffect:Qi,useMemo:Qi,useReducer:Qi,useRef:Qi,useState:Qi,useDebugValue:Qi,useResponder:Qi,useDeferredValue:Qi,useTransition:Qi},ba={readContext:ai,useCallback:pa,useContext:ai,useEffect:la,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,ca.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ia(4,2,e,t)},useMemo:function(e,t){var n=Xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xi().memoizedState=e},useState:na,useDebugValue:da,useResponder:Ui,useDeferredValue:function(e,t){var n=na(e),r=n[0],o=n[1];return la((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=na(!1),n=t[0];return t=t[1],[pa(ya.bind(null,t,e),[t,e]),n]}},wa={readContext:ai,useCallback:ha,useContext:ai,useEffect:ua,useImperativeHandle:fa,useLayoutEffect:sa,useMemo:ma,useReducer:ea,useRef:oa,useState:function(){return ea(Zi)},useDebugValue:da,useResponder:Ui,useDeferredValue:function(e,t){var n=ea(Zi),r=n[0],o=n[1];return ua((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(Zi),n=t[0];return t=t[1],[ha(ya.bind(null,t,e),[t,e]),n]}},xa={readContext:ai,useCallback:ha,useContext:ai,useEffect:ua,useImperativeHandle:fa,useLayoutEffect:sa,useMemo:ma,useReducer:ta,useRef:oa,useState:function(){return ta(Zi)},useDebugValue:da,useResponder:Ui,useDeferredValue:function(e,t){var n=ta(Zi),r=n[0],o=n[1];return ua((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ta(Zi),n=t[0];return t=t[1],[ha(ya.bind(null,t,e),[t,e]),n]}},_a=null,Sa=null,ka=!1;function Ea(e,t){var n=Cu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(ka){var t=Sa;if(t){var n=t;if(!Ca(e,t)){if(!(t=Sn(n.nextSibling))||!Ca(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(_a=e);Ea(_a,n)}_a=e,Sa=Sn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,_a=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;_a=e}function Pa(e){if(e!==_a)return!1;if(!ka)return Ta(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!wn(t,e.memoizedProps))for(t=Sa;t;)Ea(e,t),t=Sn(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Sa=Sn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Sa=null}}else Sa=_a?Sn(e.stateNode.nextSibling):null;return!0}function ja(){Sa=_a=null,ka=!1}var Aa=J.ReactCurrentOwner,Ra=!1;function Na(e,t,n,r){t.child=null===e?Ti(t,null,n,r):Oi(t,e.child,n,r)}function Fa(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=Yi(e,t,n,r,i,o),null===e||Ra?(t.effectTag|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ya(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ou(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:zr)(o,r)&&e.ref===t.ref)?Ya(e,t,i):(t.effectTag|=1,(e=Tu(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){return null!==e&&zr(e.memoizedProps,r)&&e.ref===t.ref&&(Ra=!1,o<i)?(t.expirationTime=e.expirationTime,Ya(e,t,i)):Ia(e,t,n,r,i)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,o){var i=go(n)?yo:ho.current;return i=vo(t,i),ii(t,o),n=Yi(e,t,n,r,i,o),null===e||Ra?(t.effectTag|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ya(e,t,o))}function Ba(e,t,n,o,i){if(go(n)){var a=!0;_o(t)}else a=!1;if(ii(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),wi(t,n,o),_i(t,n,o,i),o=!0;else if(null===e){var l=t.stateNode,u=t.memoizedProps;l.props=u;var s=l.context,c=n.contextType;"object"===(void 0===c?"undefined":r(c))&&null!==c?c=ai(c):c=vo(t,c=go(n)?yo:ho.current);var f=n.getDerivedStateFromProps,d="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==o||s!==c)&&xi(t,l,o,c),li=!1;var p=t.memoizedState;l.state=p,pi(t,o,l,i),s=t.memoizedState,u!==o||p!==s||mo.current||li?("function"==typeof f&&(vi(t,n,f,o),s=t.memoizedState),(u=li||bi(t,n,u,o,p,s,c))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.effectTag|=4)):("function"==typeof l.componentDidMount&&(t.effectTag|=4),t.memoizedProps=o,t.memoizedState=s),l.props=o,l.state=s,l.context=c,o=u):("function"==typeof l.componentDidMount&&(t.effectTag|=4),o=!1)}else l=t.stateNode,si(e,t),u=t.memoizedProps,l.props=t.type===t.elementType?u:Xo(t.type,u),s=l.context,"object"===(void 0===(c=n.contextType)?"undefined":r(c))&&null!==c?c=ai(c):c=vo(t,c=go(n)?yo:ho.current),(d="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==o||s!==c)&&xi(t,l,o,c),li=!1,s=t.memoizedState,l.state=s,pi(t,o,l,i),p=t.memoizedState,u!==o||s!==p||mo.current||li?("function"==typeof f&&(vi(t,n,f,o),p=t.memoizedState),(f=li||bi(t,n,u,o,s,p,c))?(d||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(o,p,c),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(o,p,c)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=o,t.memoizedState=p),l.props=o,l.state=p,l.context=c,o=f):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),o=!1);return Ua(e,t,n,o,a,i)}function Ua(e,t,n,r,o,i){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&So(t,n,!1),Ya(e,t,i);r=t.stateNode,Aa.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oi(t,e.child,null,i),t.child=Oi(t,null,l,i)):Na(e,t,l,i),t.memoizedState=r.state,o&&So(t,n,!0),t.child}function za(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),Fi(e,t.containerInfo)}var $a,qa,Ha,Va={dehydrated:null,retryTime:0};function Wa(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ii.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),fo(Ii,1&a),null===e){if(void 0!==i.fallback&&Oa(t),l){if(l=i.fallback,(i=ju(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ju(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=Va,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ti(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Tu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,o}return n=Oi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=ju(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ju(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Va,t.child=i,n}return t.memoizedState=null,t.child=Oi(t,e,i.children,n)}function Ga(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),oi(e.return,t)}function Qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ka(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(fo(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Bi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Bi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Qa(t,!0,n,null,i,t.lastEffect);break;case"together":Qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ya(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&uu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ja(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&bo(),null;case 3:return Mi(),co(mo),co(ho),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Di(t),n=Ni(Ri.current);var o=t.type;if(null!==e&&null!=t.stateNode)qa(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(l(166));return null}if(e=Ni(ji.current),Pa(t)){r=t.stateNode,o=t.type;var a=t.memoizedProps;switch(r[Cn]=t,r[On]=a,o){case"iframe":case"object":case"embed":Kt("load",r);break;case"video":case"audio":for(e=0;e<Je.length;e++)Kt(Je[e],r);break;case"source":Kt("error",r);break;case"img":case"image":case"link":Kt("error",r),Kt("load",r);break;case"form":Kt("reset",r),Kt("submit",r);break;case"details":Kt("toggle",r);break;case"input":Ee(r,a),Kt("invalid",r),cn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Kt("invalid",r),cn(n,"onChange");break;case"textarea":Ne(r,a),Kt("invalid",r),cn(n,"onChange")}for(var u in ln(o,a),e=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):E.hasOwnProperty(u)&&null!=s&&cn(n,u)}switch(o){case"input":_e(r),Te(r,a,!0);break;case"textarea":_e(r),Me(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=fn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Ie(o)),e===sn?"script"===o?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(o,{is:r.is}):(e=u.createElement(o),"select"===o&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,o),e[Cn]=t,e[On]=r,$a(e,t),t.stateNode=e,u=un(o,r),o){case"iframe":case"object":case"embed":Kt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Je.length;s++)Kt(Je[s],e);s=r;break;case"source":Kt("error",e),s=r;break;case"img":case"image":case"link":Kt("error",e),Kt("load",e),s=r;break;case"form":Kt("reset",e),Kt("submit",e),s=r;break;case"details":Kt("toggle",e),s=r;break;case"input":Ee(e,r),s=ke(e,r),Kt("invalid",e),cn(n,"onChange");break;case"option":s=je(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=i({},r,{value:void 0}),Kt("invalid",e),cn(n,"onChange");break;case"textarea":Ne(e,r),s=Re(e,r),Kt("invalid",e),cn(n,"onChange");break;default:s=r}ln(o,s);var c=s;for(a in c)if(c.hasOwnProperty(a)){var f=c[a];"style"===a?on(e,f):"dangerouslySetInnerHTML"===a?null!=(f=f?f.__html:void 0)&&ze(e,f):"children"===a?"string"==typeof f?("textarea"!==o||""!==f)&&$e(e,f):"number"==typeof f&&$e(e,""+f):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(E.hasOwnProperty(a)?null!=f&&cn(n,a):null!=f&&Z(e,a,f,u))}switch(o){case"input":_e(e),Te(e,r,!1);break;case"textarea":_e(e),Me(e);break;case"option":null!=r.value&&e.setAttribute("value",""+we(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ae(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=fn)}bn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));n=Ni(Ri.current),Ni(ji.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Cn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Cn]=t,t.stateNode=n)}return null;case 13:return co(Ii),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(a=t.firstEffect)?(t.firstEffect=o,o.nextEffect=a):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?Pl===_l&&(Pl=Sl):(Pl!==_l&&Pl!==Sl||(Pl=kl),0!==Fl&&null!==Cl&&(Mu(Cl,Tl),Lu(Cl,Fl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Mi(),null;case 10:return ri(t),null;case 17:return go(t.type)&&bo(),null;case 19:if(co(Ii),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(a=r.rendering)){if(o)Xa(r,!1);else if(Pl!==_l||null!==e&&0!=(64&e.effectTag))for(a=t.child;null!==a;){if(null!==(e=Bi(a))){for(t.effectTag|=64,Xa(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)a=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=a,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,a=e.dependencies,o.dependencies=null===a?null:{expirationTime:a.expirationTime,firstContext:a.firstContext,responders:a.responders}),r=r.sibling;return fo(Ii,1&Ii.current|2),t.child}a=a.sibling}}else{if(!o)if(null!==(e=Bi(a))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!a.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(a.sibling=t.child,t.child=a):(null!==(n=r.last)?n.sibling=a:t.child=a,r.last=a)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=$o()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=Ii.current,fo(Ii,o?1&t|2:1&t),n):null}throw Error(l(156,t.tag))}function Za(e){switch(e.tag){case 1:go(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Mi(),co(mo),co(ho),0!=(64&(t=e.effectTag)))throw Error(l(285));return e.effectTag=-4097&t|64,e;case 5:return Di(e),null;case 13:return co(Ii),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(Ii),null;case 4:return Mi(),null;case 10:return ri(e),null;default:return null}}function el(e,t){return{value:e,source:t,stack:be(t)}}$a=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l,u,s=t.stateNode;switch(Ni(ji.current),e=null,n){case"input":a=ke(s,a),r=ke(s,r),e=[];break;case"option":a=je(s,a),r=je(s,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Re(s,a),r=Re(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=fn)}for(l in ln(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in s=a[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(E.hasOwnProperty(l)?(null!=c&&cn(o,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var tl="function"==typeof WeakSet?WeakSet:Set;function nl(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=be(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function rl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){wu(e,t)}else t.current=null}function ol(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(l(163))}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function al(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ll(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void al(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Xo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&bn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(l(163))}function ul(e,t,n){switch("function"==typeof ku&&ku(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){wu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:rl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){wu(e,t)}}(t,n);break;case 5:rl(t);break;case 4:dl(e,t,n)}}function sl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&sl(t)}function cl(e){return 5===e.tag||3===e.tag||4===e.tag}function fl(e){e:{for(var t=e.return;null!==t;){if(cl(t)){var n=t;break e}t=t.return}throw Error(l(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(l(161))}16&n.effectTag&&($e(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||cl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=fn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function dl(e,t,n){for(var r,o,i=t,a=!1;;){if(!a){a=i.return;e:for(;;){if(null===a)throw Error(l(160));switch(r=a.stateNode,a.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}a=a.return}a=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,c=n,f=s;;)if(ul(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(ul(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(a=!1)}i.sibling.return=i.return,i=i.sibling}}function pl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void il(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),un(e,o),t=un(e,r),o=0;o<i.length;o+=2){var a=i[o],u=i[o+1];"style"===a?on(n,u):"dangerouslySetInnerHTML"===a?ze(n,u):"children"===a?$e(n,u):Z(n,a,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Fe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ae(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ae(n,!!r.multiple,r.defaultValue,!0):Ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ll=$o()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=rn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void hl(t);case 19:return void hl(t);case 17:return}throw Error(l(163))}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new tl),t.forEach((function(t){var r=_u.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ml="function"==typeof WeakMap?WeakMap:Map;function yl(e,t,n){(n=ci(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Il||(Il=!0,Bl=r),nl(e,t)},n}function vl(e,t,n){(n=ci(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return nl(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ul?Ul=new Set([this]):Ul.add(this),nl(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var gl,bl=Math.ceil,wl=J.ReactCurrentDispatcher,xl=J.ReactCurrentOwner,_l=0,Sl=3,kl=4,El=0,Cl=null,Ol=null,Tl=0,Pl=_l,jl=null,Al=1073741823,Rl=1073741823,Nl=null,Fl=0,Ml=!1,Ll=0,Dl=null,Il=!1,Bl=null,Ul=null,zl=!1,$l=null,ql=90,Hl=null,Vl=0,Wl=null,Gl=0;function Ql(){return 0!=(48&El)?1073741821-($o()/10|0):0!==Gl?Gl:Gl=1073741821-($o()/10|0)}function Kl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=qo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&El))return Tl;if(null!==n)e=Yo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Yo(e,150,100);break;case 97:case 96:e=Yo(e,5e3,250);break;case 95:e=2;break;default:throw Error(l(326))}return null!==Cl&&e===Tl&&--e,e}function Yl(e,t){if(50<Vl)throw Vl=0,Wl=null,Error(l(185));if(null!==(e=Xl(e,t))){var n=qo();1073741823===t?0!=(8&El)&&0==(48&El)?tu(e):(Zl(e),0===El&&Qo()):Zl(e),0==(4&El)||98!==n&&99!==n||(null===Hl?Hl=new Map([[e,t]]):(void 0===(n=Hl.get(e))||n>t)&&Hl.set(e,t))}}function Xl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Cl===o&&(uu(t),Pl===kl&&Mu(o,Tl)),Lu(o,t)),o}function Jl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Fu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Zl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Go(tu.bind(null,e));else{var t=Jl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Mo&&Co(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Go(tu.bind(null,e)):Wo(r,eu.bind(null,e),{timeout:10*(1073741821-t)-$o()}),e.callbackNode=t}}}function eu(e,t){if(Gl=0,t)return Du(e,t=Ql()),Zl(e),null;var n=Jl(e);if(0!==n){if(t=e.callbackNode,0!=(48&El))throw Error(l(327));if(vu(),e===Cl&&n===Tl||ou(e,n),null!==Ol){var r=El;El|=16;for(var o=au();;)try{cu();break}catch(t){iu(e,t)}if(ni(),El=r,wl.current=o,1===Pl)throw t=jl,ou(e,n),Mu(e,n),Zl(e),t;if(null===Ol)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,Cl=null,r){case _l:case 1:throw Error(l(345));case 2:Du(e,2<n?2:n);break;case Sl:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=pu(o)),1073741823===Al&&10<(o=Ll+500-$o())){if(Ml){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,ou(e,n);break}}if(0!==(i=Jl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=xn(hu.bind(null,e),o);break}hu(e);break;case kl:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=pu(o)),Ml&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,ou(e,n);break}if(0!==(o=Jl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Rl?r=10*(1073741821-Rl)-$o():1073741823===Al?r=0:(r=10*(1073741821-Al)-5e3,0>(r=(o=$o())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*bl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=xn(hu.bind(null,e),r);break}hu(e);break;case 5:if(1073741823!==Al&&null!==Nl){i=Al;var a=Nl;if(0>=(r=0|a.busyMinDurationMs)?r=0:(o=0|a.busyDelayMs,r=(i=$o()-(10*(1073741821-i)-(0|a.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Mu(e,n),e.timeoutHandle=xn(hu.bind(null,e),r);break}}hu(e);break;default:throw Error(l(329))}if(Zl(e),e.callbackNode===t)return eu.bind(null,e)}}return null}function tu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&El))throw Error(l(327));if(vu(),e===Cl&&t===Tl||ou(e,t),null!==Ol){var n=El;El|=16;for(var r=au();;)try{su();break}catch(t){iu(e,t)}if(ni(),El=n,wl.current=r,1===Pl)throw n=jl,ou(e,t),Mu(e,t),Zl(e),n;if(null!==Ol)throw Error(l(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cl=null,hu(e),Zl(e)}return null}function nu(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&Qo()}}function ru(e,t){var n=El;El&=-2,El|=8;try{return e(t)}finally{0===(El=n)&&Qo()}}function ou(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,_n(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bo();break;case 3:Mi(),co(mo),co(ho);break;case 5:Di(r);break;case 4:Mi();break;case 13:case 19:co(Ii);break;case 10:ri(r)}n=n.return}Cl=e,Ol=Tu(e.current,null),Tl=t,Pl=_l,jl=null,Rl=Al=1073741823,Nl=null,Fl=0,Ml=!1}function iu(e,t){for(;;){try{if(ni(),zi.current=ga,Gi)for(var n=Hi.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}if(qi=0,Wi=Vi=Hi=null,Gi=!1,null===Ol||null===Ol.return)return Pl=1,jl=t,Ol=null;e:{var i=e,a=Ol.return,l=Ol,u=t;if(t=Tl,l.effectTag|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===(void 0===u?"undefined":r(u))&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.expirationTime=c.expirationTime):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(s),d.updateQueue=v}else y.add(s);if(0==(2&d.mode)){if(d.effectTag|=64,l.effectTag&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=ci(1073741823,null);g.tag=2,fi(l,g)}l.expirationTime=1073741823;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ml,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=xu.bind(null,i,s,l);s.then(w,w)}d.effectTag|=4096,d.expirationTime=t;break e}d=d.return}while(null!==d);u=Error((ge(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+be(l))}5!==Pl&&(Pl=2),u=el(u,l),d=a;do{switch(d.tag){case 3:s=u,d.effectTag|=4096,d.expirationTime=t,di(d,yl(d,s,t));break e;case 1:s=u;var x=d.type,_=d.stateNode;if(0==(64&d.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Ul||!Ul.has(_)))){d.effectTag|=4096,d.expirationTime=t,di(d,vl(d,s,t));break e}}d=d.return}while(null!==d)}Ol=du(Ol)}catch(e){t=e;continue}break}}function au(){var e=wl.current;return wl.current=ga,null===e?ga:e}function lu(e,t){e<Al&&2<e&&(Al=e),null!==t&&e<Rl&&2<e&&(Rl=e,Nl=t)}function uu(e){e>Fl&&(Fl=e)}function su(){for(;null!==Ol;)Ol=fu(Ol)}function cu(){for(;null!==Ol&&!Lo();)Ol=fu(Ol)}function fu(e){var t=gl(e.alternate,e,Tl);return e.memoizedProps=e.pendingProps,null===t&&(t=du(e)),xl.current=null,t}function du(e){Ol=e;do{var t=Ol.alternate;if(e=Ol.return,0==(2048&Ol.effectTag)){if(t=Ja(t,Ol,Tl),1===Tl||1!==Ol.childExpirationTime){for(var n=0,r=Ol.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Ol.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ol.firstEffect),null!==Ol.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ol.firstEffect),e.lastEffect=Ol.lastEffect),1<Ol.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ol:e.firstEffect=Ol,e.lastEffect=Ol))}else{if(null!==(t=Za(Ol)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ol.sibling))return t;Ol=e}while(null!==Ol);return Pl===_l&&(Pl=5),null}function pu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function hu(e){var t=qo();return Vo(99,mu.bind(null,e,t)),null}function mu(e,t){do{vu()}while(null!==$l);if(0!=(48&El))throw Error(l(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(l(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=pu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cl&&(Ol=Cl=null,Tl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=El;El|=32,xl.current=null,vn=Qt;var a=mn();if(yn(a)){if("selectionStart"in a)var u={start:a.selectionStart,end:a.selectionEnd};else e:{var s=(u=(u=a.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,y=0,v=a,g=null;t:for(;;){for(var b;v!==u||0!==c&&3!==v.nodeType||(p=d+c),v!==f||0!==s&&3!==v.nodeType||(h=d+s),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===a)break t;if(g===u&&++m===c&&(p=d),g===f&&++y===s&&(h=d),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;gn={activeElementDetached:null,focusedElem:a,selectionRange:u},Qt=!1,Dl=o;do{try{yu()}catch(e){if(null===Dl)throw Error(l(330));wu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);Dl=o;do{try{for(a=e,u=t;null!==Dl;){var w=Dl.effectTag;if(16&w&&$e(Dl.stateNode,""),128&w){var x=Dl.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&w){case 2:fl(Dl),Dl.effectTag&=-3;break;case 6:fl(Dl),Dl.effectTag&=-3,pl(Dl.alternate,Dl);break;case 1024:Dl.effectTag&=-1025;break;case 1028:Dl.effectTag&=-1025,pl(Dl.alternate,Dl);break;case 4:pl(Dl.alternate,Dl);break;case 8:dl(a,c=Dl,u),sl(c)}Dl=Dl.nextEffect}}catch(e){if(null===Dl)throw Error(l(330));wu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);if(_=gn,x=mn(),w=_.focusedElem,u=_.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&yn(w)&&(x=u.start,void 0===(_=u.end)&&(_=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(_,w.value.length)):(_=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),c=w.textContent.length,a=Math.min(u.start,c),u=void 0===u.end?a:Math.min(u.end,c),!_.extend&&a>u&&(c=u,u=a,a=c),c=hn(w,a),f=hn(w,u),c&&f&&(1!==_.rangeCount||_.anchorNode!==c.node||_.anchorOffset!==c.offset||_.focusNode!==f.node||_.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),_.removeAllRanges(),a>u?(_.addRange(x),_.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),_.addRange(x))))),x=[];for(_=w;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(_=x[w]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Qt=!!vn,gn=vn=null,e.current=n,Dl=o;do{try{for(w=e;null!==Dl;){var S=Dl.effectTag;if(36&S&&ll(w,Dl.alternate,Dl),128&S){x=void 0;var k=Dl.ref;if(null!==k){var E=Dl.stateNode;switch(Dl.tag){case 5:x=E;break;default:x=E}"function"==typeof k?k(x):k.current=x}}Dl=Dl.nextEffect}}catch(e){if(null===Dl)throw Error(l(330));wu(Dl,e),Dl=Dl.nextEffect}}while(null!==Dl);Dl=null,Do(),El=i}else e.current=n;if(zl)zl=!1,$l=e,ql=t;else for(Dl=o;null!==Dl;)t=Dl.nextEffect,Dl.nextEffect=null,Dl=t;if(0===(t=e.firstPendingTime)&&(Ul=null),1073741823===t?e===Wl?Vl++:(Vl=0,Wl=e):Vl=0,"function"==typeof Su&&Su(n.stateNode,r),Zl(e),Il)throw Il=!1,e=Bl,Bl=null,e;return 0!=(8&El)||Qo(),null}function yu(){for(;null!==Dl;){var e=Dl.effectTag;0!=(256&e)&&ol(Dl.alternate,Dl),0==(512&e)||zl||(zl=!0,Wo(97,(function(){return vu(),null}))),Dl=Dl.nextEffect}}function vu(){if(90!==ql){var e=97<ql?97:ql;return ql=90,Vo(e,gu)}}function gu(){if(null===$l)return!1;var e=$l;if($l=null,0!=(48&El))throw Error(l(331));var t=El;for(El|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:il(5,n),al(5,n)}}catch(t){if(null===e)throw Error(l(330));wu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return El=t,Qo(),!0}function bu(e,t,n){fi(e,t=yl(e,t=el(n,t),1073741823)),null!==(e=Xl(e,1073741823))&&Zl(e)}function wu(e,t){if(3===e.tag)bu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){bu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ul||!Ul.has(r))){fi(n,e=vl(n,e=el(t,e),1073741823)),null!==(n=Xl(n,1073741823))&&Zl(n);break}}n=n.return}}function xu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cl===e&&Tl===n?Pl===kl||Pl===Sl&&1073741823===Al&&$o()-Ll<500?ou(e,Tl):Ml=!0:Fu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Zl(e)))}function _u(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Kl(t=Ql(),e,null)),null!==(e=Xl(e,t))&&Zl(e)}gl=function(e,t,n){var o=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||mo.current)Ra=!0;else{if(o<n){switch(Ra=!1,t.tag){case 3:za(t),ja();break;case 5:if(Li(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:go(t.type)&&_o(t);break;case 4:Fi(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value,i=t.type._context,fo(Jo,i._currentValue),i._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!==(o=t.child.childExpirationTime)&&o>=n?Wa(e,t,n):(fo(Ii,1&Ii.current),null!==(t=Ya(e,t,n))?t.sibling:null);fo(Ii,1&Ii.current);break;case 19:if(o=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(o)return Ka(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),fo(Ii,Ii.current),!o)return null}return Ya(e,t,n)}Ra=!1}}else Ra=!1;switch(t.expirationTime=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=vo(t,ho.current),ii(t,n),i=Yi(null,t,o,e,i,n),t.effectTag|=1,"object"===(void 0===i?"undefined":r(i))&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(o)){var a=!0;_o(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ui(t);var u=o.getDerivedStateFromProps;"function"==typeof u&&vi(t,o,u,e),i.updater=gi,t.stateNode=i,i._reactInternalFiber=t,_i(t,o,e,n),t=Ua(null,t,o,!0,a,n)}else t.tag=0,Na(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,a=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===pe)return 14}return 2}(i),e=Xo(i,e),a){case 0:t=Ia(null,t,i,e,n);break e;case 1:t=Ba(null,t,i,e,n);break e;case 11:t=Fa(null,t,i,e,n);break e;case 14:t=Ma(null,t,i,Xo(i.type,e),o,n);break e}throw Error(l(306,i,""))}return t;case 0:return o=t.type,i=t.pendingProps,Ia(e,t,o,i=t.elementType===o?i:Xo(o,i),n);case 1:return o=t.type,i=t.pendingProps,Ba(e,t,o,i=t.elementType===o?i:Xo(o,i),n);case 3:if(za(t),o=t.updateQueue,null===e||null===o)throw Error(l(282));if(o=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,si(e,t),pi(t,o,null,n),(o=t.memoizedState.element)===i)ja(),t=Ya(e,t,n);else{if((i=t.stateNode.hydrate)&&(Sa=Sn(t.stateNode.containerInfo.firstChild),_a=t,i=ka=!0),i)for(n=Ti(t,null,o,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,o,n),ja();t=t.child}return t;case 5:return Li(t),null===e&&Oa(t),o=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,u=i.children,wn(o,i)?u=null:null!==a&&wn(o,a)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,u,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return Wa(e,t,n);case 4:return Fi(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Oi(t,null,o,n):Na(e,t,o,n),t.child;case 11:return o=t.type,i=t.pendingProps,Fa(e,t,o,i=t.elementType===o?i:Xo(o,i),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,i=t.pendingProps,u=t.memoizedProps,a=i.value;var s=t.type._context;if(fo(Jo,s._currentValue),s._currentValue=a,null!==u)if(s=u.value,0===(a=Br(s,a)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(s,a):1073741823))){if(u.children===i.children&&!mo.current){t=Ya(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.dependencies;if(null!==c){u=s.child;for(var f=c.firstContext;null!==f;){if(f.context===o&&0!=(f.observedBits&a)){1===s.tag&&((f=ci(n,null)).tag=2,fi(s,f)),s.expirationTime<n&&(s.expirationTime=n),null!==(f=s.alternate)&&f.expirationTime<n&&(f.expirationTime=n),oi(s.return,n),c.expirationTime<n&&(c.expirationTime=n);break}f=f.next}}else u=10===s.tag&&s.type===t.type?null:s.child;if(null!==u)u.return=s;else for(u=s;null!==u;){if(u===t){u=null;break}if(null!==(s=u.sibling)){s.return=u.return,u=s;break}u=u.return}s=u}Na(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,o=(a=t.pendingProps).children,ii(t,n),o=o(i=ai(i,a.unstable_observedBits)),t.effectTag|=1,Na(e,t,o,n),t.child;case 14:return a=Xo(i=t.type,t.pendingProps),Ma(e,t,i,a=Xo(i.type,a),o,n);case 15:return La(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,i=t.pendingProps,i=t.elementType===o?i:Xo(o,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,go(o)?(e=!0,_o(t)):e=!1,ii(t,n),wi(t,o,i),_i(t,o,i,n),Ua(null,t,o,!0,e,n);case 19:return Ka(e,t,n)}throw Error(l(156,t.tag))};var Su=null,ku=null;function Eu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cu(e,t,n,r){return new Eu(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Cu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,o,i,a){var u=2;if(o=e,"function"==typeof e)Ou(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case oe:return ju(n.children,i,a,t);case se:u=8,i|=7;break;case ie:u=8,i|=1;break;case ae:return(e=Cu(12,n,t,8|i)).elementType=ae,e.type=ae,e.expirationTime=a,e;case fe:return(e=Cu(13,n,t,i)).type=fe,e.elementType=fe,e.expirationTime=a,e;case de:return(e=Cu(19,n,t,i)).elementType=de,e.expirationTime=a,e;default:if("object"===(void 0===e?"undefined":r(e))&&null!==e)switch(e.$$typeof){case le:u=10;break e;case ue:u=9;break e;case ce:u=11;break e;case pe:u=14;break e;case he:u=16,o=null;break e;case me:u=22;break e}throw Error(l(130,null==e?e:void 0===e?"undefined":r(e),""))}return(t=Cu(u,n,t,i)).elementType=e,t.type=o,t.expirationTime=a,t}function ju(e,t,n,r){return(e=Cu(7,e,r,t)).expirationTime=n,e}function Au(e,t,n){return(e=Cu(6,e,null,t)).expirationTime=n,e}function Ru(e,t,n){return(t=Cu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Fu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Mu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Lu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Du(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Iu(e,t,n,r){var o=t.current,i=Ql(),a=mi.suspense;i=Kl(i,o,a);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(l(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(l(171))}if(1===n.tag){var s=n.type;if(go(s)){n=xo(n,s,u);break e}}n=u}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),Yl(o,i),i}function Bu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Uu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function zu(e,t){Uu(e,t),(e=e.alternate)&&Uu(e,t)}function $u(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),o=Cu(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ui(o),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=et(t);Tt.forEach((function(e){yt(e,t,n)})),Pt.forEach((function(e){yt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Bu(a);l.call(e)}}Iu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new $u(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Bu(a);u.call(e)}}ru((function(){Iu(t,a,e,o)}))}return Bu(a)}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:re,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Wu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qu(t))throw Error(l(200));return Vu(e,t,null,n)}$u.prototype.render=function(e){Iu(e,this._internalRoot,null,null)},$u.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Iu(null,e,null,(function(){t[Tn]=null}))},vt=function(e){if(13===e.tag){var t=Yo(Ql(),150,100);Yl(e,t),zu(e,t)}},gt=function(e){13===e.tag&&(Yl(e,3),zu(e,3))},bt=function(e){if(13===e.tag){var t=Ql();Yl(e,t=Kl(t,e,null)),zu(e,t)}},P=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Rn(r);if(!o)throw Error(l(90));Se(r),Oe(r,o)}}}break;case"textarea":Fe(e,n);break;case"select":null!=(t=n.value)&&Ae(e,!!n.multiple,t,!1)}},M=nu,L=function(e,t,n,r,o){var i=El;El|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(El=i)&&Qo()}},D=function(){0==(49&El)&&(function(){if(null!==Hl){var e=Hl;Hl=null,e.forEach((function(e,t){Du(t,e),Zl(t)})),Qo()}}(),vu())},I=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&Qo()}};var Gu,Qu,Ku={Events:[jn,An,Rn,O,k,Bn,function(e){at(e,In)},N,F,Zt,st,vu,{current:!1}]};Qu=(Gu={findFiberByHostInstance:Pn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Su=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ku=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Gu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:J.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Qu?Qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ku,t.createPortal=Wu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw Error(l(268,Object.keys(e)))}return e=null===(e=ot(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&El))throw Error(l(187));var n=El;El|=1;try{return Vo(99,e.bind(null,t))}finally{El=n,Qo()}},t.hydrate=function(e,t,n){if(!qu(t))throw Error(l(200));return Hu(null,e,t,!0,n)},t.render=function(e,t,n){if(!qu(t))throw Error(l(200));return Hu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!qu(e))throw Error(l(40));return!!e._reactRootContainer&&(ru((function(){Hu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=nu,t.unstable_createPortal=function(e,t){return Wu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!qu(n))throw Error(l(200));if(null==e||void 0===e._reactInternalFiber)throw Error(l(38));return Hu(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(15),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,s=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,f=i?Symbol.for("react.provider"):60109,d=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,y=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function _(){}function S(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!==(void 0===e?"undefined":r(e))&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=x.prototype;var k=S.prototype=new _;k.constructor=S,o(k,x.prototype),k.isPureReactComponent=!0;var E={current:null},C=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:E.current}}function P(e){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&e.$$typeof===a}var j=/\/+/g,A=[];function R(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function F(e,t,n){return null==e?0:function e(t,n,o,i){var u=void 0===t?"undefined":r(t);"undefined"!==u&&"boolean"!==u||(t=null);var s=!1;if(null===t)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case a:case l:s=!0}}if(s)return o(i,t,""===n?"."+M(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var f=n+M(u=t[c],c);s+=e(u,f,o,i)}else if(null===t||"object"!==(void 0===t?"undefined":r(t))?f=null:f="function"==typeof(f=v&&t[v]||t["@@iterator"])?f:null,"function"==typeof f)for(t=f.call(t),c=0;!(u=t.next()).done;)s+=e(u=u.value,f=n+M(u,c++),o,i);else if("object"===u)throw o=""+t,Error(g(31,"[object Object]"===o?"object with keys {"+Object.keys(t).join(", ")+"}":o,""));return s}(e,"",t,n)}function M(e,t){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),F(e,D,t=R(t,i,r,o)),N(t)}var B={current:null};function U(){var e=B.current;if(null===e)throw Error(g(321));return e}var z={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;F(e,L,t=R(null,null,t,n)),N(t)},count:function(e){return F(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(g(143));return e}},t.Component=x,t.Fragment=u,t.Profiler=c,t.PureComponent=S,t.StrictMode=s,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var r=o({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)C.call(t,c)&&!O.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];r.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:r,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return U().useCallback(e,t)},t.useContext=function(e,t){return U().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return U().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return U().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return U().useLayoutEffect(e,t)},t.useMemo=function(e,t){return U().useMemo(e,t)},t.useReducer=function(e,t,n){return U().useReducer(e,t,n)},t.useRef=function(e){return U().useRef(e)},t.useState=function(e){return U().useState(e)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(36)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function e(){if(null!==s)try{var n=t.unstable_now();s(!0,n),s=null}catch(t){throw setTimeout(e,0),t}},d=Date.now();t.unstable_now=function(){return Date.now()-d},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(f,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,h=window.Date,m=window.setTimeout,y=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===(void 0===p?"undefined":u(p))&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var g=h.now();t.unstable_now=function(){return h.now()-g}}var b=!1,w=null,x=-1,_=5,S=0;a=function(){return t.unstable_now()>=S},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==w){var e=t.unstable_now();S=e+_;try{w(!0,e)?E.postMessage(null):(b=!1,w=null)}catch(e){throw E.postMessage(null),e}}else b=!1},r=function(e){w=e,b||(b=!0,E.postMessage(null))},o=function(e,n){x=m((function(){e(t.unstable_now())}),n)},i=function(){y(x),x=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function O(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>P(a,n))void 0!==u&&0>P(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>P(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var j=[],A=[],R=1,N=null,F=3,M=!1,L=!1,D=!1;function I(e){for(var t=O(A);null!==t;){if(null===t.callback)T(A);else{if(!(t.startTime<=e))break;T(A),t.sortIndex=t.expirationTime,C(j,t)}t=O(A)}}function B(e){if(D=!1,I(e),!L)if(null!==O(j))L=!0,r(U);else{var t=O(A);null!==t&&o(B,t.startTime-e)}}function U(e,n){L=!1,D&&(D=!1,i()),M=!0;var r=F;try{for(I(n),N=O(j);null!==N&&(!(N.expirationTime>n)||e&&!a());){var l=N.callback;if(null!==l){N.callback=null,F=N.priorityLevel;var u=l(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?N.callback=u:N===O(j)&&T(j),I(n)}else T(j);N=O(j)}if(null!==N)var s=!0;else{var c=O(A);null!==c&&o(B,c.startTime-n),s=!1}return s}finally{N=null,F=r,M=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||M||(L=!0,r(U))},t.unstable_getCurrentPriorityLevel=function(){return F},t.unstable_getFirstCallbackNode=function(){return O(j)},t.unstable_next=function(e){switch(F){case 1:case 2:case 3:var t=3;break;default:t=F}var n=F;F=t;try{return e()}finally{F=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=F;F=e;try{return t()}finally{F=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"===(void 0===a?"undefined":u(a))&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?l+s:l,a="number"==typeof a.timeout?a.timeout:z(e)}else a=z(e),s=l;return e={id:R++,callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,sortIndex:-1},s>l?(e.sortIndex=s,C(A,e),null===O(j)&&e===O(A)&&(D?i():D=!0,o(B,s-l))):(e.sortIndex=a,C(j,e),L||M||(L=!0,r(U))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=O(j);return n!==N&&null!==N&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<N.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=F;return function(){var n=F;F=t;try{return e.apply(this,arguments)}finally{F=n}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(0)),a=s(n(38)),l=s(n(7)),u=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={authentication:{username:null,jwt:null},artistCollections:[{}],friends:[],recommendations:[],likedArtists:[]},n.getCurrentUser=n.getCurrentUser.bind(n),n.getCurrentUserAndRenew=n.getCurrentUserAndRenew.bind(n),n.getArtistCollections=n.getArtistCollections.bind(n),n.setArtistCollections=n.setArtistCollections.bind(n),n.getFriends=n.getFriends.bind(n),n.setFriends=n.setFriends.bind(n),n.getRecommendations=n.getRecommendations.bind(n),n.setRecommendations=n.setRecommendations.bind(n),n.getLikedArtists=n.getLikedArtists.bind(n),n.setLikedArtists=n.setLikedArtists.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){this.getCurrentUserAndRenew(),this.getLikedArtists()}},{key:"getCurrentUserAndRenew",value:function(){var e=this;return new Promise((function(t,n){l.default.getCurrentUserAndRenew().then((function(n){return e.setState({authentication:{username:n.username,jwt:n.jwt}}),t(n)})).catch((function(t){return e.setState({authentication:{username:null,jwt:null}}),n(t)}))}))}},{key:"getCurrentUser",value:function(){var e=this;return new Promise((function(t,n){l.default.getCurrentUser().then((function(n){return e.setState({authentication:{username:n.username,jwt:n.jwt}}),t(n)})).catch((function(t){return e.setState({authentication:{username:null,jwt:null}}),n(t)}))}))}},{key:"getArtistCollections",value:function(){var e=this;u.default.getArtistCollections().then((function(e){return e.json()})).then((function(t){e.setArtistCollections(t)})).catch((function(e){}))}},{key:"setArtistCollections",value:function(e){this.setState({artistCollections:e})}},{key:"getFriends",value:function(){var e=this;u.default.getFriends().then((function(t){e.setFriends(t)})).catch((function(e){}))}},{key:"setFriends",value:function(e){this.setState({friends:e})}},{key:"getRecommendations",value:function(){var e=this;u.default.getRecommendations().then((function(t){e.setRecommendations(t)})).catch((function(){}))}},{key:"setRecommendations",value:function(e){this.setState({recommendations:e})}},{key:"getLikedArtists",value:function(){var e=this;u.default.getLikedArtists().then((function(t){e.setState({likedArtists:t})})).catch((function(){}))}},{key:"setLikedArtists",value:function(e){this.setState({likedArtists:e})}},{key:"render",value:function(){return i.default.createElement(a.default,r({},this.props,{authentication:this.state.authentication,renewAuthentication:this.renewAuthentication,getCurrentUser:this.getCurrentUser,artistCollections:this.state.artistCollections,getArtistCollections:this.getArtistCollections,setArtistCollections:this.setArtistCollections,friends:this.state.friends,getFriends:this.getFriends,setFriends:this.setFriends,recommendations:this.state.recommendations,getRecommendations:this.getRecommendations,setRecommendations:this.setRecommendations,likedArtists:this.state.likedArtists,getLikedArtists:this.getLikedArtists,setLikedArtists:this.setLikedArtists}))}}]),t}(i.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=n(3),u=s(n(59));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){var e=this;return o(l.BrowserRouter,{},void 0,o("div",{},void 0,o(l.Route,{path:"/",render:function(t){return a.default.createElement(u.default,Object.assign({},e.props,t))}})))}}]),t}(a.default.Component);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(4)),i=s(n(0)),a=s(n(2)),l=n(6),u=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;c(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.history=(0,l.createBrowserHistory)(r.props),f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(u.default,{history:this.history,children:this.props.children})},t}(i.default.Component);d.propTypes={basename:a.default.string,forceRefresh:a.default.bool,getUserConfirmation:a.default.func,keyLength:a.default.number,children:a.default.node},t.default=d},function(e,t,n){"use strict";var r=n(41);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(){return t.default=r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){void 0===t&&(t="");var n,i=e&&e.split("/")||[],a=t&&t.split("/")||[],l=e&&r(e),u=t&&r(t),s=l||u;if(e&&r(e)?a=i:i.length&&(a.pop(),a=a.concat(i)),!a.length)return"/";if(a.length){var c=a[a.length-1];n="."===c||".."===c||""===c}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?o(a,d):".."===p?(o(a,d),f++):f&&(o(a,d),f--)}if(!s)for(;f--;f)a.unshift("..");!s||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"===(void 0===t?"undefined":r(t))||"object"===(void 0===n?"undefined":r(n))){var i=o(t),a=o(n);return i!==t||a!==n?e(i,a):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e,t){if(!e)throw new Error("Invariant failed")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(4)),i=s(n(0)),a=s(n(2)),l=n(6),u=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){function t(){var n,r;c(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.history=(0,l.createHashHistory)(r.props),f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(u.default,{history:this.history,children:this.props.children})},t}(i.default.Component);d.propTypes={basename:a.default.string,getUserConfirmation:a.default.func,hashType:a.default.oneOf(["hashbang","noslash","slash"]),children:a.default.node},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(17),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=u(n(0)),i=u(n(2)),a=u(n(18)),l=u(n(16));function u(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};var f=function(e){var t=e.to,n=e.exact,r=e.strict,i=e.location,u=e.activeClassName,f=e.className,d=e.activeStyle,p=e.style,h=e.isActive,m=e["aria-current"],y=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),v="object"===(void 0===t?"undefined":c(t))?t.pathname:t,g=v&&v.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return o.default.createElement(a.default,{path:g,exact:n,strict:r,location:i,children:function(e){var n=e.location,r=e.match,i=!!(h?h(r,n):r);return o.default.createElement(l.default,s({to:t,className:i?[f,u].filter((function(e){return e})).join(" "):f,style:i?s({},p,d):p,"aria-current":i&&m||null},y))}})};f.propTypes={to:l.default.propTypes.to,exact:i.default.bool,strict:i.default.bool,location:i.default.object,activeClassName:i.default.string,className:i.default.string,activeStyle:i.default.object,style:i.default.object,isActive:i.default.func,"aria-current":i.default.oneOf(["page","step","location","date","time","true"])},f.defaultProps={activeClassName:"active","aria-current":"page"},t.default=f},function(e,t,n){"use strict";e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(20),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(21),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(22),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(23),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(9),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(24),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,c=s&&s(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var d=s(n);d&&d!==c&&e(t,d,f)}var p=a(n);l&&(p=p.concat(l(n)));for(var h=0;h<p.length;++h){var m=p[h];if(!(r[m]||o[m]||f&&f[m])){var y=u(n,m);try{i(t,m,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(0)),l=n(13),u=f(n(60)),s=f(n(63)),c=f(n(64));f(n(94));function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(){return d(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){var e=this;return o("div",{},void 0,a.default.createElement(u.default,this.props),o(l.Route,{path:new RegExp("^(?:(?!/register|/login)).*$"),render:function(t){return a.default.createElement(s.default,Object.assign({},e.props,t))}}),o(l.Route,{path:new RegExp(".*"),render:function(t){return a.default.createElement(c.default,Object.assign({},e.props,t))}}))}}]),t}(a.default.Component);t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=u(n(0)),a=u(n(61)),l=u(n(62));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("div",{},void 0,o("h1",{},void 0," jaycar "),o("h2",{},void 0," a music database manager "));t.default=function(e){return o("header",{className:"main-header"},void 0,s,o("div",{className:"authentication-nav-wrap"},void 0,i.default.createElement(l.default,e)),o("div",{},void 0,i.default.createElement(a.default,e)))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=n(0),l=((o=a)&&o.__esModule,n(3));var u=i("nav",{class:"main-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,i(l.Link,{to:"/"},void 0,"Home")),i("li",{},void 0,i(l.Link,{to:"/collections"},void 0,"Collections")),i("li",{},void 0,i(l.Link,{to:"/recommendations"},void 0,"Recommendations")),i("li",{},void 0,i(l.Link,{to:"/friends"},void 0,"Friends"))));t.default=function(e){return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(o=l)&&o.__esModule?o:{default:o},s=n(3);function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=i("i",{className:"fas fa-user"}),p=i(s.Link,{to:"/login"},void 0,i("button",{},void 0,"Log in")),h=i(s.Link,{to:"/logout"},void 0,i("button",{},void 0,"Log out")),m=i(s.Link,{to:"/register"},void 0,i("button",{},void 0,"Register")),y=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.authentication.username;return i("nav",{class:"authentication-nav"},void 0,d,i("ul",{},void 0,i("li",{},void 0,null===e||"guest"===e||void 0===e?p:h),i("li",{},void 0,null===e||"guest"===e||void 0===e?m:"")),i("label",{className:"current-user-label"},void 0,null!=e&&""!==e&&"guest"!==e?i("span",{},void 0," Logged in as "+e):""))}}]),t}(u.default.Component);t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(o=l)&&o.__esModule?o:{default:o};n(13);var s=i("button",{type:"submit",id:"main-search-form-submit-button"},void 0,i("i",{className:"fas fa-search"})),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={searchQuery:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"handleSubmit",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.history.push("artistSearch?artistName="+this.state.searchQuery)}},{key:"handleChange",value:function(e){e.preventDefault(),e.stopPropagation(),this.setState({searchQuery:document.getElementById("main-search-form-text-input").value})}},{key:"render",value:function(){return i("form",{name:"mainSearchForm",id:"main-search-form",onSubmit:this.handleSubmit},void 0,i("div",{id:"main-search-widgets-container"},void 0,i("input",{type:"text",name:"mainSearchFormTextInput",id:"main-search-form-text-input",placeholder:"search artist name",onChange:this.handleChange}),s))}}]),t}(u.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=(n(13),u(n(65)));function u(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){return s(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){return o("div",{className:"wrap main-viewer-component-wrap"},void 0,a.default.createElement(l.default,this.props))}}]),t}(a.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=y(n(0)),a=n(3),l=y(n(66)),u=y(n(70)),s=y(n(76)),c=y(n(77)),f=y(n(78)),d=y(n(79)),p=y(n(84)),h=y(n(86)),m=y(n(90));function y(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o("div",{},void 0,o(a.Route,{path:"/login",render:function(t){return i.default.createElement(s.default,Object.assign({},e,t))}}),o(a.Route,{path:"/logout",render:function(t){return i.default.createElement(c.default,Object.assign({},e,t))}}),o(a.Route,{path:"/register",render:function(t){return i.default.createElement(f.default,Object.assign({},e,t))}}),o(a.Route,{path:"/artistSearch",render:function(t){return i.default.createElement(l.default,Object.assign({},e,t))}}),o(a.Route,{path:"/artistInfo",render:function(t){return i.default.createElement(u.default,Object.assign({},e,t))}}),o(a.Route,{path:"/collections",render:function(t){return i.default.createElement(h.default,Object.assign({},e,t))}}),o(a.Route,{path:"/collection",render:function(t){return i.default.createElement(m.default,Object.assign({},e,t))}}),o(a.Route,{path:"/favorites",render:function(t){return i.default.createElement(FavoritesViewer,Object.assign({},e,t))}}),o(a.Route,{path:"/friends",render:function(t){return i.default.createElement(d.default,Object.assign({},e,t))}}),o(a.Route,{path:"/recommendations",render:function(t){return i.default.createElement(p.default,Object.assign({},e,t))}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=c(n(1)),s=c(n(67));function c(e){return e&&e.__esModule?e:{default:e}}var f=i("span",{},void 0,i("i",{className:"fas fa-headphones"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistName:"",artistList:[]},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!=e&&""!==e){var n=/\?artistName=(.*)/.exec(e)[1];u.default.getArtistSearch(n).then((function(e){t.setState({artistName:n,artistList:e.artistList})}))}}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer artist-search-result-viewer"},void 0,i("div",{className:"panel"},void 0,i("h1",{},void 0,f,i("span",{},void 0,"Search for ",this.state.artistName)),i("ul",{},void 0,this.state.artistList.map((function(t){return i("li",{className:"item-card-wrap artist-search-result-tile-wrap"},void 0,l.default.createElement(s.default,o({},e.props,{key:t.id,artist:t})))})))))}}]),t}(l.default.Component);t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=s(n(26)),u=n(3);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){var e=this.props.artist;return a.default.createElement("div",{className:"item-card artist-search-result-tile",ref:this.componentRef},o("div",{className:"avatar-wrap"},void 0,o("div",{className:"image-wrap"},void 0,o(u.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,o("img",{className:"image",src:e.imageLargeUrl})))),o("div",{className:"card-content-wrap"},void 0,o("div",{className:"title"},void 0,o(u.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,e.artistName)),o("div",{className:"item-tools-nav-wrap"},void 0,a.default.createElement(l.default,this.props))))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0);var u=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.toolIconClassName,t=this.props.onSubmit,n=this.props.onMouseOver,r=this.props.onMouseOut,o=this.props.onFocus,a=this.props.onBlur;return i("form",{name:"tool-button-form",className:"tool-button-form",onSubmit:t},void 0,i("button",{type:"submit",className:"tool-button",onMouseOver:n,onMouseOut:r,onFocus:o,onBlur:a},void 0,i("i",{className:e})))}}]),t}(((o=l)&&o.__esModule?o:{default:o}).default.Component);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(o=l)&&o.__esModule?o:{default:o};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){return s(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.toolDialogComponent;return i("div",{className:"tool-dialog"},void 0,u.default.createElement(e,this.props))}}]),t}(u.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(0)),l=f(n(71)),u=f(n(72)),s=f(n(74)),c=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var d=o("h1",{},void 0," Bio "),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistInfo:{artistName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:"",bioContent:""}},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!=e&&""!==e){var n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");c.default.getArtistInfo(n).then((function(e){t.setState({artistInfo:e})}))}}},{key:"render",value:function(){var e=this.state.artistInfo;this.state.similarArtists;return o("div",{className:"artist-info-wrap"},void 0,o("header",{},void 0,o("h1",{},void 0," ",e.artistName," "),o("div",{className:"artist-image-wrap"},void 0,o("img",{className:"artist-image",src:e.imageLargeUrl,alt:e.artistName}))),o("section",{className:"similar-artists"},void 0,a.default.createElement(u.default,this.props)),o("section",{className:"artist-albums"},void 0,a.default.createElement(s.default,this.props)),o("section",{className:"artist-bio"},void 0,d,l.default.parseArticleStringToJSX(e.bioContent,"\n")))}}]),t}(a.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}});t.default={parseArticleStringToJSX:function(e,t){t=void 0===t?"/n":t;var n=/<a\s.*href=(.*)>(.*)<\/a>/,r=e.split(t);return o("article",{},void 0,r.map((function(e){if(""!=e){var t=e.match(n);return null!=t?o("a",{href:t[1]},void 0," ",t[2]," "):o("p",{},void 0," ",e," ")}})))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=f(n(0)),u=f(n(73)),s=f(n(1)),c=n(3);function f(e){return e&&e.__esModule?e:{default:e}}var d=i("h1",{},void 0," Similar Artists "),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={similarArtists:{artistList:[{artistName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:""}]}},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this,n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");s.default.getSimilarArtists(n).then((function(e){t.setState({similarArtists:e})}))}},{key:"render",value:function(){var e=this;return i("div",{className:"similar-artists-container"},void 0,d,i("ul",{},void 0,this.state.similarArtists.artistList.map((function(t){return i("li",{},void 0,i(c.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,l.default.createElement(u.default,o({artist:t},e.props))))}))))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(o=l)&&o.__esModule?o:{default:o};var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleMouseOver=n.handleMouseOver.bind(n),n.handleMouseOut=n.handleMouseOut.bind(n),n.componentRef=u.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"handleMouseOver",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".artist-name");t.classList.remove("hidden"),t.classList.add("visible")}},{key:"handleMouseOut",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".artist-name");t.classList.remove("visible"),t.classList.add("hidden")}},{key:"render",value:function(){return u.default.createElement("div",{className:"similar-artist-tile",ref:this.componentRef},i("div",{className:"artist-image-wrap",onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut},void 0,i("img",{className:"artist-image",src:this.props.artist.imageMediumUrl})),i("div",{className:"artist-name hidden"},void 0,this.props.artist.artistName))}}]),t}(u.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=s(n(75)),u=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=o("h1",{},void 0," Top Albums "),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistAlbums:{albumList:[{albumName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:"",artist:{artistName:""},tags:[]}]}},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this,n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");u.default.getArtistAlbums(n).then((function(e){t.setState({artistAlbums:e})}))}},{key:"render",value:function(){return o("div",{id:"artist-albums-wrap"},void 0,c,o("ul",{className:"albums-list"},void 0,this.state.artistAlbums.albumList.map((function(e){return o("li",{},void 0,o(l.default,{album:e}))}))))}}]),t}(a.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){return u(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.album,t=void 0!==e.imageLargeUrl?e.imageLargeUrl:void 0!==e.imageMediumUrl?e.imageMediumUrl:void 0!==e.imageSmallUrl?e.imageSmallUrl:"";return i("div",{className:"artist-albums-tile"},void 0,i("h1",{},void 0," ",e.albumName," "),i("img",{src:t,alt:""}))}}]),t}(((o=l)&&o.__esModule?o:{default:o}).default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(7));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("input",{type:"submit",value:"Login"}),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={loginForm:{username:"",password:""},serverResponseBody:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),l.default.login(this.state.loginForm.username,this.state.loginForm.password).then((function(){t.props.getCurrentUser(),t.props.history.push("/")})).catch((function(e){e.text().then((function(e){t.setState({serverResponseBody:e})}))}))}},{key:"handleChange",value:function(e){var t=document.getElementById("login-form");this.setState({loginForm:{username:t.elements.username.value,password:t.elements.password.value}})}},{key:"render",value:function(){return o("div",{},void 0,o("form",{name:"login-form",id:"login-form",className:"auth-form",onSubmit:this.handleSubmit},void 0,o("input",{type:"text",name:"username",placeholder:"Username",onChange:this.handleChange}),o("input",{type:"password",name:"password",placeholder:"Password",onChange:this.handleChange}),s),o("div",{className:"server-response-message"},void 0," ",this.state.serverResponseBody," "))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(7));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("div",{}),c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"componentDidMount",value:function(){l.default.logout(),this.props.getCurrentUser(),this.props.history.push("/")}},{key:"render",value:function(){return s}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(7));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("input",{type:"submit",value:"Register"}),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={registrationForm:{username:"",email:"",password:"",confirmPassword:""},serverResponseBody:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=this.state.registrationForm;l.default.register(n.username,n.email,n.password).then((function(){t.props.getCurrentUser(),t.props.history.push("/")})).catch((function(e){e.text().then((function(e){t.setState({serverResponseBody:e})}))}))}},{key:"handleChange",value:function(e){var t=document.getElementById("registration-form");this.setState({registrationForm:{username:t.elements.username.value,email:t.elements.email.value,password:t.elements.password.value,confirmPassword:t.elements["confirm-password"].value}})}},{key:"render",value:function(){return o("div",{},void 0,o("form",{name:"registration-form",id:"registration-form",className:"auth-form",onSubmit:this.handleSubmit},void 0,o("input",{type:"text",name:"username",placeholder:"Username",onChange:this.handleChange}),o("input",{type:"email",name:"email",placeholder:"Email",onChange:this.handleChange}),o("input",{type:"password",name:"password",placeholder:"Password",onChange:this.handleChange}),o("input",{type:"password",name:"confirm-password",placeholder:"Confirm Password",onChange:this.handleChange}),s),o("div",{className:"server-response-message"},void 0," ",this.state.serverResponseBody," "))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=s(n(80)),u=s(n(82));s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=o("h1",{},void 0,o("span",{},void 0,o("i",{className:"fas fa-users"})),o("span",{},void 0,"Friends")),p=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){return o("div",{className:"viewer friends-viewer"},void 0,o("div",{className:"panel"},void 0,d,a.default.createElement(l.default,this.props),a.default.createElement(u.default,this.props)))}}]),t}(a.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=f(n(0)),u=f(n(81)),s=f(n(30)),c=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var d=i("div",{},void 0," Search results: "),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={userList:[]},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!=e&&""!==e){var n=/\?username=(.*)/.exec(e)[1];c.default.getUserSearch(n).then((function(e){t.setState({userList:e})}))}}},{key:"render",value:function(){var e=this,t=this.props.friends.map((function(e){return e.username}));return i("div",{className:"viewer user-search-viewer"},void 0,l.default.createElement(u.default,this.props),i("ul",{className:"user-list user-search-results"},void 0,null!==this.state.userList&&this.state.userList.length>0?i("div",{},void 0,d,this.state.userList.map((function(n){var r=t.includes(n.username);return i("li",{className:"user-tile-wrap"},void 0,l.default.createElement(s.default,o({},e.props,{user:n,isFriend:r})))}))):"No results"))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0));l(n(30)),l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var u=o("button",{type:"submit"},void 0,o("i",{className:"fas fa-search"})),s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={query:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current;this.setState({query:t.elements["user-search-query"].value})}},{key:"handleSubmit",value:function(e){e.preventDefault(),this.props.history.push("friends?username="+this.state.query)}},{key:"render",value:function(){return a.default.createElement("form",{name:"user-search-form",className:"user-search-form panel-form",onSubmit:this.handleSubmit,ref:this.componentRef},o("input",{type:"text",name:"user-search-query",className:"user-search-query",placeholder:"Search for users",onChange:this.handleChange}),u)}}]),t}(a.default.Component);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=s(n(0)),u=s(n(83));s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=i("h1",{},void 0," My friends: "),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverResponse:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.getFriends()}},{key:"render",value:function(){var e=this;return i("div",{className:"my-friends-viewer"},void 0,i("ul",{className:"user-list"},void 0,null!==this.props.friends&&this.props.friends.length>0?i("div",{},void 0,c,this.props.friends.map((function(t){return i("li",{className:"user-tile-wrap"},void 0,l.default.createElement(u.default,o({},e.props,{friend:t})))}))):""))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(o=l)&&o.__esModule?o:{default:o};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=i("div",{className:"icon-wrap"},void 0,i("i",{className:"fas fa-user"})),d=i("div",{},void 0),p=function(e){function t(){return s(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.friend;return i("div",{className:"user-tile friend-tile"},void 0,i("div",{className:"user-info"},void 0,f,i("div",{className:"username"},void 0,e.username),d))}}]),t}(u.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=s(n(0)),u=s(n(85));function s(e){return e&&e.__esModule?e:{default:e}}var c=i("h1",{},void 0,i("span",{},void 0,i("i",{className:"fas fa-paper-plane"})),i("span",{},void 0,"Recommendations")),f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.getRecommendations()}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer recommendations-viewer"},void 0,i("div",{className:"panel"},void 0,c,i("ul",{className:"recommendations-list"},void 0,null!==this.props.recommendations&&void 0!==this.props.recommendations&&this.props.recommendations.length>0?this.props.recommendations.map((function(t){return i("li",{className:"item-card-wrap"},void 0,l.default.createElement(u.default,o({},e.props,{recommendation:t})))})):"You have no recommendations")))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=n(3),s=c(n(26));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.recommendation,t=e.artist;return l.default.createElement("div",{className:"item-card recommendation-tile",ref:this.componentRef},i("div",{className:"avatar-wrap"},void 0,i("div",{className:"image-wrap"},void 0,i(u.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,i("img",{className:"image",src:t.imageLargeUrl})))),i("div",{className:"card-content-wrap"},void 0,i("div",{className:"title"},void 0,i(u.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,t.artistName)),i("div",{className:"item-tools-nav-wrap"},void 0,l.default.createElement(s.default,o({},this.props,{artist:t}))),i("div",{className:"recommended-by"},void 0,"Recommended by ",e.recommender.username)))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=c(n(87)),s=(c(n(7)),c(n(1)));n(3);function c(e){return e&&e.__esModule?e:{default:e}}var f=i("h1",{},void 0,i("span",{},void 0,i("i",{className:"far fa-list-alt"})),i("span",{},void 0,"Collections")),d=i("button",{type:"submit"},void 0,i("i",{class:"fas fa-plus"})),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={collectionName:"",serverMessage:""},n.handleNewCollectionChange=n.handleNewCollectionChange.bind(n),n.handleNewCollectionSubmit=n.handleNewCollectionSubmit.bind(n),n.componentRef=l.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"handleNewCollectionSubmit",value:function(e){var t=this;e.preventDefault(),s.default.createArtistCollection(this.state.collectionName).then((function(e){t.setState({serverMessage:""}),e.json().then((function(e){t.props.setArtistCollections(e)}))})).catch((function(e){409===e.status?t.setState({serverMessage:"Collection with this name already exists"}):t.setState({serverMessage:""})}))}},{key:"handleNewCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".new-collection-form").elements["new-collection-name"].value;this.setState({collectionName:t})}},{key:"componentDidMount",value:function(){this.props.getArtistCollections()}},{key:"render",value:function(){var e=this,t=this.props.artistCollections;return l.default.createElement("div",{className:"viewer collections-viewer",ref:this.componentRef},i("div",{className:"panel collections-panel"},void 0,f,i("form",{name:"new-collection-form",className:"new-collection-form",onSubmit:this.handleNewCollectionSubmit},void 0,i("input",{type:"text",name:"new-collection-name",placeholder:"create new collection",onChange:this.handleNewCollectionChange}),d),i("ul",{},void 0,null!=t&&t.length>0?t.map((function(t){var n="/collection?collectionName="+t.collectionName;return i("li",{className:"item-card-wrap"},void 0,l.default.createElement(u.default,o({},e.props,{collection:t,link:n})))})):"")))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=c(n(88)),s=n(3);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){var e=this.props.collection,t=this.props.link,n=null!==e.artistListEntries&&void 0!==e.artistListEntries&&e.artistListEntries.length>0?e.artistListEntries[0].artist.imageLargeUrl:"",r=null!==e.artistListEntries&&void 0!==e.artistListEntries&&e.artistListEntries.length>0?e.artistListEntries.length:void 0;return i("div",{className:"item-card collection-tile"},void 0,i("div",{className:"avatar-wrap"},void 0,""!==n?i(s.Link,{to:t},void 0,i("div",{className:"image-wrap"},void 0,i("img",{className:"image",src:n}))):""),i("div",{className:"card-content-wrap"},void 0,i("div",{className:"title"},void 0,i(s.Link,{to:t},void 0,i("span",{},void 0,e.collectionName),i("span",{},void 0,void 0!==r?1===r?"(1 item)":"("+r+" items)":"(0 items)"))),i("div",{className:"info"},void 0,void 0!==e.artistListEntries&&null!==e.artistListEntries&&e.artistListEntries.length>0?i("span",{},void 0,"includes: ",i("span",{},void 0,e.artistListEntries[0].artist.artistName+e.artistListEntries.slice(1,4).map((function(e){return", "+e.artist.artistName})))):""),i("div",{className:"item-tools-nav-wrap"},void 0,l.default.createElement(u.default,o({},this.props,{collection:e})))))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=c(n(0)),u=c(n(14)),s=c(n(89));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){return i("nav",{className:"item-tools-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,l.default.createElement(u.default,o({},this.props,{toolLabel:"Delete collection",toolIconClassName:"fas fa-minus-square",toolDialogComponent:s.default})))))}}]),t}(l.default.Component);t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("fieldset",{},void 0,o("label",{},void 0," Really delete? "),o("button",{type:"submit",className:"submit red-button"},void 0,"Delete")),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverMessage:""},n.handleCloseDialogSubmit=n.handleCloseDialogSubmit.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.deleteCollection=n.deleteCollection.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),this.deleteCollection(this.props.collection.collectionName).then((function(e){return t.setState({serverMessage:""}),t.props.closeDialog()})).catch((function(e){return e.text().then((function(e){t.setState({serverMessage:e})}))}))}},{key:"deleteCollection",value:function(e){var t=this;return new Promise((function(n,r){l.default.deleteArtistCollection(e).then((function(e){return t.props.setArtistCollections(e),n(e)})).catch((function(e){return r(e)}))}))}},{key:"render",value:function(){this.props.collection;return a.default.createElement("div",{ref:this.componentRef,className:"delete-collection-dialog"},o("form",{name:"delete-collection-form",className:"delete-collection-form",onSubmit:this.handleSubmit},void 0,s))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=f(n(0)),u=n(3),s=f(n(91)),c=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var d=i(u.Link,{to:"/collections"},void 0,i("span",{},void 0,i("i",{className:"fas fa-arrow-left"})),i("span",{},void 0,"Return to collections")),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={collectionName:"",collectionEntries:[{artist:{}}]},n.getData=n.getData.bind(n),n.setCollectionData=n.setCollectionData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!=e&&""!==e){var n=/\?collectionName=(.*)/.exec(e)[1];this.setState({collectionName:n}),c.default.getArtistCollection(n).then((function(e){t.setState({collectionEntries:e})}))}}},{key:"setCollectionData",value:function(e){this.setState({collectionEntries:e})}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer collection-viewer"},void 0,i("div",{className:"panel"},void 0,d,i("h1",{},void 0," ",this.state.collectionName," collection "),i("ul",{},void 0,null!==this.state.collectionEntries&&void 0!==this.state.collectionEntries&&this.state.collectionEntries.length>0?this.state.collectionEntries.map((function(t){return i("li",{className:"collection-entry"},void 0,l.default.createElement(s.default,o({},e.props,{artist:t.artist,collectionName:e.state.collectionName,setCollectionData:e.setCollectionData})))})):"Collection is empty")))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=s(n(92)),u=n(3);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"render",value:function(){var e=this.props.artist;return a.default.createElement("div",{className:"item-card artist-search-result-tile",ref:this.componentRef},o("div",{className:"avatar-wrap"},void 0,o("div",{className:"image-wrap"},void 0,o(u.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,o("img",{className:"image",src:e.imageLargeUrl})))),o("div",{className:"card-content-wrap"},void 0,o("div",{className:"title"},void 0,o(u.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,e.artistName)),o("div",{className:"item-tools-nav-wrap"},void 0,a.default.createElement(l.default,this.props))))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=d(n(0)),u=d(n(14)),s=d(n(93)),c=d(n(28)),f=d(n(29));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"render",value:function(){return console.log("Liked artists in nav: "+this.props.likedArtists),i("nav",{className:"item-tools-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,l.default.createElement(u.default,o({},this.props,{toolLabel:"Remove from collection",toolIconClassName:"fas fa-minus",toolDialogComponent:s.default}))),i("li",{},void 0,l.default.createElement(f.default,o({},this.props,{bob:this.props.likedArtists}))),i("li",{},void 0,l.default.createElement(u.default,o({},this.props,{toolLabel:"Recommend to a friend",toolIconClassName:"fas fa-user",toolDialogComponent:c.default})))))}}]),t}(l.default.Component);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var l in i)void 0===t[l]&&(t[l]=i[l]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var u=Array(a),s=0;s<a;s++)u[s]=arguments[s+3];t.children=u}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=o("fieldset",{},void 0,o("label",{},void 0," Really remove? "),o("button",{type:"submit",className:"submit red-button"},void 0,"Remove")),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverMessage:""},n.handleCloseDialogSubmit=n.handleCloseDialogSubmit.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.removeArtistFromCollection=n.removeArtistFromCollection.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),this.removeArtistFromCollection(this.props.collectionName,this.props.artist.artistName).then((function(e){return t.setState({serverMessage:""}),t.props.closeDialog()})).catch((function(e){return e.text().then((function(e){t.setState({serverMessage:e})}))}))}},{key:"removeArtistFromCollection",value:function(e,t){var n=this;return new Promise((function(r,o){l.default.removeArtistFromCollection(e,t).then((function(e){return n.props.setCollectionData(e),r(e)})).catch((function(e){return o(e)}))}))}},{key:"render",value:function(){this.props.collection;return a.default.createElement("div",{ref:this.componentRef,className:"remove-artist-from-collection-dialog"},o("form",{name:"remove-artist-from-collection-form",className:"remove-artist-from-collection-form",onSubmit:this.handleSubmit},void 0,s),o("div",{className:"server-response-message"},void 0,this.state.serverMessage))}}]),t}(a.default.Component);t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0)),i=a(n(95));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.initComponent=n.initComponent.bind(n),n.state={animationComponents:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"initComponent",value:function(e){var t=this,n={maxOpacity:.1,primaryHue:Math.floor(255*Math.random()),centralAxis:100};this.setState({animationComponents:[new i.default(e,n),new i.default(e,n)]}),window.addEventListener("resize",(function(){window.requestAnimationFrame((function(){t.state.animationComponents.forEach((function(e){e.init(n)}))}))}))}},{key:"render",value:function(){var e=this.state.animationComponents;return this.props.applicationState===ApplicationStateTypes.SEARCH_RESULT&&e.forEach((function(e){e.setAnimationState(2)})),o.default.createElement("svg",{ref:this.initComponent,style:{position:"absolute",left:0,right:0,width:"100%",height:"100%",overflow:"hidden",zIndex:-1e3}})}}]),t}(o.default.Component);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=n(96),i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);n=n||{},this.snp=new o(t),this.animationState=0,this.container=t,this.init(n),this.animateTravelingWave()}return r(e,[{key:"init",value:function(e){var t=this;this.numSegments=void 0!==e.numSegments?e.numSegments:20,this.segmentWidth=this.container.clientWidth/this.numSegments,this.segments=[],this.driver={x:0,y:0,v:void 0!==e.velocity?e.velocity:void 0!==e.v?e.v:.5},this.waveHeight=void 0!==e.waveHeight?e.waveHeight:400,this.primaryHue=void 0!==e.primaryHue?e.primaryHue:210,this.maxOpacity=void 0!==e.maxOpacity?e.maxOpacity:1,this.centralAxis=void 0!==e.centralAxis?e.centralAxis:this.container.clientHeight/2,this.segments=function(){for(var e=[],n=0;n<t.numSegments;n++){var r=n*t.segmentWidth,o=t.centralAxis/2+Math.sin(r/200)*t.container.clientHeight/2,i=t.snp.rect(r,o,t.segmentWidth,0);i.attr({fill:"hsl("+t.primaryHue+", 100, 50)",opacity:0}),i.isAvailable=!0,i.ox=r,i.oy=o,e.push(i)}return e}(),t.setAnimationState(1),t.runAnimationDriver()}},{key:"resetWavePath",value:function(e){var t=this;(e=e||{}).minFreq=void 0!==e.minFreq?e.minFreq:0,e.maxFreq=void 0!==e.maxFreq?e.maxFreq:200,e.minAmp=void 0!==e.minAmp?e.minAmp:0,e.maxAmp=void 0!==e.maxAmp?e.maxAmp:t.container.clientHeight/2;var n=Math.random()*(e.maxFreq-e.minFreq)+e.minFreq;n=Math.ceil(n);var r=Math.random()*(e.maxAmp-e.minAmp)+e.minAmp;r=Math.floor(r),this.segments.forEach((function(e){e.oy=t.centralAxis+Math.sin(e.ox/n)*r}))}},{key:"runAnimationDriver",value:function(){var e=this,t=!0,n=void 0,r=void 0;t?(e.driver.x=Date.now()%(e.container.clientWidth/e.driver.v)*e.driver.v,e.draw(),e.driver.x>e.container.clientWidth-5&&(t=!1,r=Math.floor(5e3*Math.random()),n=Date.now(),e.resetWavePath())):Date.now()>n+r&&(t=!0),window.requestAnimationFrame((function(){e.runAnimationDriver()}))}},{key:"draw",value:function(){switch(this.animationState){case 0:break;case 1:this.animateTravelingWave();break;case 2:this.animateShimmer()}}},{key:"setAnimationState",value:function(e){switch(e){case 1:this.setAllAvailable(!0),this.setAllOpacity(0);break;case 2:this.setAllAvailable(!0),this.lineUpHorizontally(0,this.container.clientHeight)}this.animationState=e}},{key:"setAllAvailable",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.segments.forEach((function(t){t.isAvailable=e}))}},{key:"setAllOpacity",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this.segments.forEach((function(t){t.attr({opacity:e})}))}},{key:"animateTravelingWave",value:function(){var e=this;e.segments.forEach((function(t){t.isAvailable&&Math.abs(e.driver.x-t.attr().x)<10&&(t.attr({y:t.oy}),function(t){t.isAvailable=!1,t.animate({height:e.waveHeight,y:t.oy-e.waveHeight/2,opacity:e.maxOpacity},500,mina.easein,(function(){!function(e){e.animate({height:0,y:e.oy,opacity:0},1e3,mina.easeout,(function(){e.isAvailable=!0}))}(t)}))}(t))}))}},{key:"lineUpHorizontally",value:function(e,t){var n=this;e=void 0!==e?e:0,t=void 0!==t?t:1,n.segments.forEach((function(r){r.stop(),r.oy=e,r.oheight=t,r.animate({y:r.oy,height:r.oheight,opacity:n.maxOpacity},1e3,mina.elastic)}))}},{key:"animateRain",value:function(){var e=this;e.segments.forEach((function(t){t.isAvailable&&e.driver.x>t.attr().x&&function(t){t.isAvailable=!1,t.animate({y:e.container.clientHeight,height:100,opacity:0},5e3*Math.random()+2e3,mina.easeout,(function(){t.attr({y:t.oheight,opacity:.1,height:t.oheight}),t.isAvailable=!0}))}(t)}))}},{key:"animateShimmer",value:function(){var e=this;e.segments.forEach((function(t){t.isAvailable&&Math.abs(e.driver.x-t.attr().x)<10&&(t.isAvailable=!1,function(e){e.animate({opacity:.01},1e3,mina.linear,(function(){!function(e){e.animate({opacity:.2},1e3,mina.linear,(function(){e.isAvailable=!0}))}(e)}))}(t))}))}}]),e}();t.default=i},function(e,t,n){var r,o;(function(){e.exports=0;var n,i,a,l,u,s,c,f,d,p,h,m,y,v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};a="hasOwnProperty",l=/[\.\/]/,u=/\s*,\s*/,s=function(e,t){return e-t},c={n:{}},f=function(){for(var e=0,t=this.length;e<t;e++)if(void 0!==this[e])return this[e]},d=function(){for(var e=this.length;--e;)if(void 0!==this[e])return this[e]},p=Object.prototype.toString,h=String,m=Array.isArray||function(e){return e instanceof Array||"[object Array]"==p.call(e)},eve=function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){var r,o=i,a=Array.prototype.slice.call(arguments,2),l=eve.listeners(e),u=0,c=[],p={},h=[],m=n;h.firstDefined=f,h.lastDefined=d,n=e,i=0;for(var y=0,v=l.length;y<v;y++)"zIndex"in l[y]&&(c.push(l[y].zIndex),l[y].zIndex<0&&(p[l[y].zIndex]=l[y]));for(c.sort(s);c[u]<0;)if(r=p[c[u++]],h.push(r.apply(t,a)),i)return i=o,h;for(y=0;y<v;y++)if("zIndex"in(r=l[y]))if(r.zIndex==c[u]){if(h.push(r.apply(t,a)),i)break;do{if((r=p[c[++u]])&&h.push(r.apply(t,a)),i)break}while(r)}else p[r.zIndex]=r;else if(h.push(r.apply(t,a)),i)break;return i=o,n=m,h})),eve._events=c,eve.listeners=function(e){var t,n,r,o,i,a,u,s,f=m(e)?e:e.split(l),d=c,p=[d],h=[];for(o=0,i=f.length;o<i;o++){for(s=[],a=0,u=p.length;a<u;a++)for(n=[(d=p[a].n)[f[o]],d["*"]],r=2;r--;)(t=n[r])&&(s.push(t),h=h.concat(t.f||[]));p=s}return h},eve.separator=function(e){e?(e="["+(e=h(e).replace(/(?=[\.\^\]\[\-])/g,"\\"))+"]",l=new RegExp(e)):l=/[\.\/]/},eve.on=function(e,t){if("function"!=typeof t)return function(){};for(var n=m(e)?m(e[0])?e:[e]:h(e).split(u),r=0,o=n.length;r<o;r++)!function(e){for(var n,r=m(e)?e:h(e).split(l),o=c,i=0,a=r.length;i<a;i++)o=(o=o.n).hasOwnProperty(r[i])&&o[r[i]]||(o[r[i]]={n:{}});for(o.f=o.f||[],i=0,a=o.f.length;i<a;i++)if(o.f[i]==t){n=!0;break}!n&&o.f.push(t)}(n[r]);return function(e){+e==+e&&(t.zIndex=+e)}},eve.f=function(e){var t=[].slice.call(arguments,1);return function(){eve.apply(null,[e,null].concat(t).concat([].slice.call(arguments,0)))}},eve.stop=function(){i=1},eve.nt=function(e){var t=m(n)?n.join("."):n;return e?new RegExp("(?:\\.|\\/|^)"+e+"(?:\\.|\\/|$)").test(t):t},eve.nts=function(){return m(n)?n:n.split(l)},eve.off=eve.unbind=function(e,t){if(e){var n=m(e)?m(e[0])?e:[e]:h(e).split(u);if(n.length>1)for(var r=0,o=n.length;r<o;r++)eve.off(n[r],t);else{n=m(e)?e:h(e).split(l);var i,s,f,d,p,y=[c],v=[];for(r=0,o=n.length;r<o;r++)for(d=0;d<y.length;d+=f.length-2){if(f=[d,1],i=y[d].n,"*"!=n[r])i[n[r]]&&(f.push(i[n[r]]),v.unshift({n:i,name:n[r]}));else for(s in i)i[a](s)&&(f.push(i[s]),v.unshift({n:i,name:s}));y.splice.apply(y,f)}for(r=0,o=y.length;r<o;r++)for(i=y[r];i.n;){if(t){if(i.f){for(d=0,p=i.f.length;d<p;d++)if(i.f[d]==t){i.f.splice(d,1);break}!i.f.length&&delete i.f}for(s in i.n)if(i.n[a](s)&&i.n[s].f){var g=i.n[s].f;for(d=0,p=g.length;d<p;d++)if(g[d]==t){g.splice(d,1);break}!g.length&&delete i.n[s].f}}else for(s in delete i.f,i.n)i.n[a](s)&&i.n[s].f&&delete i.n[s].f;i=i.n}e:for(r=0,o=v.length;r<o;r++){for(s in(i=v[r]).n[i.name].f)continue e;for(s in i.n[i.name].n)continue e;delete i.n[i.name]}}}else eve._events=c={n:{}}},eve.once=function(e,t){return eve.on(e,(function n(){return eve.off(e,n),t.apply(this,arguments)}))},eve.version="0.5.0",eve.toString=function(){return"You are running Eve 0.5.0"},e.exports?e.exports=eve:r=function(){return eve}.apply(t,[]),y=window||void 0,void 0===(o=function(e){return function(e,t){var n=function(t){var n,r={},o=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){return setTimeout(e,16,(new Date).getTime()),!0},i=Array.isArray||function(e){return e instanceof Array||"[object Array]"==Object.prototype.toString.call(e)},a=0,l="M"+(+new Date).toString(36),u=Date.now||function(){return+new Date},s=function(e){var t=this;if(null==e)return t.s;var n=t.s-e;t.b+=t.dur*n,t.B+=t.dur*n,t.s=e},c=function(e){if(null==e)return this.spd;this.spd=e},f=function(e){var t=this;if(null==e)return t.dur;t.s=t.s*e/t.dur,t.dur=e},d=function(){var e=this;delete r[e.id],e.update(),t("mina.stop."+e.id,e)},p=function(){var e=this;e.pdif||(delete r[e.id],e.update(),e.pdif=e.get()-e.b)},h=function(){var e=this;e.pdif&&(e.b=e.get()-e.pdif,delete e.pdif,r[e.id]=e,y())},m=function(){var e,t=this;if(i(t.start)){e=[];for(var n=0,r=t.start.length;n<r;n++)e[n]=+t.start[n]+(t.end[n]-t.start[n])*t.easing(t.s)}else e=+t.start+(t.end-t.start)*t.easing(t.s);t.set(e)},y=function e(i){if(i){var a=0;for(var l in r)if(r.hasOwnProperty(l)){var u=r[l],s=u.get();a++,u.s=(s-u.b)/(u.dur/u.spd),u.s>=1&&(delete r[l],u.s=1,a--,function(e){setTimeout((function(){t("mina.finish."+e.id,e)}))}(u)),u.update()}n=!!a&&o(e)}else n||(n=o(e))},v=function e(t,n,o,i,u,v,g){var b={id:l+(a++).toString(36),start:t,end:n,b:o,s:0,dur:i-o,spd:1,get:u,set:v,easing:g||e.linear,status:s,speed:c,duration:f,stop:d,pause:p,resume:h,update:m};r[b.id]=b;var w,x=0;for(w in r)if(r.hasOwnProperty(w)&&2==++x)break;return 1==x&&y(),b};return v.time=u,v.getById=function(e){return r[e]||null},v.linear=function(e){return e},v.easeout=function(e){return Math.pow(e,1.7)},v.easein=function(e){return Math.pow(e,.48)},v.easeinout=function(e){if(1==e)return 1;if(0==e)return 0;var t=.48-e/1.04,n=Math.sqrt(.1734+t*t),r=n-t,o=-n-t,i=Math.pow(Math.abs(r),1/3)*(r<0?-1:1)+Math.pow(Math.abs(o),1/3)*(o<0?-1:1)+.5;return 3*(1-i)*i*i+i*i*i},v.backin=function(e){if(1==e)return 1;var t=1.70158;return e*e*((t+1)*e-t)},v.backout=function(e){if(0==e)return 0;var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},v.elastic=function(e){return e==!!e?e:Math.pow(2,-10*e)*Math.sin((e-.075)*(2*Math.PI)/.3)+1},v.bounce=function(e){var t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},e.mina=v,v}(void 0===t?function(){}:t),r=function(e){function n(e,t){if(e){if(e.nodeType)return Q(e);if(A(e,"array")&&n.set)return n.set.apply(n,e);if(e instanceof H)return e;if(null==t)return Q(e=r.doc.querySelector(String(e)))}return new G(e=null==e?"100%":e,t=null==t?"100%":t)}n.version="0.5.1",n.toString=function(){return"Snap v"+this.version},n._={};var r={win:e.window,doc:e.window.document};n._.glob=r;var o,i,a="hasOwnProperty",l=String,u=parseFloat,s=parseInt,c=Math,f=c.max,d=c.min,p=c.abs,h=(c.pow,c.PI),m=(c.round,Object.prototype.toString),y=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,b=(n._.separator=/[,\s]+/,/[\s]*,[\s]*/),w={hs:1,rg:1},x=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,_=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,S=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,k=0,E="S"+(+new Date).toString(36),C=function(e){return(e&&e.type?e.type:"")+E+(k++).toString(36)},O="http://www.w3.org/1999/xlink",T="http://www.w3.org/2000/svg",P={};function j(e,t){if(t){if("#text"==e&&(e=r.doc.createTextNode(t.text||t["#text"]||"")),"#comment"==e&&(e=r.doc.createComment(t.text||t["#text"]||"")),"string"==typeof e&&(e=j(e)),"string"==typeof t)return 1==e.nodeType?"xlink:"==t.substring(0,6)?e.getAttributeNS(O,t.substring(6)):"xml:"==t.substring(0,4)?e.getAttributeNS(T,t.substring(4)):e.getAttribute(t):"text"==t?e.nodeValue:null;if(1==e.nodeType){for(var n in t)if(t[a](n)){var o=l(t[n]);o?"xlink:"==n.substring(0,6)?e.setAttributeNS(O,n.substring(6),o):"xml:"==n.substring(0,4)?e.setAttributeNS(T,n.substring(4),o):e.setAttribute(n,o):e.removeAttribute(n)}}else"text"in t&&(e.nodeValue=t.text)}else e=r.doc.createElementNS(T,e);return e}function A(e,t){return"finite"==(t=l.prototype.toLowerCase.call(t))?isFinite(e):!("array"!=t||!(e instanceof Array||Array.isArray&&Array.isArray(e)))||"null"==t&&null===e||t==(void 0===e?"undefined":v(e))&&null!==e||"object"==t&&e===Object(e)||m.call(e).slice(8,-1).toLowerCase()==t}function R(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return e.push(e.splice(n,1)[0])}function N(e,t,n){return function r(){var o=Array.prototype.slice.call(arguments,0),i=o.join("␀"),l=r.cache=r.cache||{},u=r.count=r.count||[];return l[a](i)?(R(u,i),n?n(l[i]):l[i]):(u.length>=1e3&&delete l[u.shift()],u.push(i),l[i]=e.apply(t,o),n?n(l[i]):l[i])}}function F(e){return e%360*h/180}n.url=function(e){return"url('#"+e+"')"},n._.$=j,n._.id=C,n.format=(o=/\{([^\}]+)\}/g,i=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,function(e,t){return l(e).replace(o,(function(e,n){return function(e,t,n){var r=n;return t.replace(i,(function(e,t,n,o,i){t=t||o,r&&(t in r&&(r=r[t]),"function"==typeof r&&i&&(r=r()))})),r=(null==r||r==n?e:r)+""}(e,n,t)}))}),n._.clone=function e(t){if("function"==typeof t||Object(t)!==t)return t;var n=new t.constructor;for(var r in t)t[a](r)&&(n[r]=e(t[r]));return n},n._.cacher=N,n.rad=F,n.deg=function(e){return 180*e/h%360},n.sin=function(e){return c.sin(n.rad(e))},n.tan=function(e){return c.tan(n.rad(e))},n.cos=function(e){return c.cos(n.rad(e))},n.asin=function(e){return n.deg(c.asin(e))},n.acos=function(e){return n.deg(c.acos(e))},n.atan=function(e){return n.deg(c.atan(e))},n.atan2=function(e){return n.deg(c.atan2(e))},n.angle=function e(t,n,r,o,i,a){if(null==i){var l=t-r,u=n-o;return l||u?(180+180*c.atan2(-u,-l)/h+360)%360:0}return e(t,n,i,a)-e(r,o,i,a)},n.len=function(e,t,r,o){return Math.sqrt(n.len2(e,t,r,o))},n.len2=function(e,t,n,r){return(e-n)*(e-n)+(t-r)*(t-r)},n.closestPoint=function(e,t,n){function r(e){var r=e.x-t,o=e.y-n;return r*r+o*o}for(var o,i,a,l,u=e.node,s=u.getTotalLength(),c=s/u.pathSegList.numberOfItems*.125,f=1/0,d=0;d<=s;d+=c)(l=r(a=u.getPointAtLength(d)))<f&&(o=a,i=d,f=l);for(c*=.5;c>.5;){var p,h,m,y,v,g;(m=i-c)>=0&&(v=r(p=u.getPointAtLength(m)))<f?(o=p,i=m,f=v):(y=i+c)<=s&&(g=r(h=u.getPointAtLength(y)))<f?(o=h,i=y,f=g):c*=.5}return o={x:o.x,y:o.y,length:i,distance:Math.sqrt(f)}},n.is=A,n.snapTo=function(e,t,n){if(n=A(n,"finite")?n:10,A(e,"array")){for(var r=e.length;r--;)if(p(e[r]-t)<=n)return e[r]}else{var o=t%(e=+e);if(o<n)return t-o;if(o>e-n)return t-o+e}return t},n.getRGB=N((function(e){if(!e||(e=l(e)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:I};if("none"==e)return{r:-1,g:-1,b:-1,hex:"none",toString:I};if(!w[a](e.toLowerCase().substring(0,2))&&"#"!=e.charAt()&&(e=M(e)),!e)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:I};var t,r,o,i,p,h,m=e.match(y);return m?(m[2]&&(o=s(m[2].substring(5),16),r=s(m[2].substring(3,5),16),t=s(m[2].substring(1,3),16)),m[3]&&(o=s((p=m[3].charAt(3))+p,16),r=s((p=m[3].charAt(2))+p,16),t=s((p=m[3].charAt(1))+p,16)),m[4]&&(h=m[4].split(b),t=u(h[0]),"%"==h[0].slice(-1)&&(t*=2.55),r=u(h[1]),"%"==h[1].slice(-1)&&(r*=2.55),o=u(h[2]),"%"==h[2].slice(-1)&&(o*=2.55),"rgba"==m[1].toLowerCase().slice(0,4)&&(i=u(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100)),m[5]?(h=m[5].split(b),t=u(h[0]),"%"==h[0].slice(-1)&&(t/=100),r=u(h[1]),"%"==h[1].slice(-1)&&(r/=100),o=u(h[2]),"%"==h[2].slice(-1)&&(o/=100),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(t/=360),"hsba"==m[1].toLowerCase().slice(0,4)&&(i=u(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100),n.hsb2rgb(t,r,o,i)):m[6]?(h=m[6].split(b),t=u(h[0]),"%"==h[0].slice(-1)&&(t/=100),r=u(h[1]),"%"==h[1].slice(-1)&&(r/=100),o=u(h[2]),"%"==h[2].slice(-1)&&(o/=100),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(t/=360),"hsla"==m[1].toLowerCase().slice(0,4)&&(i=u(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100),n.hsl2rgb(t,r,o,i)):(t=d(c.round(t),255),r=d(c.round(r),255),o=d(c.round(o),255),i=d(f(i,0),1),(m={r:t,g:r,b:o,toString:I}).hex="#"+(16777216|o|r<<8|t<<16).toString(16).slice(1),m.opacity=A(i,"finite")?i:1,m)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:I}}),n),n.hsb=N((function(e,t,r){return n.hsb2rgb(e,t,r).hex})),n.hsl=N((function(e,t,r){return n.hsl2rgb(e,t,r).hex})),n.rgb=N((function(e,t,n,r){if(A(r,"finite")){var o=c.round;return"rgba("+[o(e),o(t),o(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|t<<8|e<<16).toString(16).slice(1)}));var M=function(e){var t=r.doc.getElementsByTagName("head")[0]||r.doc.getElementsByTagName("svg")[0],n="rgb(255, 0, 0)";return(M=N((function(e){if("red"==e.toLowerCase())return n;t.style.color=n,t.style.color=e;var o=r.doc.defaultView.getComputedStyle(t,"").getPropertyValue("color");return o==n?null:o})))(e)},L=function(){return"hsb("+[this.h,this.s,this.b]+")"},D=function(){return"hsl("+[this.h,this.s,this.l]+")"},I=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},B=function(e,t,r){if(null==t&&A(e,"object")&&"r"in e&&"g"in e&&"b"in e&&(r=e.b,t=e.g,e=e.r),null==t&&A(e,string)){var o=n.getRGB(e);e=o.r,t=o.g,r=o.b}return(e>1||t>1||r>1)&&(e/=255,t/=255,r/=255),[e,t,r]},U=function(e,t,r,o){var i={r:e=c.round(255*e),g:t=c.round(255*t),b:r=c.round(255*r),opacity:A(o,"finite")?o:1,hex:n.rgb(e,t,r),toString:I};return A(o,"finite")&&(i.opacity=o),i};n.color=function(e){var t;return A(e,"object")&&"h"in e&&"s"in e&&"b"in e?(t=n.hsb2rgb(e),e.r=t.r,e.g=t.g,e.b=t.b,e.opacity=1,e.hex=t.hex):A(e,"object")&&"h"in e&&"s"in e&&"l"in e?(t=n.hsl2rgb(e),e.r=t.r,e.g=t.g,e.b=t.b,e.opacity=1,e.hex=t.hex):(A(e,"string")&&(e=n.getRGB(e)),A(e,"object")&&"r"in e&&"g"in e&&"b"in e&&!("error"in e)?(t=n.rgb2hsl(e),e.h=t.h,e.s=t.s,e.l=t.l,t=n.rgb2hsb(e),e.v=t.b):((e={hex:"none"}).r=e.g=e.b=e.h=e.s=e.v=e.l=-1,e.error=1)),e.toString=I,e},n.hsb2rgb=function(e,t,n,r){var o,i,a,l,u;return A(e,"object")&&"h"in e&&"s"in e&&"b"in e&&(n=e.b,t=e.s,r=e.o,e=e.h),l=(u=n*t)*(1-p((e=(e*=360)%360/60)%2-1)),o=i=a=n-u,U(o+=[u,l,0,0,l,u][e=~~e],i+=[l,u,u,l,0,0][e],a+=[0,0,l,u,u,l][e],r)},n.hsl2rgb=function(e,t,n,r){var o,i,a,l,u;return A(e,"object")&&"h"in e&&"s"in e&&"l"in e&&(n=e.l,t=e.s,e=e.h),(e>1||t>1||n>1)&&(e/=360,t/=100,n/=100),l=(u=2*t*(n<.5?n:1-n))*(1-p((e=(e*=360)%360/60)%2-1)),o=i=a=n-u/2,U(o+=[u,l,0,0,l,u][e=~~e],i+=[l,u,u,l,0,0][e],a+=[0,0,l,u,u,l][e],r)},n.rgb2hsb=function(e,t,n){var r,o;return e=(n=B(e,t,n))[0],t=n[1],n=n[2],{h:((0==(o=(r=f(e,t,n))-d(e,t,n))?null:r==e?(t-n)/o:r==t?(n-e)/o+2:(e-t)/o+4)+360)%6*60/360,s:0==o?0:o/r,b:r,toString:L}},n.rgb2hsl=function(e,t,n){var r,o,i,a;return e=(n=B(e,t,n))[0],t=n[1],n=n[2],r=((o=f(e,t,n))+(i=d(e,t,n)))/2,{h:((0==(a=o-i)?null:o==e?(t-n)/a:o==t?(n-e)/a+2:(e-t)/a+4)+360)%6*60/360,s:0==a?0:r<.5?a/(2*r):a/(2-2*r),l:r,toString:D}},n.parsePathString=function(e){if(!e)return null;var t=n.path(e);if(t.arr)return n.path.clone(t.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},o=[];return A(e,"array")&&A(e[0],"array")&&(o=n.path.clone(e)),o.length||l(e).replace(x,(function(e,t,n){var i=[],a=t.toLowerCase();if(n.replace(S,(function(e,t){t&&i.push(+t)})),"m"==a&&i.length>2&&(o.push([t].concat(i.splice(0,2))),a="l",t="m"==t?"l":"L"),"o"==a&&1==i.length&&o.push([t,i[0]]),"r"==a)o.push([t].concat(i));else for(;i.length>=r[a]&&(o.push([t].concat(i.splice(0,r[a]))),r[a]););})),o.toString=n.path.toString,t.arr=n.path.clone(o),o};var z=n.parseTransformString=function(e){if(!e)return null;var t=[];return A(e,"array")&&A(e[0],"array")&&(t=n.path.clone(e)),t.length||l(e).replace(_,(function(e,n,r){var o=[];n.toLowerCase(),r.replace(S,(function(e,t){t&&o.push(+t)})),t.push([n].concat(o))})),t.toString=n.path.toString,t};function $(e){return e.node.ownerSVGElement&&Q(e.node.ownerSVGElement)||n.select("svg")}function q(e){A(e,"array")||(e=Array.prototype.slice.call(arguments,0));for(var t=0,n=0,r=this.node;this[t];)delete this[t++];for(t=0;t<e.length;t++)"set"==e[t].type?e[t].forEach((function(e){r.appendChild(e.node)})):r.appendChild(e[t].node);var o=r.childNodes;for(t=0;t<o.length;t++)this[n++]=Q(o[t]);return this}function H(e){if(e.snap in P)return P[e.snap];var t;try{t=e.ownerSVGElement}catch(e){}this.node=e,t&&(this.paper=new G(t)),this.type=e.tagName||e.nodeName;var n=this.id=C(this);if(this.anims={},this._={transform:[]},e.snap=n,P[n]=this,"g"==this.type&&(this.add=q),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in G.prototype)G.prototype[a](r)&&(this[r]=G.prototype[r])}function V(e){this.node=e}function W(e,t){var n=j(e);return t.appendChild(n),Q(n)}function G(e,t){var n,o,i,l=G.prototype;if(e&&e.tagName&&"svg"==e.tagName.toLowerCase()){if(e.snap in P)return P[e.snap];var u=e.ownerDocument;for(var s in n=new H(e),o=e.getElementsByTagName("desc")[0],i=e.getElementsByTagName("defs")[0],o||((o=j("desc")).appendChild(u.createTextNode("Created with Snap")),n.node.appendChild(o)),i||(i=j("defs"),n.node.appendChild(i)),n.defs=i,l)l[a](s)&&(n[s]=l[s]);n.paper=n.root=n}else j((n=W("svg",r.doc.body)).node,{height:t,version:1.1,width:e,xmlns:T});return n}function Q(e){return e?e instanceof H||e instanceof V?e:e.tagName&&"svg"==e.tagName.toLowerCase()?new G(e):e.tagName&&"object"==e.tagName.toLowerCase()&&"image/svg+xml"==e.type?new G(e.contentDocument.getElementsByTagName("svg")[0]):new H(e):e}n._.svgTransform2string=function(e){var t=[];return e=e.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,(function(e,n,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==n&&1==r.length&&r.push(0,0),"scale"==n&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==n?t.push(["m",1,0,c.tan(F(r[0])),1,0,0]):"skewY"==n?t.push(["m",1,c.tan(F(r[0])),0,1,0,0]):t.push([n.charAt(0)].concat(r)),e})),t},n._.rgTransform=/^[a-z][\s]*-?\.?\d/i,n._.transform2matrix=function(e,t){var r=z(e),o=new n.Matrix;if(r)for(var i=0,a=r.length;i<a;i++){var u,s,c,f,d,p=r[i],h=p.length,m=l(p[0]).toLowerCase(),y=p[0]!=m,v=y?o.invert():0;"t"==m&&2==h?o.translate(p[1],0):"t"==m&&3==h?y?(u=v.x(0,0),s=v.y(0,0),c=v.x(p[1],p[2]),f=v.y(p[1],p[2]),o.translate(c-u,f-s)):o.translate(p[1],p[2]):"r"==m?2==h?(d=d||t,o.rotate(p[1],d.x+d.width/2,d.y+d.height/2)):4==h&&(y?(c=v.x(p[2],p[3]),f=v.y(p[2],p[3]),o.rotate(p[1],c,f)):o.rotate(p[1],p[2],p[3])):"s"==m?2==h||3==h?(d=d||t,o.scale(p[1],p[h-1],d.x+d.width/2,d.y+d.height/2)):4==h?y?(c=v.x(p[2],p[3]),f=v.y(p[2],p[3]),o.scale(p[1],p[1],c,f)):o.scale(p[1],p[1],p[2],p[3]):5==h&&(y?(c=v.x(p[3],p[4]),f=v.y(p[3],p[4]),o.scale(p[1],p[2],c,f)):o.scale(p[1],p[2],p[3],p[4])):"m"==m&&7==h&&o.add(p[1],p[2],p[3],p[4],p[5],p[6])}return o},n._unit2px=function(e,t,n){var r=$(e).node,o={},i=r.querySelector(".svg---mgr");function a(e){if(null==e)return"";if(e==+e)return e;j(i,{width:e});try{return i.getBBox().width}catch(e){return 0}}function l(e){if(null==e)return"";if(e==+e)return e;j(i,{height:e});try{return i.getBBox().height}catch(e){return 0}}function u(r,i){null==t?o[r]=i(e.attr(r)||0):r==t&&(o=i(null==n?e.attr(r)||0:n))}switch(i||(i=j("rect"),j(i,{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),r.appendChild(i)),e.type){case"rect":u("rx",a),u("ry",l);case"image":u("width",a),u("height",l);case"text":u("x",a),u("y",l);break;case"circle":u("cx",a),u("cy",l),u("r",a);break;case"ellipse":u("cx",a),u("cy",l),u("rx",a),u("ry",l);break;case"line":u("x1",a),u("x2",a),u("y1",l),u("y2",l);break;case"marker":u("refX",a),u("markerWidth",a),u("refY",l),u("markerHeight",l);break;case"radialGradient":u("fx",a),u("fy",l);break;case"tspan":u("dx",a),u("dy",l);break;default:u(t,a)}return r.removeChild(i),o},r.doc.contains||r.doc.compareDocumentPosition,n._.getSomeDefs=function(e){var t=e.node.ownerSVGElement&&Q(e.node.ownerSVGElement)||e.node.parentNode&&Q(e.node.parentNode)||n.select("svg")||n(0,0),r=t.select("defs"),o=null!=r&&r.node;return o||(o=W("defs",t.node).node),o},n._.getSomeSVG=$,n.select=function(e){return e=l(e).replace(/([^\\]):/g,"$1\\:"),Q(r.doc.querySelector(e))},n.selectAll=function(e){for(var t=r.doc.querySelectorAll(e),o=(n.set||Array)(),i=0;i<t.length;i++)o.push(Q(t[i]));return o},setInterval((function(){for(var e in P)if(P[a](e)){var t=P[e],n=t.node;("svg"!=t.type&&!n.ownerSVGElement||"svg"==t.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete P[e]}}),1e4),H.prototype.attr=function(e,n){var r=this,o=r.node;if(!e){if(1!=o.nodeType)return{text:o.nodeValue};for(var i=o.attributes,l={},u=0,s=i.length;u<s;u++)l[i[u].nodeName]=i[u].nodeValue;return l}if(A(e,"string")){if(!(arguments.length>1))return t("snap.util.getattr."+e,r).firstDefined();var c={};c[e]=n,e=c}for(var f in e)e[a](f)&&t("snap.util.attr."+f,r,e[f]);return r},n.parse=function(e){var t=r.doc.createDocumentFragment(),n=!0,o=r.doc.createElement("div");if((e=l(e)).match(/^\s*<\s*svg(?:\s|>)/)||(e="<svg>"+e+"</svg>",n=!1),o.innerHTML=e,e=o.getElementsByTagName("svg")[0])if(n)t=e;else for(;e.firstChild;)t.appendChild(e.firstChild);return new V(t)},n.fragment=function(){for(var e=Array.prototype.slice.call(arguments,0),t=r.doc.createDocumentFragment(),o=0,i=e.length;o<i;o++){var a=e[o];a.node&&a.node.nodeType&&t.appendChild(a.node),a.nodeType&&t.appendChild(a),"string"==typeof a&&t.appendChild(n.parse(a).node)}return new V(t)},n._.make=W,n._.wrap=Q,G.prototype.el=function(e,t){var n=W(e,this.node);return t&&n.attr(t),n},H.prototype.children=function(){for(var e=[],t=this.node.childNodes,r=0,o=t.length;r<o;r++)e[r]=n(t[r]);return e},H.prototype.toJSON=function(){var e=[];return function e(t,n){for(var r=0,o=t.length;r<o;r++){var i={type:t[r].type,attr:t[r].attr()},a=t[r].children();n.push(i),a.length&&e(a,i.childNodes=[])}}([this],e),e[0]},t.on("snap.util.getattr",(function(){var e=t.nt(),n=(e=e.substring(e.lastIndexOf(".")+1)).replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()}));return K[a](n)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(n):j(this.node,e)}));var K={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};return t.on("snap.util.attr",(function(e){var n=t.nt(),r={};r[n=n.substring(n.lastIndexOf(".")+1)]=e;var o=n.replace(/-(\w)/gi,(function(e,t){return t.toUpperCase()})),i=n.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()}));K[a](i)?this.node.style[o]=null==e?"":e:j(this.node,r)})),G.prototype,n.ajax=function(e,n,r,o){var i=new XMLHttpRequest,a=C();if(i){if(A(n,"function"))o=r,r=n,n=null;else if(A(n,"object")){var l=[];for(var u in n)n.hasOwnProperty(u)&&l.push(encodeURIComponent(u)+"="+encodeURIComponent(n[u]));n=l.join("&")}return i.open(n?"POST":"GET",e,!0),n&&(i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(t.once("snap.ajax."+a+".0",r),t.once("snap.ajax."+a+".200",r),t.once("snap.ajax."+a+".304",r)),i.onreadystatechange=function(){4==i.readyState&&t("snap.ajax."+a+"."+i.status,o,i)},4==i.readyState||i.send(n),i}},n.load=function(e,t,r){n.ajax(e,(function(e){var o=n.parse(e.responseText);r?t.call(r,o):t(o)}))},n.getElementByPoint=function(e,t){this.canvas;var n,o,i,a,l,u,s,c=r.doc.elementFromPoint(e,t);if(r.win.opera&&"svg"==c.tagName){var f=(o=(n=c).getBoundingClientRect(),i=n.ownerDocument,a=i.body,l=i.documentElement,u=l.clientTop||a.clientTop||0,s=l.clientLeft||a.clientLeft||0,{y:o.top+(g.win.pageYOffset||l.scrollTop||a.scrollTop)-u,x:o.left+(g.win.pageXOffset||l.scrollLeft||a.scrollLeft)-s}),d=c.createSVGRect();d.x=e-f.x,d.y=t-f.y,d.width=d.height=1;var p=c.getIntersectionList(d,null);p.length&&(c=p[p.length-1])}return c?Q(c):null},n.plugin=function(e){e(n,H,G,r,V)},r.win.Snap=n,n}(e||this);return r.plugin((function(n,r,o,i,a){var l=r.prototype,u=n.is,s=String,c=n._unit2px,f=n._.$,d=n._.make,p=n._.getSomeDefs,h="hasOwnProperty",m=n._.wrap;l.getBBox=function(e){if("tspan"==this.type)return n._.box(this.node.getClientRects().item(0));if(!n.Matrix||!n.path)return this.node.getBBox();var t=this,r=new n.Matrix;if(t.removed)return n._.box();for(;"use"==t.type;)if(e||(r=r.add(t.transform().localMatrix.translate(t.attr("x")||0,t.attr("y")||0))),t.original)t=t.original;else{var o=t.attr("xlink:href");t=t.original=t.node.ownerDocument.getElementById(o.substring(o.indexOf("#")+1))}var i=t._,a=n.path.get[t.type]||n.path.get.deflt;try{return e?(i.bboxwt=a?n.path.getBBox(t.realPath=a(t)):n._.box(t.node.getBBox()),n._.box(i.bboxwt)):(t.realPath=a(t),t.matrix=t.transform().localMatrix,i.bbox=n.path.getBBox(n.path.map(t.realPath,r.add(t.matrix))),n._.box(i.bbox))}catch(e){return n._.box()}};var y=function(){return this.string};function v(e,t){if(null==t){var r=!0;if(!(t="linearGradient"==e.type||"radialGradient"==e.type?e.node.getAttribute("gradientTransform"):"pattern"==e.type?e.node.getAttribute("patternTransform"):e.node.getAttribute("transform")))return new n.Matrix;t=n._.svgTransform2string(t)}else t=n._.rgTransform.test(t)?s(t).replace(/\.{3}|\u2026/g,e._.transform||""):n._.svgTransform2string(t),u(t,"array")&&(t=n.path?n.path.toString.call(t):s(t)),e._.transform=t;var o=n._.transform2matrix(t,e.getBBox(1));if(r)return o;e.matrix=o}l.transform=function(e){var t=this._;if(null==e){for(var r,o=this,i=new n.Matrix(this.node.getCTM()),a=v(this),l=[a],u=new n.Matrix,c=a.toTransformString(),d=s(a)==s(this.matrix)?s(t.transform):c;"svg"!=o.type&&(o=o.parent());)l.push(v(o));for(r=l.length;r--;)u.add(l[r]);return{string:d,globalMatrix:i,totalMatrix:u,localMatrix:a,diffMatrix:i.clone().add(a.invert()),global:i.toTransformString(),total:u.toTransformString(),local:c,toString:y}}return e instanceof n.Matrix?(this.matrix=e,this._.transform=e.toTransformString()):v(this,e),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?f(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?f(this.node,{patternTransform:this.matrix}):f(this.node,{transform:this.matrix})),this},l.parent=function(){return m(this.node.parentNode)},l.append=l.add=function(e){if(e){if("set"==e.type){var t=this;return e.forEach((function(e){t.add(e)})),this}e=m(e),this.node.appendChild(e.node),e.paper=this.paper}return this},l.appendTo=function(e){return e&&(e=m(e)).append(this),this},l.prepend=function(e){if(e){if("set"==e.type){var t,n=this;return e.forEach((function(e){t?t.after(e):n.prepend(e),t=e})),this}var r=(e=m(e)).parent();this.node.insertBefore(e.node,this.node.firstChild),this.add&&this.add(),e.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},l.prependTo=function(e){return(e=m(e)).prepend(this),this},l.before=function(e){if("set"==e.type){var t=this;return e.forEach((function(e){var n=e.parent();t.node.parentNode.insertBefore(e.node,t.node),n&&n.add()})),this.parent().add(),this}var n=(e=m(e)).parent();return this.node.parentNode.insertBefore(e.node,this.node),this.parent()&&this.parent().add(),n&&n.add(),e.paper=this.paper,this},l.after=function(e){var t=(e=m(e)).parent();return this.node.nextSibling?this.node.parentNode.insertBefore(e.node,this.node.nextSibling):this.node.parentNode.appendChild(e.node),this.parent()&&this.parent().add(),t&&t.add(),e.paper=this.paper,this},l.insertBefore=function(e){e=m(e);var t=this.parent();return e.node.parentNode.insertBefore(this.node,e.node),this.paper=e.paper,t&&t.add(),e.parent()&&e.parent().add(),this},l.insertAfter=function(e){e=m(e);var t=this.parent();return e.node.parentNode.insertBefore(this.node,e.node.nextSibling),this.paper=e.paper,t&&t.add(),e.parent()&&e.parent().add(),this},l.remove=function(){var e=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,e&&e.add(),this},l.select=function(e){return m(this.node.querySelector(e))},l.selectAll=function(e){for(var t=this.node.querySelectorAll(e),r=(n.set||Array)(),o=0;o<t.length;o++)r.push(m(t[o]));return r},l.asPX=function(e,t){return null==t&&(t=this.attr(e)),+c(this,e,t)},l.use=function(){var e,t=this.node.id;return t||(t=this.id,f(this.node,{id:t})),e="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?d(this.type,this.node.parentNode):d("use",this.node.parentNode),f(e.node,{"xlink:href":"#"+t}),e.original=this,e},l.clone=function(){var e=m(this.node.cloneNode(!0));return f(e.node,"id")&&f(e.node,{id:e.id}),function(e){var t,r=e.selectAll("*"),o=/^\s*url\(("|'|)(.*)\1\)\s*$/,i=[],a={};function l(e,t){var r=f(e.node,t);(r=(r=r&&r.match(o))&&r[2])&&"#"==r.charAt()&&(r=r.substring(1))&&(a[r]=(a[r]||[]).concat((function(r){var o={};o[t]=n.url(r),f(e.node,o)})))}function u(e){var t=f(e.node,"xlink:href");t&&"#"==t.charAt()&&(t=t.substring(1))&&(a[t]=(a[t]||[]).concat((function(t){e.attr("xlink:href","#"+t)})))}for(var s=0,c=r.length;s<c;s++){l(t=r[s],"fill"),l(t,"stroke"),l(t,"filter"),l(t,"mask"),l(t,"clip-path"),u(t);var d=f(t.node,"id");d&&(f(t.node,{id:t.id}),i.push({old:d,id:t.id}))}for(s=0,c=i.length;s<c;s++){var p=a[i[s].old];if(p)for(var h=0,m=p.length;h<m;h++)p[h](i[s].id)}}(e),e.insertAfter(this),e},l.toDefs=function(){return p(this).appendChild(this.node),this},l.pattern=l.toPattern=function(e,t,n,r){var o=d("pattern",p(this));return null==e&&(e=this.getBBox()),u(e,"object")&&"x"in e&&(t=e.y,n=e.width,r=e.height,e=e.x),f(o.node,{x:e,y:t,width:n,height:r,patternUnits:"userSpaceOnUse",id:o.id,viewBox:[e,t,n,r].join(" ")}),o.node.appendChild(this.node),o},l.marker=function(e,t,n,r,o,i){var a=d("marker",p(this));return null==e&&(e=this.getBBox()),u(e,"object")&&"x"in e&&(t=e.y,n=e.width,r=e.height,o=e.refX||e.cx,i=e.refY||e.cy,e=e.x),f(a.node,{viewBox:[e,t,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:o||0,refY:i||0,id:a.id}),a.node.appendChild(this.node),a};var g={};function b(e){return function(){var t=e?"<"+this.type:"",n=this.node.attributes,r=this.node.childNodes;if(e)for(var o=0,i=n.length;o<i;o++)t+=" "+n[o].name+'="'+n[o].value.replace(/"/g,'\\"')+'"';if(r.length){for(e&&(t+=">"),o=0,i=r.length;o<i;o++)3==r[o].nodeType?t+=r[o].nodeValue:1==r[o].nodeType&&(t+=m(r[o]).toString());e&&(t+="</"+this.type+">")}else e&&(t+="/>");return t}}l.data=function(e,r){var o=g[this.id]=g[this.id]||{};if(0==arguments.length)return t("snap.data.get."+this.id,this,o,null),o;if(1==arguments.length){if(n.is(e,"object")){for(var i in e)e[h](i)&&this.data(i,e[i]);return this}return t("snap.data.get."+this.id,this,o[e],e),o[e]}return o[e]=r,t("snap.data.set."+this.id,this,r,e),this},l.removeData=function(e){return null==e?g[this.id]={}:g[this.id]&&delete g[this.id][e],this},l.outerSVG=l.toString=b(1),l.innerSVG=b(),l.toDataURL=function(){if(e&&e.btoa){var t=this.getBBox(),r=n.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+t.x.toFixed(3),y:+t.y.toFixed(3),width:+t.width.toFixed(3),height:+t.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(r)))}},a.prototype.select=l.select,a.prototype.selectAll=l.selectAll})),r.plugin((function(e,r,o,i,a){var l=r.prototype,u=e.is,s=String,c="hasOwnProperty";function f(e,t,n){return function(r){var o=r.slice(e,t);return 1==o.length&&(o=o[0]),n?n(o):o}}var d=function(e,t,r,o){"function"!=typeof r||r.length||(o=r,r=n.linear),this.attr=e,this.dur=t,r&&(this.easing=r),o&&(this.callback=o)};e._.Animation=d,e.animation=function(e,t,n,r){return new d(e,t,n,r)},l.inAnim=function(){var e=[];for(var t in this.anims)this.anims[c](t)&&function(t){e.push({anim:new d(t._attrs,t.dur,t.easing,t._callback),mina:t,curStatus:t.status(),status:function(e){return t.status(e)},stop:function(){t.stop()}})}(this.anims[t]);return e},e.animate=function(e,r,o,i,a,l){"function"!=typeof a||a.length||(l=a,a=n.linear);var u=n.time(),s=n(e,r,u,u+i,n.time,o,a);return l&&t.once("mina.finish."+s.id,l),s},l.stop=function(){for(var e=this.inAnim(),t=0,n=e.length;t<n;t++)e[t].stop();return this},l.animate=function(e,r,o,i){"function"!=typeof o||o.length||(i=o,o=n.linear),e instanceof d&&(i=e.callback,o=e.easing,r=e.dur,e=e.attr);var a,l,p,h,m=[],y=[],v={},g=this;for(var b in e)if(e[c](b)){g.equal?(a=(h=g.equal(b,s(e[b]))).from,l=h.to,p=h.f):(a=+g.attr(b),l=+e[b]);var w=u(a,"array")?a.length:1;v[b]=f(m.length,m.length+w,p),m=m.concat(a),y=y.concat(l)}var x=n.time(),_=n(m,y,x,x+r,n.time,(function(e){var t={};for(var n in v)v[c](n)&&(t[n]=v[n](e));g.attr(t)}),o);return g.anims[_.id]=_,_._attrs=e,_._callback=i,t("snap.animcreated."+g.id,_),t.once("mina.finish."+_.id,(function(){t.off("mina.*."+_.id),delete g.anims[_.id],i&&i.call(g)})),t.once("mina.stop."+_.id,(function(){t.off("mina.*."+_.id),delete g.anims[_.id]})),g}})),r.plugin((function(e,t,n,r,o){var i=Object.prototype.toString,a=String,l=Math;function u(e,t,n,r,o,a){if(null==t&&"[object SVGMatrix]"==i.call(e))return this.a=e.a,this.b=e.b,this.c=e.c,this.d=e.d,this.e=e.e,void(this.f=e.f);null!=e?(this.a=+e,this.b=+t,this.c=+n,this.d=+r,this.e=+o,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}!function(t){function n(e){return e[0]*e[0]+e[1]*e[1]}function r(e){var t=l.sqrt(n(e));e[0]&&(e[0]/=t),e[1]&&(e[1]/=t)}t.add=function(e,t,n,r,o,i){if(e&&e instanceof u)return this.add(e.a,e.b,e.c,e.d,e.e,e.f);var a=e*this.a+t*this.c,l=e*this.b+t*this.d;return this.e+=o*this.a+i*this.c,this.f+=o*this.b+i*this.d,this.c=n*this.a+r*this.c,this.d=n*this.b+r*this.d,this.a=a,this.b=l,this},u.prototype.multLeft=function(e,t,n,r,o,i){if(e&&e instanceof u)return this.multLeft(e.a,e.b,e.c,e.d,e.e,e.f);var a=e*this.a+n*this.b,l=e*this.c+n*this.d,s=e*this.e+n*this.f+o;return this.b=t*this.a+r*this.b,this.d=t*this.c+r*this.d,this.f=t*this.e+r*this.f+i,this.a=a,this.c=l,this.e=s,this},t.invert=function(){var e=this,t=e.a*e.d-e.b*e.c;return new u(e.d/t,-e.b/t,-e.c/t,e.a/t,(e.c*e.f-e.d*e.e)/t,(e.b*e.e-e.a*e.f)/t)},t.clone=function(){return new u(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(e,t){return this.e+=e*this.a+t*this.c,this.f+=e*this.b+t*this.d,this},t.scale=function(e,t,n,r){return null==t&&(t=e),(n||r)&&this.translate(n,r),this.a*=e,this.b*=e,this.c*=t,this.d*=t,(n||r)&&this.translate(-n,-r),this},t.rotate=function(t,n,r){t=e.rad(t),n=n||0,r=r||0;var o=+l.cos(t).toFixed(9),i=+l.sin(t).toFixed(9);return this.add(o,i,-i,o,n,r),this.add(1,0,0,1,-n,-r)},t.skewX=function(e){return this.skew(e,0)},t.skewY=function(e){return this.skew(0,e)},t.skew=function(t,n){t=t||0,n=n||0,t=e.rad(t),n=e.rad(n);var r=l.tan(t).toFixed(9),o=l.tan(n).toFixed(9);return this.add(1,o,r,1,0,0)},t.x=function(e,t){return e*this.a+t*this.c+this.e},t.y=function(e,t){return e*this.b+t*this.d+this.f},t.get=function(e){return+this[a.fromCharCode(97+e)].toFixed(4)},t.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.determinant=function(){return this.a*this.d-this.b*this.c},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var o=[[this.a,this.b],[this.c,this.d]];t.scalex=l.sqrt(n(o[0])),r(o[0]),t.shear=o[0][0]*o[1][0]+o[0][1]*o[1][1],o[1]=[o[1][0]-o[0][0]*t.shear,o[1][1]-o[0][1]*t.shear],t.scaley=l.sqrt(n(o[1])),r(o[1]),t.shear/=t.scaley,this.determinant()<0&&(t.scalex=-t.scalex);var i=o[0][1],a=o[1][1];return a<0?(t.rotate=e.deg(l.acos(a)),i<0&&(t.rotate=360-t.rotate)):t.rotate=e.deg(l.asin(i)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(e){var t=e||this.split();return+t.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(t.scalex=+t.scalex.toFixed(4),t.scaley=+t.scaley.toFixed(4),t.rotate=+t.rotate.toFixed(4),(t.dx||t.dy?"t"+[+t.dx.toFixed(4),+t.dy.toFixed(4)]:"")+(t.rotate?"r"+[+t.rotate.toFixed(4),0,0]:"")+(1!=t.scalex||1!=t.scaley?"s"+[t.scalex,t.scaley,0,0]:""))}}(u.prototype),e.Matrix=u,e.matrix=function(e,t,n,r,o,i){return new u(e,t,n,r,o,i)}})),r.plugin((function(e,n,r,o,i){var a,l=e._.make,u=e._.wrap,s=e.is,c=e._.getSomeDefs,f=/^url\((['"]?)([^)]+)\1\)$/,d=e._.$,p=e.url,h=String,m=e._.separator;function y(r){return function(o){if(t.stop(),o instanceof i&&1==o.node.childNodes.length&&("radialGradient"==o.node.firstChild.tagName||"linearGradient"==o.node.firstChild.tagName||"pattern"==o.node.firstChild.tagName)&&(o=o.node.firstChild,c(this).appendChild(o),o=u(o)),o instanceof n)if("radialGradient"==o.type||"linearGradient"==o.type||"pattern"==o.type){o.node.id||d(o.node,{id:o.id});var a=p(o.node.id)}else a=o.attr(r);else if((a=e.color(o)).error){var l=e(c(this).ownerSVGElement).gradient(o);l?(l.node.id||d(l.node,{id:l.id}),a=p(l.node.id)):a=o}else a=h(a);var s={};s[r]=a,d(this.node,s),this.node.style[r]=""}}e.deurl=function(e){var t=String(e).match(f);return t?t[2]:e},t.on("snap.util.attr.mask",(function(e){if(e instanceof n||e instanceof i){if(t.stop(),e instanceof i&&1==e.node.childNodes.length&&(e=e.node.firstChild,c(this).appendChild(e),e=u(e)),"mask"==e.type)var r=e;else(r=l("mask",c(this))).node.appendChild(e.node);!r.node.id&&d(r.node,{id:r.id}),d(this.node,{mask:p(r.id)})}})),a=function(e){if(e instanceof n||e instanceof i){t.stop();for(var r,o=e.node;o;){if("clipPath"===o.nodeName){r=new n(o);break}if("svg"===o.nodeName){r=void 0;break}o=o.parentNode}r||((r=l("clipPath",c(this))).node.appendChild(e.node),!r.node.id&&d(r.node,{id:r.id})),d(this.node,{"clip-path":p(r.node.id||r.id)})}},t.on("snap.util.attr.clip",a),t.on("snap.util.attr.clip-path",a),t.on("snap.util.attr.clipPath",a),t.on("snap.util.attr.fill",y("fill")),t.on("snap.util.attr.stroke",y("stroke"));var v=/^([lr])(?:\(([^)]*)\))?(.*)$/i;function g(e){t.stop(),e==+e&&(e+="px"),this.node.style.fontSize=e}function b(){return t.stop(),this.node.style.fontSize}t.on("snap.util.grad.parse",(function(e){var t=(e=h(e)).match(v);if(!t)return null;var n=t[1],r=t[2],o=t[3];1==(r=r.split(/\s*,\s*/).map((function(e){return+e==e?+e:e}))).length&&0==r[0]&&(r=[]);var i=(o=(o=o.split("-")).map((function(e){var t={color:(e=e.split(":"))[0]};return e[1]&&(t.offset=parseFloat(e[1])),t}))).length,a=0,l=0;function u(e,t){for(var n=(t-a)/(e-l),r=l;r<e;r++)o[r].offset=+(+a+n*(r-l)).toFixed(2);l=e,a=t}i--;for(var s=0;s<i;s++)"offset"in o[s]&&u(s,o[s].offset);return o[i].offset=o[i].offset||100,u(i,o[i].offset),{type:n,params:r,stops:o}})),t.on("snap.util.attr.d",(function(n){t.stop(),s(n,"array")&&s(n[0],"array")&&(n=e.path.toString.call(n)),(n=h(n)).match(/[ruo]/i)&&(n=e.path.toAbsolute(n)),d(this.node,{d:n})}))(-1),t.on("snap.util.attr.#text",(function(e){t.stop(),e=h(e);for(var n=o.doc.createTextNode(e);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(n)}))(-1),t.on("snap.util.attr.path",(function(e){t.stop(),this.attr({d:e})}))(-1),t.on("snap.util.attr.class",(function(e){t.stop(),this.node.className.baseVal=e}))(-1),t.on("snap.util.attr.viewBox",(function(e){var n;n=s(e,"object")&&"x"in e?[e.x,e.y,e.width,e.height].join(" "):s(e,"array")?e.join(" "):e,d(this.node,{viewBox:n}),t.stop()}))(-1),t.on("snap.util.attr.transform",(function(e){this.transform(e),t.stop()}))(-1),t.on("snap.util.attr.r",(function(e){"rect"==this.type&&(t.stop(),d(this.node,{rx:e,ry:e}))}))(-1),t.on("snap.util.attr.textpath",(function(e){if(t.stop(),"text"==this.type){var r,o,i;if(!e&&this.textPath){for(o=this.textPath;o.node.firstChild;)this.node.appendChild(o.node.firstChild);return o.remove(),void delete this.textPath}if(s(e,"string")){var a=c(this),l=u(a.parentNode).path(e);a.appendChild(l.node),r=l.id,l.attr({id:r})}else(e=u(e))instanceof n&&((r=e.attr("id"))||(r=e.id,e.attr({id:r})));if(r)if(o=this.textPath,i=this.node,o)o.attr({"xlink:href":"#"+r});else{for(o=d("textPath",{"xlink:href":"#"+r});i.firstChild;)o.appendChild(i.firstChild);i.appendChild(o),this.textPath=u(o)}}}))(-1),t.on("snap.util.attr.text",(function(e){if("text"==this.type){for(var n=this.node;n.firstChild;)n.removeChild(n.firstChild);for(var r=function e(t){var n=d("tspan");if(s(t,"array"))for(var r=0;r<t.length;r++)n.appendChild(e(t[r]));else n.appendChild(o.doc.createTextNode(t));return n.normalize&&n.normalize(),n}(e);r.firstChild;)n.appendChild(r.firstChild)}t.stop()}))(-1),t.on("snap.util.attr.fontSize",g)(-1),t.on("snap.util.attr.font-size",g)(-1),t.on("snap.util.getattr.transform",(function(){return t.stop(),this.transform()}))(-1),t.on("snap.util.getattr.textpath",(function(){return t.stop(),this.textPath}))(-1),function(){function n(n){return function(){t.stop();var r=o.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+n);return"none"==r?r:e(o.doc.getElementById(r.match(f)[1]))}}function r(e){return function(n){t.stop();var r="marker"+e.charAt(0).toUpperCase()+e.substring(1);if(""!=n&&n){if("marker"==n.type){var o=n.node.id;return o||d(n.node,{id:n.id}),void(this.node.style[r]=p(o))}}else this.node.style[r]="none"}}t.on("snap.util.getattr.marker-end",n("end"))(-1),t.on("snap.util.getattr.markerEnd",n("end"))(-1),t.on("snap.util.getattr.marker-start",n("start"))(-1),t.on("snap.util.getattr.markerStart",n("start"))(-1),t.on("snap.util.getattr.marker-mid",n("mid"))(-1),t.on("snap.util.getattr.markerMid",n("mid"))(-1),t.on("snap.util.attr.marker-end",r("end"))(-1),t.on("snap.util.attr.markerEnd",r("end"))(-1),t.on("snap.util.attr.marker-start",r("start"))(-1),t.on("snap.util.attr.markerStart",r("start"))(-1),t.on("snap.util.attr.marker-mid",r("mid"))(-1),t.on("snap.util.attr.markerMid",r("mid"))(-1)}(),t.on("snap.util.getattr.r",(function(){if("rect"==this.type&&d(this.node,"rx")==d(this.node,"ry"))return t.stop(),d(this.node,"rx")}))(-1),t.on("snap.util.getattr.text",(function(){if("text"==this.type||"tspan"==this.type){t.stop();var e=function e(t){for(var n=[],r=t.childNodes,o=0,i=r.length;o<i;o++){var a=r[o];3==a.nodeType&&n.push(a.nodeValue),"tspan"==a.tagName&&(1==a.childNodes.length&&3==a.firstChild.nodeType?n.push(a.firstChild.nodeValue):n.push(e(a)))}return n}(this.node);return 1==e.length?e[0]:e}}))(-1),t.on("snap.util.getattr.#text",(function(){return this.node.textContent}))(-1),t.on("snap.util.getattr.fill",(function(n){if(!n){t.stop();var r=t("snap.util.getattr.fill",this,!0).firstDefined();return e(e.deurl(r))||r}}))(-1),t.on("snap.util.getattr.stroke",(function(n){if(!n){t.stop();var r=t("snap.util.getattr.stroke",this,!0).firstDefined();return e(e.deurl(r))||r}}))(-1),t.on("snap.util.getattr.viewBox",(function(){t.stop();var n=d(this.node,"viewBox");return n?(n=n.split(m),e._.box(+n[0],+n[1],+n[2],+n[3])):void 0}))(-1),t.on("snap.util.getattr.points",(function(){var e=d(this.node,"points");return t.stop(),e?e.split(m):void 0}))(-1),t.on("snap.util.getattr.path",(function(){var e=d(this.node,"d");return t.stop(),e}))(-1),t.on("snap.util.getattr.class",(function(){return this.node.className.baseVal}))(-1),t.on("snap.util.getattr.fontSize",b)(-1),t.on("snap.util.getattr.font-size",b)(-1)})),r.plugin((function(e,t,n,r,o){var i=/\S+/g,a=String,l=t.prototype;l.addClass=function(e){var t,n,r,o=a(e||"").match(i)||[],l=this.node,u=l.className.baseVal,s=u.match(i)||[];if(o.length){for(t=0;n=o[t++];)~s.indexOf(n)||s.push(n);u!=(r=s.join(" "))&&(l.className.baseVal=r)}return this},l.removeClass=function(e){var t,n,r,o,l=a(e||"").match(i)||[],u=this.node,s=u.className.baseVal,c=s.match(i)||[];if(c.length){for(t=0;r=l[t++];)~(n=c.indexOf(r))&&c.splice(n,1);s!=(o=c.join(" "))&&(u.className.baseVal=o)}return this},l.hasClass=function(e){return!!~(this.node.className.baseVal.match(i)||[]).indexOf(e)},l.toggleClass=function(e,t){if(null!=t)return t?this.addClass(e):this.removeClass(e);var n,r,o,a,l=(e||"").match(i)||[],u=this.node,s=u.className.baseVal,c=s.match(i)||[];for(n=0;o=l[n++];)~(r=c.indexOf(o))?c.splice(r,1):c.push(o);return s!=(a=c.join(" "))&&(u.className.baseVal=a),this}})),r.plugin((function(e,n,r,o,i){var a={"+":function(e,t){return e+t},"-":function(e,t){return e-t},"/":function(e,t){return e/t},"*":function(e,t){return e*t}},l=String,u=/[a-z]+$/i,s=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;function c(e){return e}function f(e){return function(t){return+t.toFixed(3)+e}}t.on("snap.util.attr",(function(e){var n=l(e).match(s);if(n){var r=t.nt(),o=r.substring(r.lastIndexOf(".")+1),i=this.attr(o),c={};t.stop();var f=n[3]||"",d=i.match(u),p=a[n[1]];if(d&&d==f?e=p(parseFloat(i),+n[2]):(i=this.asPX(o),e=p(this.asPX(o),this.asPX(o,n[2]+f))),isNaN(i)||isNaN(e))return;c[o]=e,this.attr(c)}}))(-10),t.on("snap.util.equal",(function(e,n){var r=l(this.attr(e)||""),o=l(n).match(s);if(o){t.stop();var i=o[3]||"",d=r.match(u),p=a[o[1]];return d&&d==i?{from:parseFloat(r),to:p(parseFloat(r),+o[2]),f:f(d)}:{from:r=this.asPX(e),to:p(r,this.asPX(e,o[2]+i)),f:c}}}))(-10)})),r.plugin((function(n,r,o,i,a){var l=o.prototype,u=n.is;l.rect=function(e,t,n,r,o,i){var a;return null==i&&(i=o),u(e,"object")&&"[object Object]"==e?a=e:null!=e&&(a={x:e,y:t,width:n,height:r},null!=o&&(a.rx=o,a.ry=i)),this.el("rect",a)},l.circle=function(e,t,n){var r;return u(e,"object")&&"[object Object]"==e?r=e:null!=e&&(r={cx:e,cy:t,r:n}),this.el("circle",r)};var s=function(){function e(){this.parentNode.removeChild(this)}return function(t,n){var r=i.doc.createElement("img"),o=i.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){n.call(r),r.onload=r.onerror=null,o.removeChild(r)},r.onerror=e,o.appendChild(r),r.src=t}}();l.image=function(e,t,r,o,i){var a=this.el("image");if(u(e,"object")&&"src"in e)a.attr(e);else if(null!=e){var l={"xlink:href":e,preserveAspectRatio:"none"};null!=t&&null!=r&&(l.x=t,l.y=r),null!=o&&null!=i?(l.width=o,l.height=i):s(e,(function(){n._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})})),n._.$(a.node,l)}return a},l.ellipse=function(e,t,n,r){var o;return u(e,"object")&&"[object Object]"==e?o=e:null!=e&&(o={cx:e,cy:t,rx:n,ry:r}),this.el("ellipse",o)},l.path=function(e){var t;return u(e,"object")&&!u(e,"array")?t=e:e&&(t={d:e}),this.el("path",t)},l.group=l.g=function(e){var t=this.el("g");return 1==arguments.length&&e&&!e.type?t.attr(e):arguments.length&&t.add(Array.prototype.slice.call(arguments,0)),t},l.svg=function(e,t,n,r,o,i,a,l){var s={};return u(e,"object")&&null==t?s=e:(null!=e&&(s.x=e),null!=t&&(s.y=t),null!=n&&(s.width=n),null!=r&&(s.height=r),null!=o&&null!=i&&null!=a&&null!=l&&(s.viewBox=[o,i,a,l])),this.el("svg",s)},l.mask=function(e){var t=this.el("mask");return 1==arguments.length&&e&&!e.type?t.attr(e):arguments.length&&t.add(Array.prototype.slice.call(arguments,0)),t},l.ptrn=function(e,t,n,r,o,i,a,l){if(u(e,"object"))var s=e;else s={patternUnits:"userSpaceOnUse"},e&&(s.x=e),t&&(s.y=t),null!=n&&(s.width=n),null!=r&&(s.height=r),s.viewBox=null!=o&&null!=i&&null!=a&&null!=l?[o,i,a,l]:[e||0,t||0,n||0,r||0];return this.el("pattern",s)},l.use=function(e){return null!=e?(e instanceof r&&(e.attr("id")||e.attr({id:n._.id(e)}),e=e.attr("id")),"#"==String(e).charAt()&&(e=e.substring(1)),this.el("use",{"xlink:href":"#"+e})):r.prototype.use.call(this)},l.symbol=function(e,t,n,r){var o={};return null!=e&&null!=t&&null!=n&&null!=r&&(o.viewBox=[e,t,n,r]),this.el("symbol",o)},l.text=function(e,t,n){var r={};return u(e,"object")?r=e:null!=e&&(r={x:e,y:t,text:n||""}),this.el("text",r)},l.line=function(e,t,n,r){var o={};return u(e,"object")?o=e:null!=e&&(o={x1:e,x2:n,y1:t,y2:r}),this.el("line",o)},l.polyline=function(e){arguments.length>1&&(e=Array.prototype.slice.call(arguments,0));var t={};return u(e,"object")&&!u(e,"array")?t=e:null!=e&&(t={points:e}),this.el("polyline",t)},l.polygon=function(e){arguments.length>1&&(e=Array.prototype.slice.call(arguments,0));var t={};return u(e,"object")&&!u(e,"array")?t=e:null!=e&&(t={points:e}),this.el("polygon",t)},function(){var r=n._.$;function o(){return this.selectAll("stop")}function i(e,t){var o=r("stop"),i={offset:+t+"%"};e=n.color(e),i["stop-color"]=e.hex,e.opacity<1&&(i["stop-opacity"]=e.opacity),r(o,i);for(var a,l=this.stops(),u=0;u<l.length;u++)if(parseFloat(l[u].attr("offset"))>t){this.node.insertBefore(o,l[u].node),a=!0;break}return a||this.node.appendChild(o),this}function a(){if("linearGradient"==this.type){var e=r(this.node,"x1")||0,t=r(this.node,"x2")||1,o=r(this.node,"y1")||0,i=r(this.node,"y2")||0;return n._.box(e,o,math.abs(t-e),math.abs(i-o))}var a=this.node.cx||.5,l=this.node.cy||.5,u=this.node.r||0;return n._.box(a-u,l-u,2*u,2*u)}function u(e){var r=e,o=this.stops();if("string"==typeof e&&(r=t("snap.util.grad.parse",null,"l(0,0,0,1)"+e).firstDefined().stops),n.is(r,"array")){for(var i=0;i<o.length;i++)if(r[i]){var a=n.color(r[i].color),l={offset:r[i].offset+"%"};l["stop-color"]=a.hex,a.opacity<1&&(l["stop-opacity"]=a.opacity),o[i].attr(l)}else o[i].remove();for(i=o.length;i<r.length;i++)this.addStop(r[i].color,r[i].offset);return this}}function s(e,t,l,s,c){var f=n._.make("linearGradient",e);return f.stops=o,f.addStop=i,f.getBBox=a,f.setStops=u,null!=t&&r(f.node,{x1:t,y1:l,x2:s,y2:c}),f}function c(e,t,l,u,s,c){var f=n._.make("radialGradient",e);return f.stops=o,f.addStop=i,f.getBBox=a,null!=t&&r(f.node,{cx:t,cy:l,r:u}),null!=s&&null!=c&&r(f.node,{fx:s,fy:c}),f}l.gradient=function(e){return function(e,n){var o,i=t("snap.util.grad.parse",null,n).firstDefined();if(!i)return null;i.params.unshift(e),o="l"==i.type.toLowerCase()?s.apply(0,i.params):c.apply(0,i.params),i.type!=i.type.toLowerCase()&&r(o.node,{gradientUnits:"userSpaceOnUse"});for(var a=i.stops,l=a.length,u=0;u<l;u++){var f=a[u];o.addStop(f.color,f.offset)}return o}(this.defs,e)},l.gradientLinear=function(e,t,n,r){return s(this.defs,e,t,n,r)},l.gradientRadial=function(e,t,n,r,o){return c(this.defs,e,t,n,r,o)},l.toString=function(){var e,t=this.node.ownerDocument,r=t.createDocumentFragment(),o=t.createElement("div"),i=this.node.cloneNode(!0);return r.appendChild(o),o.appendChild(i),n._.$(i,{xmlns:"http://www.w3.org/2000/svg"}),e=o.innerHTML,r.removeChild(r.firstChild),e},l.toDataURL=function(){if(e&&e.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},l.clear=function(){for(var e,t=this.node.firstChild;t;)e=t.nextSibling,"defs"!=t.tagName?t.parentNode.removeChild(t):l.clear.call({node:t}),t=e}}()})),r.plugin((function(e,t,n,r){var o=t.prototype,i=e.is,a=e._.clone,l=/,?([a-z]),?/gi,u=parseFloat,s=Math,c=s.PI,f=s.min,d=s.max,p=s.pow,h=s.abs;function m(e){var t=m.ps=m.ps||{};return t[e]?t[e].sleep=100:t[e]={sleep:100},setTimeout((function(){for(var n in t)t.hasOwnProperty(n)&&n!=e&&(t[n].sleep--,!t[n].sleep&&delete t[n])})),t[e]}function y(e,t,n,r){return null==e&&(e=t=n=r=0),null==t&&(t=e.y,n=e.width,r=e.height,e=e.x),{x:e,y:t,width:n,w:n,height:r,h:r,x2:e+n,y2:t+r,cx:e+n/2,cy:t+r/2,r1:s.min(n,r)/2,r2:s.max(n,r)/2,r0:s.sqrt(n*n+r*r)/2,path:F(e,t,n,r),vb:[e,t,n,r].join(" ")}}function v(){return this.join(",").replace(l,"$1")}function g(e){var t=a(e);return t.toString=v,t}function b(e,t,n,r,o,i,a,l,u){return null==u?P(e,t,n,r,o,i,a,l):k(e,t,n,r,o,i,a,l,function(e,t,n,r,o,i,a,l,u){if(!(u<0||P(e,t,n,r,o,i,a,l)<u)){var s,c=.5,f=1-c;for(s=P(e,t,n,r,o,i,a,l,f);h(s-u)>.01;)s=P(e,t,n,r,o,i,a,l,f+=(s<u?1:-1)*(c/=2));return f}}(e,t,n,r,o,i,a,l,u))}function w(n,r){function o(e){return+(+e).toFixed(3)}return e._.cacher((function(e,i,a){e instanceof t&&(e=e.attr("d"));for(var l,u,s,c,f,d="",p={},h=0,m=0,y=(e=q(e)).length;m<y;m++){if("M"==(s=e[m])[0])l=+s[1],u=+s[2];else{if(h+(c=b(l,u,s[1],s[2],s[3],s[4],s[5],s[6]))>i){if(r&&!p.start){if(d+=["C"+o((f=b(l,u,s[1],s[2],s[3],s[4],s[5],s[6],i-h)).start.x),o(f.start.y),o(f.m.x),o(f.m.y),o(f.x),o(f.y)],a)return d;p.start=d,d=["M"+o(f.x),o(f.y)+"C"+o(f.n.x),o(f.n.y),o(f.end.x),o(f.end.y),o(s[5]),o(s[6])].join(),h+=c,l=+s[5],u=+s[6];continue}if(!n&&!r)return f=b(l,u,s[1],s[2],s[3],s[4],s[5],s[6],i-h)}h+=c,l=+s[5],u=+s[6]}d+=s.shift()+s}return p.end=d,f=n?h:r?p:k(l,u,s[0],s[1],s[2],s[3],s[4],s[5],1)}),null,e._.clone)}var x=w(1),_=w(),S=w(0,1);function k(e,t,n,r,o,i,a,l,u){var f=1-u,d=p(f,3),h=p(f,2),m=u*u,y=m*u,v=e+2*u*(n-e)+m*(o-2*n+e),g=t+2*u*(r-t)+m*(i-2*r+t),b=n+2*u*(o-n)+m*(a-2*o+n),w=r+2*u*(i-r)+m*(l-2*i+r);return{x:d*e+3*h*u*n+3*f*u*u*o+y*a,y:d*t+3*h*u*r+3*f*u*u*i+y*l,m:{x:v,y:g},n:{x:b,y:w},start:{x:f*e+u*n,y:f*t+u*r},end:{x:f*o+u*a,y:f*i+u*l},alpha:90-180*s.atan2(v-b,g-w)/c}}function E(t,n,r,o,i,a,l,u){e.is(t,"array")||(t=[t,n,r,o,i,a,l,u]);var s=$.apply(null,t);return y(s.min.x,s.min.y,s.max.x-s.min.x,s.max.y-s.min.y)}function C(e,t,n){return t>=e.x&&t<=e.x+e.width&&n>=e.y&&n<=e.y+e.height}function O(e,t){return e=y(e),C(t=y(t),e.x,e.y)||C(t,e.x2,e.y)||C(t,e.x,e.y2)||C(t,e.x2,e.y2)||C(e,t.x,t.y)||C(e,t.x2,t.y)||C(e,t.x,t.y2)||C(e,t.x2,t.y2)||(e.x<t.x2&&e.x>t.x||t.x<e.x2&&t.x>e.x)&&(e.y<t.y2&&e.y>t.y||t.y<e.y2&&t.y>e.y)}function T(e,t,n,r,o){return e*(e*(-3*t+9*n-9*r+3*o)+6*t-12*n+6*r)-3*t+3*n}function P(e,t,n,r,o,i,a,l,u){null==u&&(u=1);for(var c=(u=u>1?1:u<0?0:u)/2,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],d=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],p=0,h=0;h<12;h++){var m=c*f[h]+c,y=T(m,e,n,o,a),v=T(m,t,r,i,l),g=y*y+v*v;p+=d[h]*s.sqrt(g)}return c*p}function j(e,t,n,r,o,i,a,l){if(!(d(e,n)<f(o,a)||f(e,n)>d(o,a)||d(t,r)<f(i,l)||f(t,r)>d(i,l))){var u=(e-n)*(i-l)-(t-r)*(o-a);if(u){var s=((e*r-t*n)*(o-a)-(e-n)*(o*l-i*a))/u,c=((e*r-t*n)*(i-l)-(t-r)*(o*l-i*a))/u,p=+s.toFixed(2),h=+c.toFixed(2);if(!(p<+f(e,n).toFixed(2)||p>+d(e,n).toFixed(2)||p<+f(o,a).toFixed(2)||p>+d(o,a).toFixed(2)||h<+f(t,r).toFixed(2)||h>+d(t,r).toFixed(2)||h<+f(i,l).toFixed(2)||h>+d(i,l).toFixed(2)))return{x:s,y:c}}}}function A(e,t,n){if(!O(E(e),E(t)))return n?0:[];for(var r=~~(P.apply(0,e)/8),o=~~(P.apply(0,t)/8),i=[],a=[],l={},u=n?0:[],s=0;s<r+1;s++){var c=k.apply(0,e.concat(s/r));i.push({x:c.x,y:c.y,t:s/r})}for(s=0;s<o+1;s++)c=k.apply(0,t.concat(s/o)),a.push({x:c.x,y:c.y,t:s/o});for(s=0;s<r;s++)for(var f=0;f<o;f++){var d=i[s],p=i[s+1],m=a[f],y=a[f+1],v=h(p.x-d.x)<.001?"y":"x",g=h(y.x-m.x)<.001?"y":"x",b=j(d.x,d.y,p.x,p.y,m.x,m.y,y.x,y.y);if(b){if(l[b.x.toFixed(4)]==b.y.toFixed(4))continue;l[b.x.toFixed(4)]=b.y.toFixed(4);var w=d.t+h((b[v]-d[v])/(p[v]-d[v]))*(p.t-d.t),x=m.t+h((b[g]-m[g])/(y[g]-m[g]))*(y.t-m.t);w>=0&&w<=1&&x>=0&&x<=1&&(n?u++:u.push({x:b.x,y:b.y,t1:w,t2:x}))}}return u}function R(e,t,n){e=q(e),t=q(t);for(var r,o,i,a,l,u,s,c,f,d,p=n?0:[],h=0,m=e.length;h<m;h++){var y=e[h];if("M"==y[0])r=l=y[1],o=u=y[2];else{"C"==y[0]?(f=[r,o].concat(y.slice(1)),r=f[6],o=f[7]):(f=[r,o,r,o,l,u,l,u],r=l,o=u);for(var v=0,g=t.length;v<g;v++){var b=t[v];if("M"==b[0])i=s=b[1],a=c=b[2];else{"C"==b[0]?(d=[i,a].concat(b.slice(1)),i=d[6],a=d[7]):(d=[i,a,i,a,s,c,s,c],i=s,a=c);var w=A(f,d,n);if(n)p+=w;else{for(var x=0,_=w.length;x<_;x++)w[x].segment1=h,w[x].segment2=v,w[x].bez1=f,w[x].bez2=d;p=p.concat(w)}}}}}return p}function N(e){var t=m(e);if(t.bbox)return a(t.bbox);if(!e)return y();for(var n,r=0,o=0,i=[],l=[],u=0,s=(e=q(e)).length;u<s;u++)if("M"==(n=e[u])[0])r=n[1],o=n[2],i.push(r),l.push(o);else{var c=$(r,o,n[1],n[2],n[3],n[4],n[5],n[6]);i=i.concat(c.min.x,c.max.x),l=l.concat(c.min.y,c.max.y),r=n[5],o=n[6]}var p=f.apply(0,i),h=f.apply(0,l),v=y(p,h,d.apply(0,i)-p,d.apply(0,l)-h);return t.bbox=a(v),v}function F(e,t,n,r,o){if(o)return[["M",+e+ +o,t],["l",n-2*o,0],["a",o,o,0,0,1,o,o],["l",0,r-2*o],["a",o,o,0,0,1,-o,o],["l",2*o-n,0],["a",o,o,0,0,1,-o,-o],["l",0,2*o-r],["a",o,o,0,0,1,o,-o],["z"]];var i=[["M",e,t],["l",n,0],["l",0,r],["l",-n,0],["z"]];return i.toString=v,i}function M(e,t,n,r,o){if(null==o&&null==r&&(r=n),e=+e,t=+t,n=+n,r=+r,null!=o)var i=Math.PI/180,a=e+n*Math.cos(-r*i),l=e+n*Math.cos(-o*i),u=[["M",a,t+n*Math.sin(-r*i)],["A",n,n,0,+(o-r>180),0,l,t+n*Math.sin(-o*i)]];else u=[["M",e,t],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return u.toString=v,u}var L=e._unit2px,D={path:function(e){return e.attr("path")},circle:function(e){var t=L(e);return M(t.cx,t.cy,t.r)},ellipse:function(e){var t=L(e);return M(t.cx||0,t.cy||0,t.rx,t.ry)},rect:function(e){var t=L(e);return F(t.x||0,t.y||0,t.width,t.height,t.rx,t.ry)},image:function(e){var t=L(e);return F(t.x||0,t.y||0,t.width,t.height)},line:function(e){return"M"+[e.attr("x1")||0,e.attr("y1")||0,e.attr("x2"),e.attr("y2")]},polyline:function(e){return"M"+e.attr("points")},polygon:function(e){return"M"+e.attr("points")+"z"},deflt:function(e){var t=e.node.getBBox();return F(t.x,t.y,t.width,t.height)}};function I(t){var n=m(t);if(n.abs)return g(n.abs);if(i(t,"array")&&i(t&&t[0],"array")||(t=e.parsePathString(t)),!t||!t.length)return[["M",0,0]];var r,o=[],a=0,l=0,u=0,s=0,c=0;"M"==t[0][0]&&(u=a=+t[0][1],s=l=+t[0][2],c++,o[0]=["M",a,l]);for(var f,d,p=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),h=c,y=t.length;h<y;h++){if(o.push(f=[]),(r=(d=t[h])[0])!=r.toUpperCase())switch(f[0]=r.toUpperCase(),f[0]){case"A":f[1]=d[1],f[2]=d[2],f[3]=d[3],f[4]=d[4],f[5]=d[5],f[6]=+d[6]+a,f[7]=+d[7]+l;break;case"V":f[1]=+d[1]+l;break;case"H":f[1]=+d[1]+a;break;case"R":for(var b=[a,l].concat(d.slice(1)),w=2,x=b.length;w<x;w++)b[w]=+b[w]+a,b[++w]=+b[w]+l;o.pop(),o=o.concat(H(b,p));break;case"O":o.pop(),(b=M(a,l,d[1],d[2])).push(b[0]),o=o.concat(b);break;case"U":o.pop(),o=o.concat(M(a,l,d[1],d[2],d[3])),f=["U"].concat(o[o.length-1].slice(-2));break;case"M":u=+d[1]+a,s=+d[2]+l;default:for(w=1,x=d.length;w<x;w++)f[w]=+d[w]+(w%2?a:l)}else if("R"==r)b=[a,l].concat(d.slice(1)),o.pop(),o=o.concat(H(b,p)),f=["R"].concat(d.slice(-2));else if("O"==r)o.pop(),(b=M(a,l,d[1],d[2])).push(b[0]),o=o.concat(b);else if("U"==r)o.pop(),o=o.concat(M(a,l,d[1],d[2],d[3])),f=["U"].concat(o[o.length-1].slice(-2));else for(var _=0,S=d.length;_<S;_++)f[_]=d[_];if("O"!=(r=r.toUpperCase()))switch(f[0]){case"Z":a=+u,l=+s;break;case"H":a=f[1];break;case"V":l=f[1];break;case"M":u=f[f.length-2],s=f[f.length-1];default:a=f[f.length-2],l=f[f.length-1]}}return o.toString=v,n.abs=g(o),o}function B(e,t,n,r){return[e,t,n,r,n,r]}function U(e,t,n,r,o,i){return[1/3*e+2/3*n,1/3*t+2/3*r,1/3*o+2/3*n,1/3*i+2/3*r,o,i]}function z(t,n,r,o,i,a,l,u,f,d){var p,m=120*c/180,y=c/180*(+i||0),v=[],g=e._.cacher((function(e,t,n){return{x:e*s.cos(n)-t*s.sin(n),y:e*s.sin(n)+t*s.cos(n)}}));if(!r||!o)return[t,n,u,f,u,f];if(d)O=d[0],T=d[1],E=d[2],C=d[3];else{t=(p=g(t,n,-y)).x,n=p.y,u=(p=g(u,f,-y)).x,f=p.y,s.cos(c/180*i),s.sin(c/180*i);var b=(t-u)/2,w=(n-f)/2,x=b*b/(r*r)+w*w/(o*o);x>1&&(r*=x=s.sqrt(x),o*=x);var _=r*r,S=o*o,k=(a==l?-1:1)*s.sqrt(h((_*S-_*w*w-S*b*b)/(_*w*w+S*b*b))),E=k*r*w/o+(t+u)/2,C=k*-o*b/r+(n+f)/2,O=s.asin(((n-C)/o).toFixed(9)),T=s.asin(((f-C)/o).toFixed(9));(O=t<E?c-O:O)<0&&(O=2*c+O),(T=u<E?c-T:T)<0&&(T=2*c+T),l&&O>T&&(O-=2*c),!l&&T>O&&(T-=2*c)}var P=T-O;if(h(P)>m){var j=T,A=u,R=f;T=O+m*(l&&T>O?1:-1),v=z(u=E+r*s.cos(T),f=C+o*s.sin(T),r,o,i,0,l,A,R,[T,j,E,C])}P=T-O;var N=s.cos(O),F=s.sin(O),M=s.cos(T),L=s.sin(T),D=s.tan(P/4),I=4/3*r*D,B=4/3*o*D,U=[t,n],$=[t+I*F,n-B*N],q=[u+I*L,f-B*M],H=[u,f];if($[0]=2*U[0]-$[0],$[1]=2*U[1]-$[1],d)return[$,q,H].concat(v);for(var V=[],W=0,G=(v=[$,q,H].concat(v).join().split(",")).length;W<G;W++)V[W]=W%2?g(v[W-1],v[W],y).y:g(v[W],v[W+1],y).x;return V}function $(e,t,n,r,o,i,a,l){for(var u,c,p,m,y,v,g,b,w=[],x=[[],[]],_=0;_<2;++_)if(0==_?(c=6*e-12*n+6*o,u=-3*e+9*n-9*o+3*a,p=3*n-3*e):(c=6*t-12*r+6*i,u=-3*t+9*r-9*i+3*l,p=3*r-3*t),h(u)<1e-12){if(h(c)<1e-12)continue;0<(m=-p/c)&&m<1&&w.push(m)}else g=c*c-4*p*u,b=s.sqrt(g),g<0||(0<(y=(-c+b)/(2*u))&&y<1&&w.push(y),0<(v=(-c-b)/(2*u))&&v<1&&w.push(v));for(var S,k=w.length,E=k;k--;)S=1-(m=w[k]),x[0][k]=S*S*S*e+3*S*S*m*n+3*S*m*m*o+m*m*m*a,x[1][k]=S*S*S*t+3*S*S*m*r+3*S*m*m*i+m*m*m*l;return x[0][E]=e,x[1][E]=t,x[0][E+1]=a,x[1][E+1]=l,x[0].length=x[1].length=E+2,{min:{x:f.apply(0,x[0]),y:f.apply(0,x[1])},max:{x:d.apply(0,x[0]),y:d.apply(0,x[1])}}}function q(e,t){var n=!t&&m(e);if(!t&&n.curve)return g(n.curve);for(var r=I(e),o=t&&I(t),i={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},l=function(e,t,n){var r,o;if(!e)return["C",t.x,t.y,t.x,t.y,t.x,t.y];switch(!(e[0]in{T:1,Q:1})&&(t.qx=t.qy=null),e[0]){case"M":t.X=e[1],t.Y=e[2];break;case"A":e=["C"].concat(z.apply(0,[t.x,t.y].concat(e.slice(1))));break;case"S":"C"==n||"S"==n?(r=2*t.x-t.bx,o=2*t.y-t.by):(r=t.x,o=t.y),e=["C",r,o].concat(e.slice(1));break;case"T":"Q"==n||"T"==n?(t.qx=2*t.x-t.qx,t.qy=2*t.y-t.qy):(t.qx=t.x,t.qy=t.y),e=["C"].concat(U(t.x,t.y,t.qx,t.qy,e[1],e[2]));break;case"Q":t.qx=e[1],t.qy=e[2],e=["C"].concat(U(t.x,t.y,e[1],e[2],e[3],e[4]));break;case"L":e=["C"].concat(B(t.x,t.y,e[1],e[2]));break;case"H":e=["C"].concat(B(t.x,t.y,e[1],t.y));break;case"V":e=["C"].concat(B(t.x,t.y,t.x,e[1]));break;case"Z":e=["C"].concat(B(t.x,t.y,t.X,t.Y))}return e},s=function(e,t){if(e[t].length>7){e[t].shift();for(var n=e[t];n.length;)f[t]="A",o&&(p[t]="A"),e.splice(t++,0,["C"].concat(n.splice(0,6)));e.splice(t,1),b=d(r.length,o&&o.length||0)}},c=function(e,t,n,i,a){e&&t&&"M"==e[a][0]&&"M"!=t[a][0]&&(t.splice(a,0,["M",i.x,i.y]),n.bx=0,n.by=0,n.x=e[a][1],n.y=e[a][2],b=d(r.length,o&&o.length||0))},f=[],p=[],h="",y="",v=0,b=d(r.length,o&&o.length||0);v<b;v++){r[v]&&(h=r[v][0]),"C"!=h&&(f[v]=h,v&&(y=f[v-1])),r[v]=l(r[v],i,y),"A"!=f[v]&&"C"==h&&(f[v]="C"),s(r,v),o&&(o[v]&&(h=o[v][0]),"C"!=h&&(p[v]=h,v&&(y=p[v-1])),o[v]=l(o[v],a,y),"A"!=p[v]&&"C"==h&&(p[v]="C"),s(o,v)),c(r,o,i,a,v),c(o,r,a,i,v);var w=r[v],x=o&&o[v],_=w.length,S=o&&x.length;i.x=w[_-2],i.y=w[_-1],i.bx=u(w[_-4])||i.x,i.by=u(w[_-3])||i.y,a.bx=o&&(u(x[S-4])||a.x),a.by=o&&(u(x[S-3])||a.y),a.x=o&&x[S-2],a.y=o&&x[S-1]}return o||(n.curve=g(r)),o?[r,o]:r}function H(e,t){for(var n=[],r=0,o=e.length;o-2*!t>r;r+=2){var i=[{x:+e[r-2],y:+e[r-1]},{x:+e[r],y:+e[r+1]},{x:+e[r+2],y:+e[r+3]},{x:+e[r+4],y:+e[r+5]}];t?r?o-4==r?i[3]={x:+e[0],y:+e[1]}:o-2==r&&(i[2]={x:+e[0],y:+e[1]},i[3]={x:+e[2],y:+e[3]}):i[0]={x:+e[o-2],y:+e[o-1]}:o-4==r?i[3]=i[2]:r||(i[0]={x:+e[r],y:+e[r+1]}),n.push(["C",(-i[0].x+6*i[1].x+i[2].x)/6,(-i[0].y+6*i[1].y+i[2].y)/6,(i[1].x+6*i[2].x-i[3].x)/6,(i[1].y+6*i[2].y-i[3].y)/6,i[2].x,i[2].y])}return n}e.path=m,e.path.getTotalLength=x,e.path.getPointAtLength=_,e.path.getSubpath=function(e,t,n){if(this.getTotalLength(e)-n<1e-6)return S(e,t).end;var r=S(e,n,1);return t?S(r,t).end:r},o.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},o.getPointAtLength=function(e){return _(this.attr("d"),e)},o.getSubpath=function(t,n){return e.path.getSubpath(this.attr("d"),t,n)},e._.box=y,e.path.findDotsAtSegment=k,e.path.bezierBBox=E,e.path.isPointInsideBBox=C,e.closest=function(t,n,r,o){for(var i=100,a=y(t-i/2,n-i/2,i,i),l=[],u=r[0].hasOwnProperty("x")?function(e){return{x:r[e].x,y:r[e].y}}:function(e){return{x:r[e],y:o[e]}},s=0;i<=1e6&&!s;){for(var c=0,f=r.length;c<f;c++){var d=u(c);if(C(a,d.x,d.y)){s++,l.push(d);break}}s||(a=y(t-(i*=2)/2,n-i/2,i,i))}if(1e6!=i){var p,h=1/0;for(c=0,f=l.length;c<f;c++){var m=e.len(t,n,l[c].x,l[c].y);h>m&&(h=m,l[c].len=m,p=l[c])}return p}},e.path.isBBoxIntersect=O,e.path.intersection=function(e,t){return R(e,t)},e.path.intersectionNumber=function(e,t){return R(e,t,1)},e.path.isPointInside=function(e,t,n){var r=N(e);return C(r,t,n)&&R(e,[["M",t,n],["H",r.x2+10]],1)%2==1},e.path.getBBox=N,e.path.get=D,e.path.toRelative=function(t){var n=m(t),r=String.prototype.toLowerCase;if(n.rel)return g(n.rel);e.is(t,"array")&&e.is(t&&t[0],"array")||(t=e.parsePathString(t));var o=[],i=0,a=0,l=0,u=0,s=0;"M"==t[0][0]&&(l=i=t[0][1],u=a=t[0][2],s++,o.push(["M",i,a]));for(var c=s,f=t.length;c<f;c++){var d=o[c]=[],p=t[c];if(p[0]!=r.call(p[0]))switch(d[0]=r.call(p[0]),d[0]){case"a":d[1]=p[1],d[2]=p[2],d[3]=p[3],d[4]=p[4],d[5]=p[5],d[6]=+(p[6]-i).toFixed(3),d[7]=+(p[7]-a).toFixed(3);break;case"v":d[1]=+(p[1]-a).toFixed(3);break;case"m":l=p[1],u=p[2];default:for(var h=1,y=p.length;h<y;h++)d[h]=+(p[h]-(h%2?i:a)).toFixed(3)}else{d=o[c]=[],"m"==p[0]&&(l=p[1]+i,u=p[2]+a);for(var b=0,w=p.length;b<w;b++)o[c][b]=p[b]}var x=o[c].length;switch(o[c][0]){case"z":i=l,a=u;break;case"h":i+=+o[c][x-1];break;case"v":a+=+o[c][x-1];break;default:i+=+o[c][x-2],a+=+o[c][x-1]}}return o.toString=v,n.rel=g(o),o},e.path.toAbsolute=I,e.path.toCubic=q,e.path.map=function(e,t){if(!t)return e;var n,r,o,i,a,l,u;for(o=0,a=(e=q(e)).length;o<a;o++)for(i=1,l=(u=e[o]).length;i<l;i+=2)n=t.x(u[i],u[i+1]),r=t.y(u[i],u[i+1]),u[i]=n,u[i+1]=r;return e},e.path.toString=v,e.path.clone=g})),r.plugin((function(e,r,o,i){var a=Math.max,l=Math.min,u=function(e){if(this.items=[],this.bindings={},this.length=0,this.type="set",e)for(var t=0,n=e.length;t<n;t++)e[t]&&(this[this.items.length]=this.items[this.items.length]=e[t],this.length++)},s=u.prototype;s.push=function(){for(var e,t,n=0,r=arguments.length;n<r;n++)(e=arguments[n])&&(this[t=this.items.length]=this.items[t]=e,this.length++);return this},s.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},s.forEach=function(e,t){for(var n=0,r=this.items.length;n<r;n++)if(!1===e.call(t,this.items[n],n))return this;return this},s.animate=function(r,o,i,a){"function"!=typeof i||i.length||(a=i,i=n.linear),r instanceof e._.Animation&&(a=r.callback,i=r.easing,o=i.dur,r=r.attr);var l=arguments;if(e.is(r,"array")&&e.is(l[l.length-1],"array"))var u=!0;var s,c=function(){s?this.b=s:s=this.b},f=0,d=this,p=a&&function(){++f==d.length&&a.call(this)};return this.forEach((function(e,n){t.once("snap.animcreated."+e.id,c),u?l[n]&&e.animate.apply(e,l[n]):e.animate(r,o,i,p)}))},s.remove=function(){for(;this.length;)this.pop().remove();return this},s.bind=function(e,t,n){var r={};if("function"==typeof t)this.bindings[e]=t;else{var o=n||e;this.bindings[e]=function(e){r[o]=e,t.attr(r)}}return this},s.attr=function(e){var t={};for(var n in e)this.bindings[n]?this.bindings[n](e[n]):t[n]=e[n];for(var r=0,o=this.items.length;r<o;r++)this.items[r].attr(t);return this},s.clear=function(){for(;this.length;)this.pop()},s.splice=function(e,t,n){e=e<0?a(this.length+e,0):e,t=a(0,l(this.length-e,t));var r,o=[],i=[],s=[];for(r=2;r<arguments.length;r++)s.push(arguments[r]);for(r=0;r<t;r++)i.push(this[e+r]);for(;r<this.length-e;r++)o.push(this[e+r]);var c=s.length;for(r=0;r<c+o.length;r++)this.items[e+r]=this[e+r]=r<c?s[r]:o[r-c];for(r=this.items.length=this.length-=t-c;this[r];)delete this[r++];return new u(i)},s.exclude=function(e){for(var t=0,n=this.length;t<n;t++)if(this[t]==e)return this.splice(t,1),!0;return!1},s.insertAfter=function(e){for(var t=this.items.length;t--;)this.items[t].insertAfter(e);return this},s.getBBox=function(){for(var e=[],t=[],n=[],r=[],o=this.items.length;o--;)if(!this.items[o].removed){var i=this.items[o].getBBox();e.push(i.x),t.push(i.y),n.push(i.x+i.width),r.push(i.y+i.height)}return{x:e=l.apply(0,e),y:t=l.apply(0,t),x2:n=a.apply(0,n),y2:r=a.apply(0,r),width:n-e,height:r-t,cx:e+(n-e)/2,cy:t+(r-t)/2}},s.clone=function(e){e=new u;for(var t=0,n=this.items.length;t<n;t++)e.push(this.items[t].clone());return e},s.toString=function(){return"Snap‘s set"},s.type="set",e.Set=u,e.set=function(){var e=new u;return arguments.length&&e.push.apply(e,Array.prototype.slice.call(arguments,0)),e}})),r.plugin((function(e,n,r,o){var i={},a=/[%a-z]+$/i,l=String;function u(e){var t=e[0];switch(t.toLowerCase()){case"t":return[t,0,0];case"m":return[t,1,0,0,1,0,0];case"r":return 4==e.length?[t,0,e[2],e[3]]:[t,0];case"s":return 5==e.length?[t,1,1,e[3],e[4]]:3==e.length?[t,1,1]:[t,1]}}function s(e){return e}function c(e){return e.join(" ")}function f(t){return e.rgb(t[0],t[1],t[2],t[3])}function d(e){var t,n,r,o,i,a,l=0,u=[];for(t=0,n=e.length;t<n;t++){for(i="[",a=['"'+e[t][0]+'"'],r=1,o=e[t].length;r<o;r++)a[r]="val["+l+++"]";i+=a+"]",u[t]=i}return Function("val","return Snap.path.toString.call(["+u+"])")}function p(e){for(var t=[],n=0,r=e.length;n<r;n++)for(var o=1,i=e[n].length;o<i;o++)t.push(e[n][o]);return t}function h(e){return isFinite(e)}i.stroke=i.fill="colour",n.prototype.equal=function(e,n){return t("snap.util.equal",this,e,n).firstDefined()},t.on("snap.util.equal",(function(t,n){var r,o,m=l(this.attr(t)||""),y=this;if("colour"==i[t])return r=e.color(m),o=e.color(n),{from:[r.r,r.g,r.b,r.opacity],to:[o.r,o.g,o.b,o.opacity],f:f};if("viewBox"==t)return{from:r=this.attr(t).vb.split(" ").map(Number),to:o=n.split(" ").map(Number),f:c};if("transform"==t||"gradientTransform"==t||"patternTransform"==t)return"string"==typeof n&&(n=l(n).replace(/\.{3}|\u2026/g,m)),function(t,n,r){t=t||new e.Matrix,n=n||new e.Matrix,t=e.parseTransformString(t.toTransformString())||[],n=e.parseTransformString(n.toTransformString())||[];for(var o,i,a,l,s=Math.max(t.length,n.length),c=[],f=[],h=0;h<s;h++){if(a=t[h]||u(n[h]),l=n[h]||u(a),a[0]!=l[0]||"r"==a[0].toLowerCase()&&(a[2]!=l[2]||a[3]!=l[3])||"s"==a[0].toLowerCase()&&(a[3]!=l[3]||a[4]!=l[4])){t=e._.transform2matrix(t,r()),n=e._.transform2matrix(n,r()),c=[["m",t.a,t.b,t.c,t.d,t.e,t.f]],f=[["m",n.a,n.b,n.c,n.d,n.e,n.f]];break}for(c[h]=[],f[h]=[],o=0,i=Math.max(a.length,l.length);o<i;o++)o in a&&(c[h][o]=a[o]),o in l&&(f[h][o]=l[o])}return{from:p(c),to:p(f),f:d(c)}}(m=this.matrix,n=e._.rgTransform.test(n)?e._.transform2matrix(n,this.getBBox()):e._.transform2matrix(e._.svgTransform2string(n),this.getBBox()),(function(){return y.getBBox(1)}));if("d"==t||"path"==t)return{from:p((r=e.path.toCubic(m,n))[0]),to:p(r[1]),f:d(r[0])};if("points"==t)return{from:r=l(m).split(e._.separator),to:o=l(n).split(e._.separator),f:function(e){return e}};if(h(m)&&h(n))return{from:parseFloat(m),to:parseFloat(n),f:s};var v,g,b,w=m.match(a),x=l(n).match(a);return w&&(g=w,b=x,e.is(g,"array")&&e.is(b,"array")&&g.toString()==b.toString())?{from:parseFloat(m),to:parseFloat(n),f:(v=w,function(e){return+e.toFixed(3)+v})}:{from:this.asPX(t),to:this.asPX(t,n),f:s}}))})),r.plugin((function(e,n,r,o){for(var i=n.prototype,a=("createTouch"in o.doc),l=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],u={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},s=function(e,t){var n="y"==e?"scrollTop":"scrollLeft",r=t&&t.node?t.node.ownerDocument:o.doc;return r[n in r.documentElement?"documentElement":"body"][n]},c=function(){return this.originalEvent.preventDefault()},f=function(){return this.originalEvent.stopPropagation()},d=function(e,t,n,r){var o=a&&u[t]?u[t]:t,i=function(o){var i=s("y",r),l=s("x",r);if(a&&u.hasOwnProperty(t))for(var d=0,p=o.targetTouches&&o.targetTouches.length;d<p;d++)if(o.targetTouches[d].target==e||e.contains(o.targetTouches[d].target)){var h=o;(o=o.targetTouches[d]).originalEvent=h,o.preventDefault=c,o.stopPropagation=f;break}var m=o.clientX+l,y=o.clientY+i;return n.call(r,o,m,y)};return t!==o&&e.addEventListener(t,i,!1),e.addEventListener(o,i,!1),function(){return t!==o&&e.removeEventListener(t,i,!1),e.removeEventListener(o,i,!1),!0}},p=[],h=function(e){for(var n,r=e.clientX,o=e.clientY,i=s("y"),l=s("x"),u=p.length;u--;){if(n=p[u],a){for(var c,f=e.touches&&e.touches.length;f--;)if((c=e.touches[f]).identifier==n.el._drag.id||n.el.node.contains(c.target)){r=c.clientX,o=c.clientY,(e.originalEvent?e.originalEvent:e).preventDefault();break}}else e.preventDefault();var d=n.el.node;d.nextSibling,d.parentNode,d.style.display,r+=l,o+=i,t("snap.drag.move."+n.el.id,n.move_scope||n.el,r-n.el._drag.x,o-n.el._drag.y,r,o,e)}},m=function n(r){e.unmousemove(h).unmouseup(n);for(var o,i=p.length;i--;)(o=p[i]).el._drag={},t("snap.drag.end."+o.el.id,o.end_scope||o.start_scope||o.move_scope||o.el,r),t.off("snap.drag.*."+o.el.id);p=[]},y=l.length;y--;)!function(t){e[t]=i[t]=function(n,r){if(e.is(n,"function"))this.events=this.events||[],this.events.push({name:t,f:n,unbind:d(this.node||document,t,n,r||this)});else for(var o=0,i=this.events.length;o<i;o++)if(this.events[o].name==t)try{this.events[o].f.call(this)}catch(e){}return this},e["un"+t]=i["un"+t]=function(e){for(var n=this.events||[],r=n.length;r--;)if(n[r].name==t&&(n[r].f==e||!e))return n[r].unbind(),n.splice(r,1),!n.length&&delete this.events,this;return this}}(l[y]);i.hover=function(e,t,n,r){return this.mouseover(e,n).mouseout(t,r||n)},i.unhover=function(e,t){return this.unmouseover(e).unmouseout(t)};var v=[];i.drag=function(n,r,o,i,a,l){var u,s=this;if(!arguments.length)return s.drag((function(e,t){this.attr({transform:u+(u?"T":"t")+[e,t]})}),(function(){u=this.transform().local}));function c(u,c,f){(u.originalEvent||u).preventDefault(),s._drag.x=c,s._drag.y=f,s._drag.id=u.identifier,!p.length&&e.mousemove(h).mouseup(m),p.push({el:s,move_scope:i,start_scope:a,end_scope:l}),r&&t.on("snap.drag.start."+s.id,r),n&&t.on("snap.drag.move."+s.id,n),o&&t.on("snap.drag.end."+s.id,o),t("snap.drag.start."+s.id,a||i||s,c,f,u)}function f(e,n,r){t("snap.draginit."+s.id,s,e,n,r)}return t.on("snap.draginit."+s.id,c),s._drag={},v.push({el:s,start:c,init:f}),s.mousedown(f),s},i.undrag=function(){for(var n=v.length;n--;)v[n].el==this&&(this.unmousedown(v[n].init),v.splice(n,1),t.unbind("snap.drag.*."+this.id),t.unbind("snap.draginit."+this.id));return!v.length&&e.unmousemove(h).unmouseup(m),this}})),r.plugin((function(e,n,r,o){n.prototype;var i=r.prototype,a=/^\s*url\((.+)\)/,l=String,u=e._.$;e.filter={},i.filter=function(t){var r=this;"svg"!=r.type&&(r=r.paper);var o=e.parse(l(t)),i=e._.id(),a=(r.node.offsetWidth,r.node.offsetHeight,u("filter"));return u(a,{id:i,filterUnits:"userSpaceOnUse"}),a.appendChild(o.node),r.defs.appendChild(a),new n(a)},t.on("snap.util.getattr.filter",(function(){t.stop();var n=u(this.node,"filter");if(n){var r=l(n).match(a);return r&&e.select(r[1])}})),t.on("snap.util.attr.filter",(function(r){if(r instanceof n&&"filter"==r.type){t.stop();var o=r.node.id;o||(u(r.node,{id:r.id}),o=r.id),u(this.node,{filter:e.url(o)})}r&&"none"!=r||(t.stop(),this.node.removeAttribute("filter"))})),e.filter.blur=function(t,n){null==t&&(t=2);var r=null==n?t:[t,n];return e.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},e.filter.blur.toString=function(){return this()},e.filter.shadow=function(t,n,r,o,i){return null==i&&(null==o?(i=r,r=4,o="#000"):(i=o,o=r,r=4)),null==r&&(r=4),null==i&&(i=1),null==t&&(t=0,n=2),null==n&&(n=t),o=e.color(o),e.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:o,dx:t,dy:n,blur:r,opacity:i})},e.filter.shadow.toString=function(){return this()},e.filter.grayscale=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-t),b:.7152-.7152*(1-t),c:.0722-.0722*(1-t),d:.2126-.2126*(1-t),e:.7152+.2848*(1-t),f:.0722-.0722*(1-t),g:.2126-.2126*(1-t),h:.0722+.9278*(1-t)})},e.filter.grayscale.toString=function(){return this()},e.filter.sepia=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-t),b:.769-.769*(1-t),c:.189-.189*(1-t),d:.349-.349*(1-t),e:.686+.314*(1-t),f:.168-.168*(1-t),g:.272-.272*(1-t),h:.534-.534*(1-t),i:.131+.869*(1-t)})},e.filter.sepia.toString=function(){return this()},e.filter.saturate=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-t})},e.filter.saturate.toString=function(){return this()},e.filter.hueRotate=function(t){return t=t||0,e.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:t})},e.filter.hueRotate.toString=function(){return this()},e.filter.invert=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:t,amount2:1-t})},e.filter.invert.toString=function(){return this()},e.filter.brightness=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:t})},e.filter.brightness.toString=function(){return this()},e.filter.contrast=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:t,amount2:.5-t/2})},e.filter.contrast.toString=function(){return this()}})),r.plugin((function(e,t,n,r,o){var i=e._.box,a=e.is,l=/^[^a-z]*([tbmlrc])/i,u=function(){return"T"+this.dx+","+this.dy};t.prototype.getAlign=function(e,t){null==t&&a(e,"string")&&(t=e,e=null);var n=(e=e||this.paper).getBBox?e.getBBox():i(e),r=this.getBBox(),o={};switch(t=(t=t&&t.match(l))?t[1].toLowerCase():"c"){case"t":o.dx=0,o.dy=n.y-r.y;break;case"b":o.dx=0,o.dy=n.y2-r.y2;break;case"m":o.dx=0,o.dy=n.cy-r.cy;break;case"l":o.dx=n.x-r.x,o.dy=0;break;case"r":o.dx=n.x2-r.x2,o.dy=0;break;default:o.dx=n.cx-r.cx,o.dy=0}return o.toString=u,o},t.prototype.align=function(e,t){return this.transform("..."+this.getAlign(e,t))}})),r.plugin((function(t,n,r,o){function i(e){e=e.split(/(?=#)/);var t=new String(e[5]);return t[50]=e[0],t[100]=e[1],t[200]=e[2],t[300]=e[3],t[400]=e[4],t[500]=e[5],t[600]=e[6],t[700]=e[7],t[800]=e[8],t[900]=e[9],e[10]&&(t.A100=e[10],t.A200=e[11],t.A400=e[12],t.A700=e[13]),t}t.mui={},t.flat={},t.mui.red=i("#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000"),t.mui.pink=i("#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162"),t.mui.purple=i("#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF"),t.mui.deeppurple=i("#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA"),t.mui.indigo=i("#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE"),t.mui.blue=i("#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF"),t.mui.lightblue=i("#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA"),t.mui.cyan=i("#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4"),t.mui.teal=i("#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5"),t.mui.green=i("#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853"),t.mui.lightgreen=i("#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17"),t.mui.lime=i("#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00"),t.mui.yellow=i("#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600"),t.mui.amber=i("#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00"),t.mui.orange=i("#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00"),t.mui.deeporange=i("#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00"),t.mui.brown=i("#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723"),t.mui.grey=i("#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121"),t.mui.bluegrey=i("#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238"),t.flat.turquoise="#1abc9c",t.flat.greensea="#16a085",t.flat.sunflower="#f1c40f",t.flat.orange="#f39c12",t.flat.emerland="#2ecc71",t.flat.nephritis="#27ae60",t.flat.carrot="#e67e22",t.flat.pumpkin="#d35400",t.flat.peterriver="#3498db",t.flat.belizehole="#2980b9",t.flat.alizarin="#e74c3c",t.flat.pomegranate="#c0392b",t.flat.amethyst="#9b59b6",t.flat.wisteria="#8e44ad",t.flat.clouds="#ecf0f1",t.flat.silver="#bdc3c7",t.flat.wetasphalt="#34495e",t.flat.midnightblue="#2c3e50",t.flat.concrete="#95a5a6",t.flat.asbestos="#7f8c8d",t.importMUIColors=function(){for(var n in t.mui)t.mui.hasOwnProperty(n)&&(e[n]=t.mui[n])}})),r}(y,e)}.apply(t,[r]))||(e.exports=o)}).call(window)},function(e,t,n){var r=n(98);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(100)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(99)(!1)).push([e.i,'*{box-sizing:border-box}body{background-color:white;color:#424242;min-height:10000px}ul{list-style-type:none}nav a{text-decoration:none;color:#424242;padding:0.5rem;border-radius:5px}nav a:hover{background-color:#2591DB;color:#fff;transition:background-color 0.1s}button:hover{background-color:#2591DB;color:#fff;transition:background-color 0.1s}h1{text-align:center}.viewer{display:block;text-align:center}.viewer h1{padding:2rem;color:#424242;font-size:2rem}.viewer h2{padding:2rem;color:#777;font-size:1.5rem}.panel{text-align:left;padding:3rem;margin-top:4rem;margin-left:auto;margin-right:auto;width:80%;max-width:700px;border-radius:5px;box-shadow:0px 1px 0px 1px #ccc}.panel span{margin-right:2rem}.panel h1{padding-left:0;text-align:left;color:#777;font-size:3.5rem}.panel>form,.panel .panel-form{border:1px solid #ccc;padding:3rem}.panel>form input,.panel .panel-form input{height:30px}.panel>form button,.panel .panel-form button{margin-left:10px;margin-bottom:0;height:30px;vertical-align:middle;line-height:100%;border-color:#ccc}.panel .list-tile{width:100%;border-radius:5px;padding-left:3rem;padding-top:1rem;padding-bottom:1rem;box-shadow:0 1px 0 1px #ccc;padding-left:3rem}.panel a{display:inline}.panel a:hover{display:inline}.item-card{display:block;width:100%;height:100%;padding-top:1.5rem;border-radius:5px;border:1px solid #ccc}.item-card .avatar-wrap{display:inline-block;padding:0;margin:0;width:30%;height:100%;padding-top:8px;text-align:center;line-height:100%}.item-card .card-content-wrap{display:inline-block;width:70%;height:100%;padding:0;margin:0;vertical-align:top;text-align:left}.item-card .item-tools-nav-wrap{display:block;width:100%;text-align:left;margin-left:1rem}.item-card .title{display:block;padding-top:0.4rem;padding-bottom:1rem;margin-right:1rem;font-size:1.1em;text-align:left;margin-left:3.5rem;border-bottom:1px solid #ccc}.item-card .title a{color:#777;font-weight:bold;font-size:1.5rem;text-align:center}.item-card .title a:hover{color:white}.item-card .title *{text-decoration:none}.item-card .info{display:block;position:relative;color:#777;background-color:white;margin-left:4rem;margin-right:1rem}.item-card .image-wrap{position:relative;display:inline-block;padding-top:60%;width:50%;margin-left:auto;margin-right:auto;vertical-align:middle}.item-card .image{position:absolute;display:inline-block;top:0;bottom:0;left:0;right:0;padding:0;margin:0;width:100%;border-radius:5%;background-color:#036}.item-card .image:hover{cursor:pointer;filter:grayscale(100%) sepia(100%) saturate(500%) hue-rotate(180deg);transition:filter 0.5s}.authentication-nav-wrap{display:block}.authentication-nav{display:inline-block;padding:10px;text-align:center;margin-left:auto;margin-right:auto;border:0}.authentication-nav .current-user-label{color:#777;font-size:1.1rem;padding:1rem}.authentication-nav i{display:inline-block}.authentication-nav ul{display:inline-block;text-align:center;margin-bottom:0}.authentication-nav li{display:inline-block;margin:auto;text-align:center}.authentication-nav a:hover{background-color:inherit}.authentication-nav button{display:inline-block;font-size:1.1rem;margin:0;border:0}.auth-form{display:block;width:90%;max-width:700px;margin-left:auto;margin-right:auto;text-align:center}.auth-form input{display:block;width:80%;margin-left:auto;margin-right:auto;text-align:center}.auth-form input[type="submit"]{max-width:200px}.main-nav{display:inline-block;margin-left:auto;margin-right:auto}.main-nav ul{padding:0;margin:0}.main-nav li{display:inline-block}.recommendation-tile .recommended-by{margin-top:1rem;font-size:1rem;text-align:center}.user-search-viewer{margin-bottom:5rem;text-align:left}.user-list,.user-search-results{display:inline-block;margin-left:auto;margin-right:auto;text-align:left}.user-tile-wrap{display:block}.user-tile{border-bottom:1px solid #ccc;padding-bottom:1.5rem}.user-tile .user-info{display:flex;justify-content:space-between;width:100%;line-height:100%;border-radius:5px}.user-tile .user-info .icon-wrap{display:inline-block;padding:0;margin:0;line-height:3rem;vertical-align:middle}.user-tile .user-info .icon-wrap i{display:inline-block;padding:0;margin:0}.user-tile .user-info .username{display:inline-block;color:#777;line-height:3rem;vertical-align:bottom}.user-tile .user-info .add-user-to-friends-form{display:inline-block;margin:0;padding:0;vertical-align:middle}.user-tile .user-info .add-user-to-friends-form button{height:30px;width:30px;margin:0;padding:0;line-height:100%;border-radius:50%;border:0;vertical-align:middle}.user-tile .server-response-message{display:block}.item-tools-nav-wrap{display:inline-block;margin-top:1rem}.item-tools-nav{display:block}.item-tools-nav ul{margin:0;padding:0;border:0}.item-tools-nav ul>li{display:inline-block;margin:0;padding:0;width:auto;height:auto;border:0}.tool-widget{position:relative;display:inline-block;margin:0;border:0;padding:0;width:auto;height:10px;text-align:center}.tool-button-form{display:inline-block;margin:0;padding:0px;border-radius:50%;border:0;text-align:center}.tool-label{font-size:11px;text-align:center}.tool-button{display:inline-block;margin:0;border:0;border-radius:50%;padding-left:1em;padding-right:1em;font-size:1em}.tool-button i{color:#414141}.tool-button:hover{color:#fff;background-color:#2591DB;transition:background-color 0.1s}.tool-button:hover i{color:#fff}.tool-dialog{position:absolute;display:block;top:-2rem;left:2rem;padding:1.5rem;background-color:white;box-shadow:-2px -2px 7px 0px rgba(77,77,77,0.4);opacity:0.95;border-radius:5px;border:1px solid #ccc;z-index:1000}.tool-dialog h1{display:block;margin:0 0 10px 0;font-size:2rem;color:#424242}.tool-dialog h2{display:block;font-size:1.4rem;color:#777}.tool-dialog form{display:block;padding:10px;margin:0;padding:0;line-height:20px;min-width:300px}.tool-dialog form fieldset{display:block;width:100%;margin:0;padding:0}.tool-dialog form label{margin-left:1.5rem;text-align:left;color:#424242;font-weight:regular}.tool-dialog form input,.tool-dialog form select{display:inline-block;width:80%;height:30px;margin-bottom:0.5rem;background-color:white;color:#424242;border:1px solid #ccc}.tool-dialog form input::placeholder,.tool-dialog form select::placeholder{color:#424242}.tool-dialog form option{padding:1.5rem;font-size:1.5rem;color:#424242}.tool-dialog form button{display:inline-block;height:30px;margin-left:0.5rem;padding:10px;text-align:center;vertical-align:middle;line-height:100%;border:0;border-radius:50%}.tool-dialog form .red-button{border-radius:5px;background-color:red;color:white}.tool-dialog form .red-button:hover{background-color:orange}.like-button button{display:inline-block;margin:0;border:0;border-radius:50%;padding-left:1em;padding-right:1em;font-size:1em}.visible{visibility:visible}.hidden{visibility:hidden}.display-none{display:none}.display-inline-block{display:inline-block}.server-response-message{color:red;text-align:center}.white{color:white}.green{color:green}.red{color:red}.green-background{background-color:green}.red-background{background-color:red}.artist-info-wrap{margin-left:auto;margin-right:auto;padding:2em;width:100%;max-width:1280px;border:1px solid #ccc}.artist-info-wrap h1{margin-top:1em;margin-bottom:1em}.artist-info-wrap .artist-image-wrap{position:relative;display:block;margin-left:auto;margin-right:auto;max-width:500px;text-align:center}.artist-info-wrap .artist-image-wrap .background-effects .bar{width:200px}.artist-info-wrap .artist-image{border-radius:50%;z-index:100}.artist-info-wrap .artist-image-wrap .background-effects .bar{width:0px;transition:width 1s;z-index:-1}.artist-bio p{margin-bottom:1em;line-height:1.8em;letter-spacing:0.06em}.similar-artists-container a:hover{background-color:inherit}.similar-artists-container h1{text-align:center}.similar-artists-container ul{display:flex;flex-wrap:wrap;justify-content:center;padding-bottom:2em;max-width:100%;list-style-type:none}.similar-artist-tile{width:50px;height:50px}.similar-artist-tile:hover{cursor:pointer}.similar-artist-tile .artist-name{display:inline-block;position:absolute;font-size:1em;color:#424242}.similar-artist-tile .artist-image-wrap{overflow:hidden;border-radius:50%;width:100%;height:100%;background-color:#0080ff}.similar-artist-tile .artist-image{width:100%;height:100%}.similar-artist-tile .artist-image:hover{filter:grayscale(100%)}#artist-albums-wrap h1{display:block;text-align:center}#artist-albums-wrap .albums-list{display:flex;flex-direction:row;justify-content:center;flex-wrap:wrap;list-style-type:none}#artist-albums-wrap .album-list li{display:inline-block}.artist-albums-tile{box-sizing:border-box;display:flex;flex-wrap:nowrap;flex-direction:column;justify-content:space-between;text-align:center;width:200px;padding-bottom:0.5em;border:1px solid rgba(255,255,255,0)}.artist-albums-tile:hover{box-sizing:border-box;border:1px solid #ccc;cursor:pointer}.artist-albums-tile h1{font-size:1em;text-align:center}.artist-albums-tile img{margin-left:auto;margin-right:auto;width:160px;height:160px;background-color:#0080ff}.main-header{text-align:center;padding:1em}.main-header h2{font-size:1.5em}.nav-container{line-height:100%;vertical-align:middle;border:1px solid red}#main-search-form{display:block;margin:0;border:1px solid #aaa;padding:1em;text-align:center}#main-search-widgets-container{display:inline-block;width:100%;max-width:640px;margin-left:auto;margin-right:auto;text-align:center}#main-search-form-text-input{width:100%;text-align:center}@media screen and (min-width: 640px){#main-search-form-text-input{width:80%;max-width:720px}}#main-search-form-submit-button{width:100%;text-align:center;font-family:FontAwesome}@media screen and (min-width: 640px){#main-search-form-submit-button{width:auto;margin-left:10px}}.main-viewer-component-wrap{width:100vw}\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){return document.querySelector(e)},u=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=l.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),s=null,c=0,f=[],d=n(101);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function m(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=s||(s=v(t)),r=_.bind(null,n,a,!1),o=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=k.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=S.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&p(h(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function S(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function k(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}},function(e,t,n){"use strict";e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,